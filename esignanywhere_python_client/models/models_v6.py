# generated by datamodel-codegen:
#   filename:  https://demo.esignanywhere.net/swagger/jsons/swagger.v6.json
#   timestamp: 2024-05-30T13:38:03+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, List, Optional
from uuid import UUID

from pydantic import BaseModel, Field


class Model(BaseModel):
    __root__: Any


class AuthorizationWhoAmISamlAssignment(BaseModel):
    ProviderName: Optional[str] = Field(
        None, description="The name of the SAML provider."
    )
    IdentificationValue: Optional[str] = Field(
        None, description="The value to map from a SAML response to this user."
    )


class ErrorResponse(BaseModel):
    ErrorId: Optional[str] = Field(None, description="Id of the error.")
    Message: Optional[str] = Field(None, description="Message from the error.")
    TraceId: Optional[str] = Field(None, description="Trace identifier.")


class AutomaticProfileGetAllProfile(BaseModel):
    Id: Optional[str] = Field(None, description="The identifier of the profile.")
    Description: Optional[str] = Field(
        None, description="The unique description of the profile."
    )


class AutomaticProfileGetAllSignaturePluginDefinition(BaseModel):
    PluginId: Optional[str] = Field(
        None, description="The identifier of the signature plugin."
    )
    Profiles: Optional[List[AutomaticProfileGetAllProfile]] = Field(
        None, description="The profiles available for automatic signing."
    )


class RenderingLanguageCode(Enum):
    AF = "AF"
    AF_ZA = "AF_ZA"
    AR = "AR"
    AR_AE = "AR_AE"
    AR_BH = "AR_BH"
    AR_DZ = "AR_DZ"
    AR_EG = "AR_EG"
    AR_IQ = "AR_IQ"
    AR_JO = "AR_JO"
    AR_KW = "AR_KW"
    AR_LB = "AR_LB"
    AR_LY = "AR_LY"
    AR_MA = "AR_MA"
    AR_OM = "AR_OM"
    AR_QA = "AR_QA"
    AR_SA = "AR_SA"
    AR_SY = "AR_SY"
    AR_TN = "AR_TN"
    AR_YE = "AR_YE"
    AZ = "AZ"
    AZ_AZ = "AZ_AZ"
    BE = "BE"
    BE_BY = "BE_BY"
    BG = "BG"
    BG_BG = "BG_BG"
    BS_BA = "BS_BA"
    CA = "CA"
    CA_ES = "CA_ES"
    CS = "CS"
    CS_CZ = "CS_CZ"
    CY = "CY"
    CY_GB = "CY_GB"
    DA = "DA"
    DA_DK = "DA_DK"
    DE = "DE"
    DE_AT = "DE_AT"
    DE_CH = "DE_CH"
    DE_DE = "DE_DE"
    DE_LI = "DE_LI"
    DE_LU = "DE_LU"
    DV = "DV"
    DV_MV = "DV_MV"
    EL = "EL"
    EL_GR = "EL_GR"
    EN = "EN"
    EN_AU = "EN_AU"
    EN_BZ = "EN_BZ"
    EN_CA = "EN_CA"
    EN_CB = "EN_CB"
    EN_GB = "EN_GB"
    EN_IE = "EN_IE"
    EN_JM = "EN_JM"
    EN_NZ = "EN_NZ"
    EN_PH = "EN_PH"
    EN_TT = "EN_TT"
    EN_US = "EN_US"
    EN_ZA = "EN_ZA"
    EN_ZW = "EN_ZW"
    EO = "EO"
    ES = "ES"
    ES_AR = "ES_AR"
    ES_BO = "ES_BO"
    ES_CL = "ES_CL"
    ES_CO = "ES_CO"
    ES_CR = "ES_CR"
    ES_DO = "ES_DO"
    ES_EC = "ES_EC"
    ES_ES = "ES_ES"
    ES_GT = "ES_GT"
    ES_HN = "ES_HN"
    ES_MX = "ES_MX"
    ES_NI = "ES_NI"
    ES_PA = "ES_PA"
    ES_PE = "ES_PE"
    ES_PR = "ES_PR"
    ES_PY = "ES_PY"
    ES_SV = "ES_SV"
    ES_UY = "ES_UY"
    ES_VE = "ES_VE"
    ET = "ET"
    ET_EE = "ET_EE"
    EU = "EU"
    EU_ES = "EU_ES"
    FA = "FA"
    FA_IR = "FA_IR"
    FI = "FI"
    FI_FI = "FI_FI"
    FO = "FO"
    FO_FO = "FO_FO"
    FR = "FR"
    FR_BE = "FR_BE"
    FR_CA = "FR_CA"
    FR_CH = "FR_CH"
    FR_FR = "FR_FR"
    FR_LU = "FR_LU"
    FR_MC = "FR_MC"
    GL = "GL"
    GL_ES = "GL_ES"
    GU = "GU"
    GU_IN = "GU_IN"
    HE = "HE"
    HE_IL = "HE_IL"
    HI = "HI"
    HI_IN = "HI_IN"
    HR = "HR"
    HR_BA = "HR_BA"
    HR_HR = "HR_HR"
    HU = "HU"
    HU_HU = "HU_HU"
    HY = "HY"
    HY_AM = "HY_AM"
    ID = "ID"
    ID_ID = "ID_ID"
    IS = "IS"
    IS_IS = "IS_IS"
    IT = "IT"
    IT_CH = "IT_CH"
    IT_IT = "IT_IT"
    JA = "JA"
    JA_JP = "JA_JP"
    KA = "KA"
    KA_GE = "KA_GE"
    KK = "KK"
    KK_KZ = "KK_KZ"
    KN = "KN"
    KN_IN = "KN_IN"
    KO = "KO"
    KO_KR = "KO_KR"
    KOK = "KOK"
    KOK_IN = "KOK_IN"
    KY = "KY"
    KY_KG = "KY_KG"
    LT = "LT"
    LT_LT = "LT_LT"
    LV = "LV"
    LV_LV = "LV_LV"
    MI = "MI"
    MI_NZ = "MI_NZ"
    MK = "MK"
    MK_MK = "MK_MK"
    MN = "MN"
    MN_MN = "MN_MN"
    MR = "MR"
    MR_IN = "MR_IN"
    MS = "MS"
    MS_BN = "MS_BN"
    MS_MY = "MS_MY"
    MT = "MT"
    MT_MT = "MT_MT"
    NB = "NB"
    NB_NO = "NB_NO"
    NL = "NL"
    NL_BE = "NL_BE"
    NL_NL = "NL_NL"
    NN_NO = "NN_NO"
    NS = "NS"
    NS_ZA = "NS_ZA"
    PA = "PA"
    PA_IN = "PA_IN"
    PL = "PL"
    PL_PL = "PL_PL"
    PS = "PS"
    PS_AR = "PS_AR"
    PT = "PT"
    PT_BR = "PT_BR"
    PT_PT = "PT_PT"
    QU = "QU"
    QU_BO = "QU_BO"
    QU_EC = "QU_EC"
    QU_PE = "QU_PE"
    RO = "RO"
    RO_RO = "RO_RO"
    RU = "RU"
    RU_RU = "RU_RU"
    SA = "SA"
    SA_IN = "SA_IN"
    SE = "SE"
    SE_FI = "SE_FI"
    SE_NO = "SE_NO"
    SE_SE = "SE_SE"
    SK = "SK"
    SK_SK = "SK_SK"
    SL = "SL"
    SL_SI = "SL_SI"
    SQ = "SQ"
    SQ_AL = "SQ_AL"
    SR_BA = "SR_BA"
    SR_SP = "SR_SP"
    SV = "SV"
    SV_FI = "SV_FI"
    SV_SE = "SV_SE"
    SW = "SW"
    SW_KE = "SW_KE"
    SYR = "SYR"
    SYR_SY = "SYR_SY"
    TA = "TA"
    TA_IN = "TA_IN"
    TE = "TE"
    TE_IN = "TE_IN"
    TH = "TH"
    TH_TH = "TH_TH"
    TL = "TL"
    TL_PH = "TL_PH"
    TN = "TN"
    TN_ZA = "TN_ZA"
    TR = "TR"
    TR_TR = "TR_TR"
    TT = "TT"
    TT_RU = "TT_RU"
    TS = "TS"
    UK = "UK"
    UK_UA = "UK_UA"
    UR = "UR"
    UR_PK = "UR_PK"
    UZ = "UZ"
    UZ_UZ = "UZ_UZ"
    VI = "VI"
    VI_VN = "VI_VN"
    XH = "XH"
    XH_ZA = "XH_ZA"
    ZH = "ZH"
    ZH_CN = "ZH_CN"
    ZH_HK = "ZH_HK"
    ZH_MO = "ZH_MO"
    ZH_SG = "ZH_SG"
    ZH_TW = "ZH_TW"
    ZU = "ZU"
    ZU_ZA = "ZU_ZA"


class DraftGetSignAutomatic(BaseModel):
    ProfileId: Optional[str] = Field(
        None, description="The identifier of the profile for the automatic signatures."
    )
    RenderingLanguageCode: Optional[RenderingLanguageCode] = Field(
        None, description="The rendering language for the automatic signatures."
    )


class LanguageCode(Enum):
    AF = "AF"
    AF_ZA = "AF_ZA"
    AR = "AR"
    AR_AE = "AR_AE"
    AR_BH = "AR_BH"
    AR_DZ = "AR_DZ"
    AR_EG = "AR_EG"
    AR_IQ = "AR_IQ"
    AR_JO = "AR_JO"
    AR_KW = "AR_KW"
    AR_LB = "AR_LB"
    AR_LY = "AR_LY"
    AR_MA = "AR_MA"
    AR_OM = "AR_OM"
    AR_QA = "AR_QA"
    AR_SA = "AR_SA"
    AR_SY = "AR_SY"
    AR_TN = "AR_TN"
    AR_YE = "AR_YE"
    AZ = "AZ"
    AZ_AZ = "AZ_AZ"
    BE = "BE"
    BE_BY = "BE_BY"
    BG = "BG"
    BG_BG = "BG_BG"
    BS_BA = "BS_BA"
    CA = "CA"
    CA_ES = "CA_ES"
    CS = "CS"
    CS_CZ = "CS_CZ"
    CY = "CY"
    CY_GB = "CY_GB"
    DA = "DA"
    DA_DK = "DA_DK"
    DE = "DE"
    DE_AT = "DE_AT"
    DE_CH = "DE_CH"
    DE_DE = "DE_DE"
    DE_LI = "DE_LI"
    DE_LU = "DE_LU"
    DV = "DV"
    DV_MV = "DV_MV"
    EL = "EL"
    EL_GR = "EL_GR"
    EN = "EN"
    EN_AU = "EN_AU"
    EN_BZ = "EN_BZ"
    EN_CA = "EN_CA"
    EN_CB = "EN_CB"
    EN_GB = "EN_GB"
    EN_IE = "EN_IE"
    EN_JM = "EN_JM"
    EN_NZ = "EN_NZ"
    EN_PH = "EN_PH"
    EN_TT = "EN_TT"
    EN_US = "EN_US"
    EN_ZA = "EN_ZA"
    EN_ZW = "EN_ZW"
    EO = "EO"
    ES = "ES"
    ES_AR = "ES_AR"
    ES_BO = "ES_BO"
    ES_CL = "ES_CL"
    ES_CO = "ES_CO"
    ES_CR = "ES_CR"
    ES_DO = "ES_DO"
    ES_EC = "ES_EC"
    ES_ES = "ES_ES"
    ES_GT = "ES_GT"
    ES_HN = "ES_HN"
    ES_MX = "ES_MX"
    ES_NI = "ES_NI"
    ES_PA = "ES_PA"
    ES_PE = "ES_PE"
    ES_PR = "ES_PR"
    ES_PY = "ES_PY"
    ES_SV = "ES_SV"
    ES_UY = "ES_UY"
    ES_VE = "ES_VE"
    ET = "ET"
    ET_EE = "ET_EE"
    EU = "EU"
    EU_ES = "EU_ES"
    FA = "FA"
    FA_IR = "FA_IR"
    FI = "FI"
    FI_FI = "FI_FI"
    FO = "FO"
    FO_FO = "FO_FO"
    FR = "FR"
    FR_BE = "FR_BE"
    FR_CA = "FR_CA"
    FR_CH = "FR_CH"
    FR_FR = "FR_FR"
    FR_LU = "FR_LU"
    FR_MC = "FR_MC"
    GL = "GL"
    GL_ES = "GL_ES"
    GU = "GU"
    GU_IN = "GU_IN"
    HE = "HE"
    HE_IL = "HE_IL"
    HI = "HI"
    HI_IN = "HI_IN"
    HR = "HR"
    HR_BA = "HR_BA"
    HR_HR = "HR_HR"
    HU = "HU"
    HU_HU = "HU_HU"
    HY = "HY"
    HY_AM = "HY_AM"
    ID = "ID"
    ID_ID = "ID_ID"
    IS = "IS"
    IS_IS = "IS_IS"
    IT = "IT"
    IT_CH = "IT_CH"
    IT_IT = "IT_IT"
    JA = "JA"
    JA_JP = "JA_JP"
    KA = "KA"
    KA_GE = "KA_GE"
    KK = "KK"
    KK_KZ = "KK_KZ"
    KN = "KN"
    KN_IN = "KN_IN"
    KO = "KO"
    KO_KR = "KO_KR"
    KOK = "KOK"
    KOK_IN = "KOK_IN"
    KY = "KY"
    KY_KG = "KY_KG"
    LT = "LT"
    LT_LT = "LT_LT"
    LV = "LV"
    LV_LV = "LV_LV"
    MI = "MI"
    MI_NZ = "MI_NZ"
    MK = "MK"
    MK_MK = "MK_MK"
    MN = "MN"
    MN_MN = "MN_MN"
    MR = "MR"
    MR_IN = "MR_IN"
    MS = "MS"
    MS_BN = "MS_BN"
    MS_MY = "MS_MY"
    MT = "MT"
    MT_MT = "MT_MT"
    NB = "NB"
    NB_NO = "NB_NO"
    NL = "NL"
    NL_BE = "NL_BE"
    NL_NL = "NL_NL"
    NN_NO = "NN_NO"
    NS = "NS"
    NS_ZA = "NS_ZA"
    PA = "PA"
    PA_IN = "PA_IN"
    PL = "PL"
    PL_PL = "PL_PL"
    PS = "PS"
    PS_AR = "PS_AR"
    PT = "PT"
    PT_BR = "PT_BR"
    PT_PT = "PT_PT"
    QU = "QU"
    QU_BO = "QU_BO"
    QU_EC = "QU_EC"
    QU_PE = "QU_PE"
    RO = "RO"
    RO_RO = "RO_RO"
    RU = "RU"
    RU_RU = "RU_RU"
    SA = "SA"
    SA_IN = "SA_IN"
    SE = "SE"
    SE_FI = "SE_FI"
    SE_NO = "SE_NO"
    SE_SE = "SE_SE"
    SK = "SK"
    SK_SK = "SK_SK"
    SL = "SL"
    SL_SI = "SL_SI"
    SQ = "SQ"
    SQ_AL = "SQ_AL"
    SR_BA = "SR_BA"
    SR_SP = "SR_SP"
    SV = "SV"
    SV_FI = "SV_FI"
    SV_SE = "SV_SE"
    SW = "SW"
    SW_KE = "SW_KE"
    SYR = "SYR"
    SYR_SY = "SYR_SY"
    TA = "TA"
    TA_IN = "TA_IN"
    TE = "TE"
    TE_IN = "TE_IN"
    TH = "TH"
    TH_TH = "TH_TH"
    TL = "TL"
    TL_PH = "TL_PH"
    TN = "TN"
    TN_ZA = "TN_ZA"
    TR = "TR"
    TR_TR = "TR_TR"
    TT = "TT"
    TT_RU = "TT_RU"
    TS = "TS"
    UK = "UK"
    UK_UA = "UK_UA"
    UR = "UR"
    UR_PK = "UR_PK"
    UZ = "UZ"
    UZ_UZ = "UZ_UZ"
    VI = "VI"
    VI_VN = "VI_VN"
    XH = "XH"
    XH_ZA = "XH_ZA"
    ZH = "ZH"
    ZH_CN = "ZH_CN"
    ZH_HK = "ZH_HK"
    ZH_MO = "ZH_MO"
    ZH_SG = "ZH_SG"
    ZH_TW = "ZH_TW"
    ZU = "ZU"
    ZU_ZA = "ZU_ZA"


class DraftGetContactInformation(BaseModel):
    Email: Optional[str] = Field(
        None, description="The email address of the recipient."
    )
    GivenName: Optional[str] = Field(
        None, description="The given name of the recipient."
    )
    Surname: Optional[str] = Field(None, description="The surname of the recipient.")
    PhoneNumber: Optional[str] = Field(
        None, description="The phone number of the recipient."
    )
    LanguageCode: Optional[LanguageCode] = Field(
        None, description="The language of the recipient."
    )


class DraftGetAdvancedRecipientConfiguration(BaseModel):
    ContactInformation: Optional[DraftGetContactInformation] = Field(
        None, description="The contact information of the recipient."
    )


class DraftGetFilesPage(BaseModel):
    PageNumber: Optional[int] = Field(
        None, description="The number of the page. It starts with 1."
    )
    Width: Optional[float] = Field(None, description="The width of the page in points.")
    Height: Optional[float] = Field(
        None, description="The height of the page in points."
    )


class DisplayIconType(Enum):
    Paperclip = "Paperclip"
    Graph = "Graph"
    PushPin = "PushPin"
    Tag = "Tag"


class DraftGetElementsReadPagesConfirmation(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    Required: Optional[bool] = Field(
        None, description="If true, the element is required."
    )
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    DisplayName: Optional[str] = Field(None, description="The displayed name.")
    PageNumber: Optional[int] = Field(
        None, description="The number of the page that needs to be read."
    )
    GuidingOrder: Optional[int] = Field(None, description="The order of the element.")


class DraftGetElementsReadDocumentConfirmation(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    Required: Optional[bool] = Field(
        None, description="If true, the element is required."
    )
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    DisplayName: Optional[str] = Field(None, description="The displayed name.")
    GuidingOrder: Optional[int] = Field(None, description="The order of the element.")


class Type(Enum):
    None_ = "None"
    Date = "Date"
    Email = "Email"
    Number = "Number"
    Phone = "Phone"
    Time = "Time"


class SequenceMode(Enum):
    NoSequenceEnforced = "NoSequenceEnforced"
    SequenceEnforced = "SequenceEnforced"


class SymbolLocation(Enum):
    Start = "Start"
    StartWithBlank = "StartWithBlank"
    End = "End"
    EndWithBlank = "EndWithBlank"


class GroupSeparator(Enum):
    Comma = "Comma"
    Point = "Point"
    Apostrophe = "Apostrophe"
    Blank = "Blank"
    None_ = "None"


class DecimalSeparator(Enum):
    Comma = "Comma"
    Point = "Point"
    Apostrophe = "Apostrophe"
    None_ = "None"


class Type1(Enum):
    International = "International"
    InternationalLeadingZeros = "InternationalLeadingZeros"
    InternationalLeadingPlus = "InternationalLeadingPlus"


class DraftGetElementsPhoneValidationConfiguration(BaseModel):
    Type: Optional[Type1] = Field(None, description="The format of the phone numbers.")


class TextAlign(Enum):
    Left = "Left"
    Center = "Center"
    Right = "Right"


class DraftGetElementsTextFormat(BaseModel):
    TextColor: Optional[str] = Field(
        None,
        description="The color of the text.\r\nSix digit hexadecimal color starting with # in #RRGGBB format according to CSS Color Module Level 4, paragraph 5.2.",
    )
    FontSizeInPt: Optional[float] = Field(
        None, description="The size of the font in points."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    Bold: Optional[bool] = Field(None, description="If true, the bold font is used.")
    Italic: Optional[bool] = Field(
        None, description="If true, the italic font is used."
    )
    TextAlign: Optional[TextAlign] = Field(
        None, description="The alignment of the text. The default alignment is left."
    )


class DraftGetElementsPosition(BaseModel):
    PageNumber: Optional[int] = Field(
        None,
        description="The number of the page where the element is located. It starts with 1.",
    )
    X: Optional[float] = Field(
        None, description="The X coordinate in points. It starts from the left."
    )
    Y: Optional[float] = Field(
        None, description="The Y coordinate in points. It starts from the bottom."
    )


class DraftGetElementsSize(BaseModel):
    Width: Optional[float] = Field(
        None, description="The width of the element in points."
    )
    Height: Optional[float] = Field(
        None, description="The height of the element in points."
    )


class DraftGetElementsChoiceItem(BaseModel):
    ExportValue: Optional[str] = Field(
        None, description="The value of the element when the choice item is selected."
    )
    DisplayValue: Optional[str] = Field(
        None, description="The displayed value of the choice item."
    )


class DraftGetElementsRadioButtonItemDefinition(BaseModel):
    ExportValue: Optional[str] = Field(
        None, description="The value of the element when the radio button is checked."
    )
    IsChecked: Optional[bool] = Field(
        None, description="If true, the radio button is checked by default."
    )
    ReadOnly: Optional[bool] = Field(
        None, description="If true, the element is readonly."
    )
    Position: Optional[DraftGetElementsPosition] = Field(
        None, description="The position of the  within the document."
    )
    Size: Optional[DraftGetElementsSize] = Field(
        None, description="The size of the form field."
    )


class UseExternalSignatureImage(Enum):
    Optional = "Optional"
    Required = "Required"
    Disabled = "Disabled"


class PreferredHashAlgorithm(Enum):
    Sha256 = "Sha256"
    Sha512 = "Sha512"


class DraftGetElementsATrustCertificateSignatureType(BaseModel):
    TemplateId: Optional[str] = Field(
        None, description="The identifier of the A-Trust template."
    )
    Preferred: Optional[bool] = Field(
        None, description="If true, the signature type is set as preferred."
    )


class SignaturePositioning(Enum):
    WithinField = "WithinField"
    OnPage = "OnPage"
    IntersectsWithField = "IntersectsWithField"


class DraftGetElementsBiometricSignatureType(BaseModel):
    BiometricVerification: Optional[bool] = Field(
        None, description="If true, a biometric verification is performed."
    )
    AllowBiometricStoringOnly: Optional[bool] = Field(
        None,
        description="If true, the biometric signature might be stored without verification.",
    )
    StoreSignedResponseWithoutBioData: Optional[bool] = Field(
        None,
        description="If true, the signed response is stored without biometric data.",
    )
    BiometricServerUserId: Optional[str] = Field(
        None, description="The identifier of the user on the biometric server."
    )
    SignaturePositioning: Optional[SignaturePositioning] = Field(
        None, description="The allowed positioning of the biometric signature."
    )
    Preferred: Optional[bool] = Field(
        None, description="If true, the signature type is set as preferred."
    )


class DraftGetElementsStampImprintDateConfiguration(BaseModel):
    UseLocalTimezone: Optional[bool] = Field(
        None, description="If true, the local timezone is used."
    )
    DateTimeFormat: Optional[str] = Field(
        None, description="The format of the timestamp."
    )


class DraftGetElementsPredefinedElementDefinition(BaseModel):
    TextFormat: Optional[DraftGetElementsTextFormat] = Field(
        None, description="The configuration of the text format."
    )
    Position: Optional[DraftGetElementsPosition] = Field(
        None, description="The position of the  within the document."
    )
    Size: Optional[DraftGetElementsSize] = Field(
        None, description="The size of the form field."
    )


class DraftGetElementsLinkDefinition(BaseModel):
    Position: Optional[DraftGetElementsPosition] = Field(
        None, description="The position of the  within the document."
    )
    Size: Optional[DraftGetElementsSize] = Field(
        None, description="The size of the form field."
    )


class DraftGetElementsFieldValidationRange(BaseModel):
    From: Optional[str] = Field(None, description="The lower boundary of the range.")
    To: Optional[str] = Field(None, description="The upper boundary of the range.")


class DraftGetElementsClickToSignStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayEmail: Optional[bool] = Field(
        None, description="If true, the email address of the signer is displayed."
    )
    DisplayIp: Optional[bool] = Field(
        None, description="If true, the IP address of the signer is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class DraftGetElementsDrawToSignStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayEmail: Optional[bool] = Field(
        None, description="If true, the email address of the signer is displayed."
    )
    DisplayIp: Optional[bool] = Field(
        None, description="If true, the IP address of the signer is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class DraftGetElementsTypeToSignStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayEmail: Optional[bool] = Field(
        None, description="If true, the email address of the signer is displayed."
    )
    DisplayIp: Optional[bool] = Field(
        None, description="If true, the IP address of the signer is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class DraftGetElementsLocalCertificateStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayIp: Optional[bool] = Field(
        None, description="If true, the IP address of the signer is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class DraftGetElementsDisposableCertificateStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayIp: Optional[bool] = Field(
        None, description="If true, the IP address of the signer is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class DraftGetElementsSwissComOnDemandStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayIp: Optional[bool] = Field(
        None, description="If true, the IP address of the signer is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class DraftGetElementsRemoteCertificateStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayIp: Optional[bool] = Field(
        None, description="If true, the IP address of the signer is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class DraftGetElementsOneTimePasswordStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayTransactionId: Optional[bool] = Field(
        None, description="If true, the transaction identifier is displayed."
    )
    DisplayTransactionToken: Optional[bool] = Field(
        None, description="If true, the transaction token is displayed."
    )
    DisplayPhoneNumber: Optional[bool] = Field(
        None, description="If true, the phone number of the signer is displayed."
    )
    DisplayIp: Optional[bool] = Field(
        None, description="If true, the IP address of the signer is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class DraftGetElementsSwedishBankIdStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayTransactionId: Optional[bool] = Field(
        None, description="If true, the transaction identifier is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class DraftGetElementsPluginStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayEmail: Optional[bool] = Field(
        None, description="If true, the email address of the signer is displayed."
    )
    DisplayIp: Optional[bool] = Field(
        None, description="If true, the IP address of the signer is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class DraftGetConfigurationEmailConfiguration(BaseModel):
    Subject: Optional[str] = Field(
        None, description="The subject of the sign notifications."
    )
    Message: Optional[str] = Field(
        None, description="The message of the sign notifications."
    )
    SenderDisplayName: Optional[str] = Field(
        None, description="The displayed name of the sender in the notifications."
    )


class DraftGetConfigurationReminderConfiguration(BaseModel):
    Enabled: Optional[bool] = Field(None, description="If true, reminders are sent.")
    FirstReminderInDays: Optional[int] = Field(
        None,
        description="The amount of days until a reminder is sent to a signer or a viewer after the initial notification.",
    )
    ReminderResendIntervalInDays: Optional[int] = Field(
        None,
        description="The amount of days until a reminder is sent again to a signer or a viewer.",
    )
    BeforeExpirationInDays: Optional[int] = Field(
        None,
        description="The amount of days before the envelope expires and a reminder should be sent.",
    )


class DraftGetConfigurationExpirationConfiguration(BaseModel):
    ExpirationInSeconds: Optional[int] = Field(
        None,
        description="The relative expiration in seconds after sending the envelope.",
    )
    ExpirationDate: Optional[datetime] = Field(
        None,
        description="The absolute expiration date of the envelope.\r\nA datetime in the format RFC 3339, section 5.6, 'date-Time' (e.g. 2017-07-21T17:32:28Z).",
    )


class Policy(Enum):
    Workflow = "Workflow"
    FormEditor = "FormEditor"
    Summary = "Summary"


class DraftGetConfigurationAgentRedirectConfiguration(BaseModel):
    Policy: Optional[Policy] = Field(
        None,
        description="Defines the redirect target page which should be opened when the agent mode is active.",
    )
    Allow: Optional[bool] = Field(
        None, description="If true, the agent mode can be used."
    )
    IFrameAllowList: Optional[List[str]] = Field(
        None,
        description="The URLs where the designer interface of eSignAnyWhere may be embedded.",
    )


class DraftGetConfigurationRedirectConfiguration(BaseModel):
    AfterSendRedirectUrl: Optional[str] = Field(
        None,
        description="The URL to redirect to after the envelope was sent successfully.\r\nThis is only applicable when using the eSAW UI.",
    )
    BeforeSendRedirectUrl: Optional[str] = Field(
        None,
        description="The URL to redirect to before the envelope is sent.\r\nThis is only applicable when using the eSAW UI.",
    )


class DraftGetConfigurationSealingConfiguration(BaseModel):
    CertificateId: Optional[str] = Field(None, description="Sealing certificate used.")


class DraftGetConfigurationVisibilityOption(BaseModel):
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    IsHidden: Optional[bool] = Field(
        None, description="If true, the referenced document is hidden for the activity."
    )


class DraftGetConfigurationAgreementTranslation(BaseModel):
    LanguageCode: Optional[LanguageCode] = Field(
        None, description="The language of the translated agreement."
    )
    Text: Optional[str] = Field(None, description="The translated agreement.")
    Header: Optional[str] = Field(
        None, description="The header for the translated agreement."
    )
    IsDefault: Optional[bool] = Field(
        None, description="If true, this translation is used as default."
    )


class DraftGetConfigurationDefaultSignature(BaseModel):
    IsDefault: Optional[bool] = Field(
        None,
        description="Indicates if the signature type is the default signature type for draft.",
    )


class DraftGetConfigurationActionCallbackSelection(BaseModel):
    ConfirmTransactionCode: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when a transaction code was sent. This is only used for legacy disposable certificates, after user accepted issuance of disposable certificate.",
    )
    AgreementAccepted: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when the user accepted the agreement.",
    )
    AgreementRejected: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when the user rejected the agreement.",
    )
    PrepareAuthenticationSuccess: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when the preparation of the authentication process succeeded.",
    )
    AuthenticationFailed: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when the user failed to authenticate.",
    )
    AuthenticationSuccess: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when the user succeeded to authenticate.",
    )
    AuditTrailRequested: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when the audit trail was requested.",
    )
    AuditTrailXmlRequested: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when the audit trail XML was requested.",
    )
    CalledPage: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when the SignAnyWhere Viewer was requested.",
    )
    DocumentDownloaded: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when the document download was requested.",
    )
    FlattenedDocumentDownloaded: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when the flattened document download was requested.",
    )
    AddedAnnotation: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when an annotation was added.",
    )
    AddedAttachment: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when an attachment was added.",
    )
    AppendedDocument: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when a document was appended.",
    )
    FormsFilled: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when a form field was filled.",
    )
    ConfirmReading: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when a reading task was completed.",
    )
    SendTransactionCode: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when a transaction code for a signature with type TransactionCode was sent using the TransactionCodeSenderPlugin.",
    )
    PrepareSignWorkstepDocument: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when a signature was prepared for signing.",
    )
    SignWorkstepDocument: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when a signature was applied.",
    )
    UndoAction: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when an action was undone.",
    )
    WorkstepCreated: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when a workstep was created.",
    )
    WorkstepFinished: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when a workstep was finished.",
    )
    WorkstepRejected: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when a workstep was rejected.",
    )
    DisablePolicyAndValidityChecks: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when policy and validity checks were disabled.",
    )
    EnablePolicyAndValidityChecks: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when policy and validity checks were enabled.",
    )
    AppendFileToWorkstep: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when a file was appended to the workstep.",
    )
    AppendTasksToWorkstep: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when a task was added to the workstep.",
    )
    SetOptionalDocumentState: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when an optional document became either active or inactive.",
    )
    PreparePayloadForBatch: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when the payload was prepared for batch signing.",
    )


class NotificationChannel(Enum):
    None_ = "None"
    Email = "Email"
    Sms = "Sms"


class DraftGetConfigurationBasicRecipientConfiguration(BaseModel):
    PersonalMessage: Optional[str] = Field(
        None, description="The personal message for the recipient."
    )
    NotificationChannel: Optional[NotificationChannel] = Field(
        None,
        description="Which channel is used for sending notifications to the recipient.",
    )


class Mode(Enum):
    Basic = "Basic"
    OptIn = "OptIn"
    OptOut = "OptOut"
    OptOutWithRequiredAlwaysSelected = "OptOutWithRequiredAlwaysSelected"
    OptInWithRequiredAlwaysSelected = "OptInWithRequiredAlwaysSelected"


class DraftGetConfigurationBatchConfiguration(BaseModel):
    Mode: Optional[Mode] = Field(
        None, description="The mode, that will be used for batch signing."
    )
    RequireScrollingOverAllSignaturesBeforeSigning: Optional[bool] = Field(
        None,
        description="If true, the user has to review all signatures in the batch signing dialog before signing.\r\nThis is only applicable when the <code>Mode</code> is set to <code>OptIn</code> or <code>OptOut</code>.",
    )


class DraftGetConfigurationGeneralPoliciesForSignAction(BaseModel):
    AllowSaveDocument: Optional[bool] = Field(
        None,
        description="If true, the client is allowed to save the workstep document.",
    )
    AllowSaveAuditTrail: Optional[bool] = Field(
        None,
        description="If true, the client is allowed to save the audittrail document.",
    )
    AllowPrintDocument: Optional[bool] = Field(
        None,
        description="If true, the client is allowed to print the workstep document.",
    )
    AllowAdhocPdfAttachments: Optional[bool] = Field(
        None, description="If true, the client is allowed to append adhoc documents."
    )
    AllowRejectWorkstep: Optional[bool] = Field(
        None, description="If true, the client is allowed to reject the workstep."
    )
    AllowUndoLastAction: Optional[bool] = Field(
        None, description="If true, the client is allowed to undo actions."
    )


class DraftGetConfigurationGeneralPoliciesForViewAction(BaseModel):
    AllowSaveDocument: Optional[bool] = Field(
        None,
        description="If true, the client is allowed to save the workstep document.",
    )
    AllowSaveAuditTrail: Optional[bool] = Field(
        None,
        description="If true, the client is allowed to save the audittrail document.",
    )
    AllowPrintDocument: Optional[bool] = Field(
        None,
        description="If true, the client is allowed to print the workstep document.",
    )


class DraftGetConfigurationGeneralPoliciesForP7MAction(BaseModel):
    AllowSaveDocument: Optional[bool] = Field(
        None,
        description="If true, the client is allowed to save the workstep document.",
    )
    AllowSaveAuditTrail: Optional[bool] = Field(
        None,
        description="If true, the client is allowed to save the audittrail document.",
    )
    AllowPrintDocument: Optional[bool] = Field(
        None,
        description="If true, the client is allowed to print the workstep document.",
    )
    AllowAdhocPdfAttachments: Optional[bool] = Field(
        None, description="If true, the client is allowed to append adhoc documents."
    )
    AllowRejectWorkstep: Optional[bool] = Field(
        None, description="If true, the client is allowed to reject the workstep."
    )
    AllowUndoLastAction: Optional[bool] = Field(
        None, description="If true, the client is allowed to undo actions."
    )
    AllowDownloadOfSignedP7MFiles: Optional[bool] = Field(
        None, description="If true, the client is allowed to download signed p7m files."
    )


class DraftGetConfigurationEmailAppLinks(BaseModel):
    Android: Optional[bool] = Field(
        None, description="If true, an Android app link is added to the email message."
    )
    iOS: Optional[bool] = Field(
        None, description="If true, an iOS app link is added to the email message."
    )
    Windows: Optional[bool] = Field(
        None, description="If true, a Windows app link is added to the email message."
    )


class DraftGetConfigurationWebFinishAction(BaseModel):
    RedirectUri: Optional[str] = Field(None, description="The redirect uri.")


class DraftGetConfigurationAppFinishAction(BaseModel):
    RemoveDocumentFromRecentDocumentList: Optional[bool] = Field(
        None,
        description="If true, the document will be removed from the recent document list.",
    )
    CallClientActionOnlyAfterSuccessfulSync: Optional[bool] = Field(
        None,
        description="If true, the client action will be called only after a successful sync.",
    )
    CloseApp: Optional[bool] = Field(
        None, description="If true, the app will be closed."
    )
    RedirectUri: Optional[str] = Field(None, description="The redirect uri.")


class DraftGetConfigurationKioskFinishAction(BaseModel):
    RedirectUri: Optional[str] = Field(None, description="The redirect uri.")


class IdentificationType(Enum):
    None_ = "None"
    ForeignTaxCode = "ForeignTaxCode"
    PersonalNumber = "PersonalNumber"
    Passport = "Passport"
    NationalIdentityCard = "NationalIdentityCard"
    ItalianTaxCode = "ItalianTaxCode"
    NoSerialNumber = "NoSerialNumber"
    DrivingLicense = "DrivingLicense"
    ResidencePermit = "ResidencePermit"
    TemporaryResidencePermit = "TemporaryResidencePermit"
    EmbassyDocument = "EmbassyDocument"


class DocumentType(Enum):
    IdentityCard = "IdentityCard"
    DriverLicense = "DriverLicense"
    Passport = "Passport"
    ResidencePermit = "ResidencePermit"
    NationalElectronicIdentityCard = "NationalElectronicIdentityCard"
    TemporaryResidencePermit = "TemporaryResidencePermit"
    EmbassyDocument = "EmbassyDocument"


class DraftGetConfigurationDisposableCertificateSignatureData(BaseModel):
    DocumentIssuingCountry: Optional[str] = Field(
        None,
        description="The issuing country of the document.\r\nWill be used as country of residence, if lean is disabled.",
    )
    IdentificationIssuingCountry: Optional[str] = Field(
        None, description="The issuing country of the identification."
    )
    IdentificationType: Optional[IdentificationType] = Field(
        None, description="The type of identification in use."
    )
    PhoneNumber: Optional[str] = Field(
        None, description="The phone number registered for identification."
    )
    DocumentType: Optional[DocumentType] = Field(
        None, description="The type of document used for the identification."
    )
    DocumentIssuedBy: Optional[str] = Field(
        None, description="The authority that issued the document."
    )
    DocumentIssuedOn: Optional[datetime] = Field(
        None,
        description="The date when the document has been issued.\r\nA date in the format RFC 3339, section 5.6, 'full-date' (e.g. 2017-07-21).",
    )
    DocumentExpiryDate: Optional[datetime] = Field(
        None,
        description="The expiration date of the document.\r\nA date in the format RFC 3339, section 5.6, 'full-date' (e.g. 2017-07-21).",
    )
    SerialNumber: Optional[str] = Field(
        None, description="The serial number of the certificate."
    )
    DocumentNumber: Optional[str] = Field(
        None, description="The identifier of the document."
    )


class DraftGetConfigurationRemoteCertificateSignatureData(BaseModel):
    UserId: Optional[str] = Field(None, description="The identifier of the user.")
    DeviceId: Optional[str] = Field(None, description="The identifier of the device.")


class DraftGetConfigurationSwissComOnDemandSignatureData(BaseModel):
    PhoneNumber: Optional[str] = Field(None, description="The phone number.")
    CommonName: Optional[str] = Field(
        None, description="The name of the certificate that is created or checked."
    )
    Country: Optional[str] = Field(None, description="The country.")
    Locality: Optional[str] = Field(None, description="The locality.")
    OrganizationUnit: Optional[str] = Field(
        None, description="The organizational unit."
    )
    Organization: Optional[str] = Field(None, description="The organization.")
    SerialNumber: Optional[str] = Field(None, description="The serial number.")
    StateOrProvince: Optional[str] = Field(None, description="The state or province.")
    Pseudonym: Optional[str] = Field(
        None, description="A name or key that uniquely identifies the user."
    )


class DraftGetConfigurationSmsOneTimePasswordSignatureData(BaseModel):
    PhoneNumber: Optional[str] = Field(
        None,
        description="The phone number to which the one time password will be sent.",
    )


class DraftGetConfigurationATrustCertificateSignatureData(BaseModel):
    PhoneNumber: Optional[str] = Field(
        None, description="The phone number of the recipient."
    )


class DraftGetConfigurationSwedishBankIdSignatureData(BaseModel):
    PersonalNumber: Optional[str] = Field(
        None, description="The personal number for signing."
    )
    AllowAnyPersonalNumber: Optional[bool] = Field(
        None,
        description="If true, the personal number can be edited by the recipient.\r\nIf the personal number is empty and can be edited, a QR code for scanning is provided.",
    )


class DraftGetConfigurationAccessCodeAuthentication(BaseModel):
    Code: Optional[str] = Field(
        None, description="The code for authenticating the recipient."
    )


class DraftGetConfigurationSmsOneTimePasswordAuthentication(BaseModel):
    PhoneNumber: Optional[str] = Field(
        None,
        description="The phone number to which the one time password will be sent.",
    )


class DraftGetConfigurationSwedishBankIdAuthentication(BaseModel):
    PersonalNumber: Optional[str] = Field(
        None, description="The personal number for the authentication."
    )
    AllowAnyPersonalNumber: Optional[bool] = Field(
        None,
        description="If true, the personal number can be edited by the recipient.\r\nIf the personal number is empty and can be edited, a QR code for scanning is provided.",
    )


class DraftGetConfigurationSignaturePluginParameter(BaseModel):
    Key: Optional[str] = Field(None, description="The identifier of the parameter.")
    Value: Optional[str] = Field(None, description="The value of the parameter.")


class DraftGetConfigurationAuthenticationValidation(BaseModel):
    FieldReferenceId: Optional[str] = Field(
        None, description="The identifier of the field."
    )
    ExpectedValue: Optional[str] = Field(
        None, description="The expected value of the field."
    )


class DraftFindRequest(BaseModel):
    StartDate: Optional[datetime] = Field(
        None,
        description="If set, filter for drafts which were created after the start date.\r\nA datetime in the format RFC 3339, section 5.6, 'date-Time' (e.g. 2017-07-21T17:32:28Z).",
    )
    EndDate: Optional[datetime] = Field(
        None,
        description="If set, filter for drafts which were created before the end date.\r\nA datetime in the format RFC 3339, section 5.6, 'date-Time' (e.g. 2017-07-21T17:32:28Z).",
    )
    SearchText: Optional[str] = Field(
        None,
        description="If set, the given text is searched in following fields:\r\nenvelope name and description\r\nnotification subject and message \r\nsender email address, given name and surname  \r\nrecipient email address, given name and surname\r\nNote: Using this search option is very resource intensive! It might take very long.",
    )
    RecipientEmail: Optional[str] = Field(
        None,
        description="If set, envelopes containing a recipient with the given email address are matched.",
    )


class DraftFindDraft(BaseModel):
    Id: Optional[str] = Field(None, description="The identifier of the envelope.")
    Name: Optional[str] = Field(None, description="The name of the envelope.")
    MetaData: Optional[str] = Field(None, description="The metadata of the envelope.")


class DraftSendRequest(BaseModel):
    DraftId: str = Field(..., description="The identifier of the draft.")


class EnvelopeSendResponse(BaseModel):
    EnvelopeId: Optional[str] = Field(
        None, description="The identifier of the envelope."
    )


class EnvelopeBulkSendChild(BaseModel):
    EnvelopeId: Optional[str] = Field(
        None, description="The identifier of the BulkChild envelope."
    )
    BulkRecipientEmail: Optional[str] = Field(
        None, description="The email of the bulk recipient in the BulkChild envelope."
    )


class DraftCreateDocument(BaseModel):
    FileId: Optional[str] = Field(None, description="The identifier of the file.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The document number.\r\nIf the document number is 0 for all documents, the order of the documents is used as number.\r\nThe document number must not be duplicated.\r\nThe document number must be set for all documents or none.",
    )


class DraftCreateEmailAppLinks(BaseModel):
    Android: Optional[bool] = Field(
        None, description="If true, an Android app link is added to the email message."
    )
    iOS: Optional[bool] = Field(
        None, description="If true, an iOS app link is added to the email message."
    )
    Windows: Optional[bool] = Field(
        None, description="If true, a Windows app link is added to the email message."
    )


class DraftCreateEmailConfiguration(BaseModel):
    Subject: Optional[str] = Field(
        None, description="The subject of the sign notifications."
    )
    Message: Optional[str] = Field(
        None, description="The message of the sign notifications."
    )
    SenderDisplayName: Optional[str] = Field(
        None, description="The displayed name of the sender in the notifications."
    )


class DraftCreateSealingConfiguration(BaseModel):
    CertificateId: Optional[str] = Field(
        None, description="Custom Sealing certificate identifier."
    )


class DraftCreateVisibilityOption(BaseModel):
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    IsHidden: Optional[bool] = Field(
        None, description="If true, the referenced document is hidden for the activity."
    )


class DraftCreatePluginStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayEmail: Optional[bool] = Field(
        None, description="If true, the email address of the signer is displayed."
    )
    DisplayIp: Optional[bool] = Field(
        None, description="If true, the IP address of the signer is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class DraftCreateExpirationConfiguration(BaseModel):
    ExpirationInSecondsAfterSending: Optional[int] = Field(
        None,
        description="The relative expiration in seconds after sending the envelope.\r\nMust be a positive number between 600 and the maximum envelope validity located in the system configuration [Configuration key: maxEnvelopeValidityInDays, Default: 2419200 seconds (28 days)].\r\nMust not be defined when property <code>ExpirationDate</code> is specified.",
    )
    ExpirationDate: Optional[datetime] = Field(
        None,
        description="The absolute expiration date of the envelope.\r\nMust not be in the past.\r\nMust not be defined when property <code>ExpirationInSecondsAfterSending</code> is specified.\r\nA datetime in the format RFC 3339, section 5.6, 'date-Time' (e.g. 2017-07-21T17:32:28Z).",
    )


class DraftCreateRedirectConfiguration(BaseModel):
    AfterSendRedirectUrl: Optional[str] = Field(
        None,
        description="The URL to redirect to after the envelope was sent successfully.\r\nThis is only applicable when using the eSAW UI.",
    )
    BeforeSendRedirectUrl: Optional[str] = Field(
        None,
        description="The URL to redirect to before the envelope is sent.\r\nThis is only applicable when using the eSAW UI.",
    )


class IFrameAllowListItem(BaseModel):
    __root__: str


class DraftCreateAgentRedirectConfiguration(BaseModel):
    Policy: Optional[Policy] = Field(
        None,
        description="Defines the redirect target page which should be opened when the agent mode is active. \r\nMust not be set, when 'Allow' is not set to true.",
    )
    Allow: Optional[bool] = Field(
        None,
        description="If true, the agent mode can be used. \r\nIf false, both 'Policy'and 'IFrameAllowList' must not be set.",
    )
    IFrameAllowList: Optional[List[IFrameAllowListItem]] = Field(
        None,
        description="The URLs where the designer interface of eSignAnyWhere may be embedded.\r\nMust not be set, when 'Allow' is not set to true.",
        max_items=50,
    )


class DraftCreateAgreementTranslation(BaseModel):
    LanguageCode: LanguageCode = Field(
        ..., description="The language of the translated agreement."
    )
    Text: str = Field(..., description="The translated agreement.")
    Header: Optional[str] = Field(
        None, description="The header for the translated agreement."
    )
    IsDefault: Optional[bool] = Field(
        None, description="If true, this translation is used as default."
    )


class Type2(Enum):
    None_ = "None"
    Date = "Date"
    Email = "Email"
    Number = "Number"
    Phone = "Phone"
    Time = "Time"


class DraftCreatePosition(BaseModel):
    PageNumber: Optional[int] = Field(
        None,
        description="The number of the page where the element is located. It starts with 1.",
    )
    X: float = Field(
        ..., description="The X coordinate in points. It starts from the left."
    )
    Y: float = Field(
        ..., description="The Y coordinate in points. It starts from the bottom."
    )


class DraftCreateSize(BaseModel):
    Width: float = Field(..., description="The width of the element in points.")
    Height: float = Field(..., description="The height of the element in points.")


class DraftCreateChoiceItem(BaseModel):
    ExportValue: Optional[str] = Field(
        None, description="The value of the element when the choice item is selected."
    )
    DisplayValue: str = Field(
        ..., description="The displayed value of the choice item."
    )


class DraftCreateLinkDefinition(BaseModel):
    Position: DraftCreatePosition = Field(
        ..., description="The position of the element within the document."
    )
    Size: DraftCreateSize = Field(..., description="The size of the element.")


class DraftCreateContactInformation(BaseModel):
    Email: Optional[str] = Field(
        None, description="The email address of the recipient."
    )
    GivenName: Optional[str] = Field(
        None, description="The given name of the recipient."
    )
    Surname: Optional[str] = Field(None, description="The surname of the recipient.")
    PhoneNumber: Optional[str] = Field(
        None, description="The phone number of the recipient."
    )
    LanguageCode: Optional[LanguageCode] = Field(
        None, description="The language of the recipient."
    )


class DraftCreateBatchConfiguration(BaseModel):
    Mode: Optional[Mode] = Field(
        None, description="The mode, that will be used for batch signing."
    )
    RequireScrollingOverAllSignaturesBeforeSigning: Optional[bool] = Field(
        None,
        description="If true, the user has to review all signatures in the batch signing dialog before signing.\r\nThis is only applicable when the <code>Mode</code> is set to <code>OptIn</code> or <code>OptOut</code>.",
    )


class DraftCreateFieldValidationRange(BaseModel):
    From: Optional[str] = Field(None, description="The lower boundary of the range.")
    To: Optional[str] = Field(None, description="The upper boundary of the range.")


class DraftCreateNumberValidationConfiguration(BaseModel):
    DecimalDigits: Optional[int] = Field(
        None, description="The expected amount of decimal digits."
    )
    Symbol: Optional[str] = Field(None, description="The expected symbol.")
    SymbolLocation: Optional[SymbolLocation] = Field(
        None, description="The defined symbol location."
    )
    GroupSeparator: Optional[GroupSeparator] = Field(
        None, description="The expected thousands separator."
    )
    DecimalSeparator: Optional[DecimalSeparator] = Field(
        None, description="The expected decimal separator."
    )
    Range: Optional[DraftCreateFieldValidationRange] = Field(
        None, description="The range of the values."
    )


class Type3(Enum):
    International = "International"
    InternationalLeadingZeros = "InternationalLeadingZeros"
    InternationalLeadingPlus = "InternationalLeadingPlus"


class DraftCreatePhoneValidationConfiguration(BaseModel):
    Type: Optional[Type3] = Field(None, description="The format of the phone numbers.")


class DraftCreateActionCallbackSelection(BaseModel):
    ConfirmTransactionCode: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when a transaction code was sent. This is only used for legacy disposable certificates, after user accepted issuance of disposable certificate.",
    )
    AgreementAccepted: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when the user accepted the agreement.",
    )
    AgreementRejected: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when the user rejected the agreement.",
    )
    PrepareAuthenticationSuccess: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when the preparation of the authentication process succeeded.",
    )
    AuthenticationFailed: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when the user failed to authenticate.",
    )
    AuthenticationSuccess: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when the user succeeded to authenticate.",
    )
    AuditTrailRequested: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when the audit trail was requested.",
    )
    AuditTrailXmlRequested: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when the audit trail XML was requested.",
    )
    CalledPage: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when the SignAnyWhere Viewer was requested.",
    )
    DocumentDownloaded: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when the document download was requested.",
    )
    FlattenedDocumentDownloaded: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when the flattened document download was requested.",
    )
    AddedAnnotation: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when an annotation was added.",
    )
    AddedAttachment: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when an attachment was added.",
    )
    AppendedDocument: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when a document was appended.",
    )
    FormsFilled: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when a form field was filled.",
    )
    ConfirmReading: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when a reading task was completed.",
    )
    SendTransactionCode: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when a transaction code for a signature with type TransactionCode was sent using the TransactionCodeSenderPlugin.",
    )
    PrepareSignWorkstepDocument: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when a signature was prepared for signing.",
    )
    SignWorkstepDocument: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when a signature was applied.",
    )
    UndoAction: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when an action was undone.",
    )
    WorkstepCreated: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when a workstep was created.",
    )
    WorkstepFinished: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when a workstep was finished.",
    )
    WorkstepRejected: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when a workstep was rejected.",
    )
    DisablePolicyAndValidityChecks: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when policy and validity checks were disabled.",
    )
    EnablePolicyAndValidityChecks: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when policy and validity checks were enabled.",
    )
    AppendFileToWorkstep: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when a file was appended to the workstep.",
    )
    AppendTasksToWorkstep: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when a task was added to the workstep.",
    )
    SetOptionalDocumentState: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when an optional document became either active or inactive.",
    )
    PreparePayloadForBatch: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when the payload was prepared for batch signing.",
    )


class DraftCreateTextFormat(BaseModel):
    TextColor: Optional[str] = Field(
        None,
        description="The color of the text. The default color is black.\r\nSix digit hexadecimal color that starts with # in #RRGGBB format according to CSS Color Module Level 4, paragraph 5.2.",
    )
    FontSizeInPt: Optional[float] = Field(
        None, description="The size of the font in points."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    Bold: Optional[bool] = Field(None, description="If true, the bold font is used.")
    Italic: Optional[bool] = Field(
        None, description="If true, the italic font is used."
    )
    TextAlign: Optional[TextAlign] = Field(
        None, description="The alignment of the text. The default alignment is left."
    )


class DraftCreateBiometricSignatureType(BaseModel):
    BiometricVerification: Optional[bool] = Field(
        None, description="If true, a biometric verification is performed."
    )
    AllowBiometricStoringOnly: Optional[bool] = Field(
        None,
        description="If true, the biometric signature might be stored without verification.",
    )
    StoreSignedResponseWithoutBioData: Optional[bool] = Field(
        None,
        description="If true, the signed response is stored without biometric data.",
    )
    BiometricServerUserId: Optional[str] = Field(
        None, description="The identifier of the user on the biometric server."
    )
    SignaturePositioning: Optional[SignaturePositioning] = Field(
        None, description="The allowed positioning of the biometric signature."
    )
    Preferred: Optional[bool] = Field(
        None,
        description="If true, the signature type is set as preferred.\r\nOnly one signature type may be marked.",
    )


class DraftCreateClientFinishAction(BaseModel):
    RedirectUri: Optional[str] = Field(None, description="The redirect uri.")


class DraftCreateAppFinishAction(BaseModel):
    RemoveDocumentFromRecentDocumentList: Optional[bool] = Field(
        None,
        description="If true, the document will be removed from the recent document list.",
    )
    CallClientActionOnlyAfterSuccessfulSync: Optional[bool] = Field(
        None,
        description="If true, the client action will be called only after a successful sync.",
    )
    CloseApp: Optional[bool] = Field(
        None, description="If true, the app will be closed."
    )
    RedirectUri: Optional[str] = Field(None, description="The redirect uri.")


class DraftCreateKioskFinishAction(BaseModel):
    RedirectUri: Optional[str] = Field(None, description="The redirect uri.")


class DraftCreateRemoteCertificateSignatureData(BaseModel):
    UserId: Optional[str] = Field(None, description="The identifier of the user.")
    DeviceId: Optional[str] = Field(None, description="The identifier of the device.")


class OrganizationUnit(BaseModel):
    __root__: str


class DraftCreateSwissComOnDemandSignatureData(BaseModel):
    PhoneNumber: Optional[str] = Field(None, description="The phone number.")
    CommonName: Optional[str] = Field(
        None, description="The name of the certificate that is created or checked."
    )
    Country: Optional[str] = Field(None, description="The country.")
    Locality: Optional[str] = Field(None, description="The locality.")
    OrganizationUnits: Optional[List[OrganizationUnit]] = Field(
        None, description="The organizational units.", max_items=228
    )
    Organization: Optional[str] = Field(None, description="The organization.")
    SerialNumber: Optional[str] = Field(None, description="The serial number.")
    StateOrProvince: Optional[str] = Field(None, description="The state or province.")
    Pseudonym: Optional[str] = Field(
        None, description="A name or key that uniquely identifies the user."
    )


class DraftCreateSmsOneTimePasswordSignatureData(BaseModel):
    PhoneNumber: Optional[str] = Field(
        None,
        description="The phone number to which the one time password will be sent.",
    )


class DraftCreateATrustCertificateSignatureData(BaseModel):
    PhoneNumber: Optional[str] = Field(
        None, description="The phone number of the recipient."
    )


class DraftCreateSwedishBankIdSignatureData(BaseModel):
    PersonalNumber: Optional[str] = Field(
        None, description="The personal number for signing."
    )
    AllowAnyPersonalNumber: Optional[bool] = Field(
        None,
        description="If true, the personal number can be edited by the recipient.\r\nIf the personal number is empty and can be edited, a QR code for scanning is provided.",
    )


class DraftCreateAccessCodeAuthentication(BaseModel):
    Code: Optional[str] = Field(
        None, description="The code for authenticating the recipient."
    )


class DraftCreateSmsOneTimePasswordAuthentication(BaseModel):
    PhoneNumber: Optional[str] = Field(
        None,
        description="The phone number to which the one time password will be sent.",
    )


class DraftCreateSwedishBankIdAuthentication(BaseModel):
    PersonalNumber: Optional[str] = Field(
        None, description="The personal number for the authentication."
    )
    AllowAnyPersonalNumber: Optional[bool] = Field(
        None,
        description="If true, the personal number can be edited by the recipient.\r\nIf the personal number is empty and can be edited, a QR code for scanning is provided.",
    )


class DraftCreateDisposableCertificateSignatureData(BaseModel):
    DocumentIssuingCountry: Optional[str] = Field(
        None,
        description="The issuing country of the document.\r\nWill be used as country of residence, if lean is disabled.",
    )
    IdentificationIssuingCountry: Optional[str] = Field(
        None, description="The issuing country of the identification."
    )
    IdentificationType: Optional[IdentificationType] = Field(
        None, description="The type of identification in use."
    )
    PhoneNumber: Optional[str] = Field(
        None, description="The phone number registered for identification."
    )
    DocumentType: Optional[DocumentType] = Field(
        None, description="The type of document used for the identification."
    )
    DocumentIssuedBy: Optional[str] = Field(
        None, description="The authority that issued the document."
    )
    DocumentIssuedOn: Optional[datetime] = Field(
        None,
        description="The date when the document has been issued.\r\nA date in the format RFC 3339, section 5.6, 'full-date' (e.g. 2017-07-21).",
    )
    DocumentExpiryDate: Optional[datetime] = Field(
        None,
        description="The expiration date of the document.\r\nA date in the format RFC 3339, section 5.6, 'full-date' (e.g. 2017-07-21).",
    )
    SerialNumber: Optional[str] = Field(
        None, description="The serial number of the certificate."
    )
    DocumentNumber: Optional[str] = Field(
        None, description="The identifier of the document."
    )


class DraftCreateSignaturePluginParameter(BaseModel):
    Key: Optional[str] = Field(None, description="The identifier of the parameter.")
    Value: Optional[str] = Field(None, description="The value of the parameter.")


class DraftCreateAuthenticationValidation(BaseModel):
    FieldReferenceId: Optional[str] = Field(
        None, description="The identifier of the field."
    )
    ExpectedValue: Optional[str] = Field(
        None, description="The expected value of the field."
    )


class DraftCreateSwedishBankIdStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayTransactionId: Optional[bool] = Field(
        None, description="If true, the transaction identifier is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class DraftCreateOneTimePasswordStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayTransactionId: Optional[bool] = Field(
        None, description="If true, the transaction identifier is displayed."
    )
    DisplayTransactionToken: Optional[bool] = Field(
        None, description="If true, the transaction token is displayed."
    )
    DisplayPhoneNumber: Optional[bool] = Field(
        None, description="If true, the phone number of the signer is displayed."
    )
    DisplayIp: Optional[bool] = Field(
        None, description="If true, the IP address of the signer is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class DraftCreateRemoteCertificateStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayIp: Optional[bool] = Field(
        None, description="If true, the IP address of the signer is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class DraftCreateSwissComOnDemandStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayIp: Optional[bool] = Field(
        None, description="If true, the IP address of the signer is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class DraftCreateDisposableCertificateStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayIp: Optional[bool] = Field(
        None, description="If true, the IP address of the signer is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class DraftCreateLocalCertificateStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayIp: Optional[bool] = Field(
        None, description="If true, the IP address of the signer is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class DraftCreateTypeToSignStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayEmail: Optional[bool] = Field(
        None, description="If true, the email address of the signer is displayed."
    )
    DisplayIp: Optional[bool] = Field(
        None, description="If true, the IP address of the signer is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class DraftCreateDrawToSignStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayEmail: Optional[bool] = Field(
        None, description="If true, the email address of the signer is displayed."
    )
    DisplayIp: Optional[bool] = Field(
        None, description="If true, the IP address of the signer is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class DraftCreateClickToSignStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayEmail: Optional[bool] = Field(
        None, description="If true, the email address of the signer is displayed."
    )
    DisplayIp: Optional[bool] = Field(
        None, description="If true, the IP address of the signer is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class DraftCreateGeneralPoliciesForP7MAction(BaseModel):
    AllowSaveDocument: Optional[bool] = Field(
        None,
        description="If true, the client is allowed to save the workstep document.",
    )
    AllowSaveAuditTrail: Optional[bool] = Field(
        None,
        description="If true, the client is allowed to save the audittrail document.",
    )
    AllowPrintDocument: Optional[bool] = Field(
        None,
        description="If true, the client is allowed to print the workstep document.",
    )
    AllowAdhocPdfAttachments: Optional[bool] = Field(
        None, description="If true, the client is allowed to append adhoc documents."
    )
    AllowRejectWorkstep: Optional[bool] = Field(
        None, description="If true, the client is allowed to reject the workstep."
    )
    AllowUndoLastAction: Optional[bool] = Field(
        None, description="If true, the client is allowed to undo actions."
    )
    AllowDownloadOfSignedP7MFiles: Optional[bool] = Field(
        None, description="If true, the client is allowed to download signed p7m files."
    )


class DraftCreateGeneralPoliciesForViewAction(BaseModel):
    AllowSaveDocument: Optional[bool] = Field(
        None,
        description="If true, the client is allowed to save the workstep document.",
    )
    AllowSaveAuditTrail: Optional[bool] = Field(
        None,
        description="If true, the client is allowed to save the audittrail document.",
    )
    AllowPrintDocument: Optional[bool] = Field(
        None,
        description="If true, the client is allowed to print the workstep document.",
    )


class DraftCreateGeneralPoliciesForSignAction(BaseModel):
    AllowSaveDocument: Optional[bool] = Field(
        None,
        description="If true, the client is allowed to save the workstep document.",
    )
    AllowSaveAuditTrail: Optional[bool] = Field(
        None,
        description="If true, the client is allowed to save the audittrail document.",
    )
    AllowPrintDocument: Optional[bool] = Field(
        None,
        description="If true, the client is allowed to print the workstep document.",
    )
    AllowAdhocPdfAttachments: Optional[bool] = Field(
        None, description="If true, the client is allowed to append adhoc documents."
    )
    AllowRejectWorkstep: Optional[bool] = Field(
        None, description="If true, the client is allowed to reject the workstep."
    )
    AllowUndoLastAction: Optional[bool] = Field(
        None, description="If true, the client is allowed to undo actions."
    )


class DraftCreateBasicRecipientConfiguration(BaseModel):
    ContactInformation: Optional[DraftCreateContactInformation] = Field(
        None, description="The contact information of the recipient."
    )
    PersonalMessage: Optional[str] = Field(
        None, description="The personal message for the recipient."
    )
    NotificationChannel: Optional[NotificationChannel] = Field(
        None,
        description="Which channel is used for sending notifications to the recipient.\r\nDefault Email if not specified.",
    )


class DraftCreateStampImprintDateConfiguration(BaseModel):
    UseLocalTimezone: Optional[bool] = Field(
        None, description="If true, the local timezone is used."
    )
    DateTimeFormat: Optional[str] = Field(
        None, description="The format of the timestamp."
    )


class DraftCreateSignaturePluginSignatureType(BaseModel):
    PluginId: Optional[str] = Field(None, description="The identifier of the plugin.")
    Preferred: Optional[bool] = Field(
        None,
        description="If true, the signature type is set as preferred.\r\nOnly one signature type may be marked.",
    )
    StampImprintConfiguration: Optional[DraftCreatePluginStampImprint] = Field(
        None, description="The configuration of the stamp imprint of the signature."
    )


class DraftCreateSwedishBankIdSignatureType(BaseModel):
    Preferred: Optional[bool] = Field(
        None,
        description="If true, the signature type is set as preferred.\r\nOnly one signature type may be marked.",
    )
    StampImprintConfiguration: Optional[DraftCreateSwedishBankIdStampImprint] = Field(
        None, description="The configuration of the stamp imprint of the signature."
    )


class DraftCreateOneTimePasswordSignatureType(BaseModel):
    ValidityInSeconds: Optional[int] = Field(
        None, description="The validity of the password in seconds."
    )
    UseExternalSignatureImage: Optional[UseExternalSignatureImage] = Field(
        None, description="The external signature image mode."
    )
    Preferred: Optional[bool] = Field(
        None,
        description="If true, the signature type is set as preferred.\r\nOnly one signature type may be marked.",
    )
    StampImprintConfiguration: Optional[DraftCreateOneTimePasswordStampImprint] = Field(
        None, description="The configuration of the stamp imprint of the signature."
    )


class DraftCreateRemoteCertificateSignatureType(BaseModel):
    ValidityInSeconds: Optional[int] = Field(
        None, description="The validity of the certificate in seconds."
    )
    UseExternalSignatureImage: Optional[UseExternalSignatureImage] = Field(
        None, description="The external signature image mode."
    )
    Preferred: Optional[bool] = Field(
        None,
        description="If true, the signature type is set as preferred.\r\nOnly one signature type may be marked.",
    )
    StampImprintConfiguration: Optional[DraftCreateRemoteCertificateStampImprint] = (
        Field(
            None, description="The configuration of the stamp imprint of the signature."
        )
    )


class DraftCreateATrustCertificateSignatureType(BaseModel):
    TemplateId: Optional[str] = Field(
        None, description="The identifier of the A-Trust template."
    )
    Preferred: Optional[bool] = Field(
        None,
        description="If true, the signature type is set as preferred.\r\nOnly one signature type may be marked.",
    )


class DraftCreateSwissComOnDemandSignatureType(BaseModel):
    ValidityInSeconds: Optional[int] = Field(
        None, description="The validity of the certificate in seconds."
    )
    Preferred: Optional[bool] = Field(
        None,
        description="If true, the signature type is set as preferred.\r\nOnly one signature type may be marked.",
    )
    StampImprintConfiguration: Optional[DraftCreateSwissComOnDemandStampImprint] = (
        Field(
            None, description="The configuration of the stamp imprint of the signature."
        )
    )


class DraftCreateDisposableCertificateSignatureType(BaseModel):
    IsLongLived: Optional[bool] = Field(
        None, description="If true, the disposable certificate is long lived."
    )
    ValidityInSeconds: Optional[int] = Field(
        None, description="The validity of the certificate in seconds."
    )
    UseExternalSignatureImage: Optional[UseExternalSignatureImage] = Field(
        None, description="The external signature image mode."
    )
    Preferred: Optional[bool] = Field(
        None,
        description="If true, the signature type is set as preferred.\r\nOnly one signature type may be marked.",
    )
    StampImprintConfiguration: Optional[
        DraftCreateDisposableCertificateStampImprint
    ] = Field(
        None, description="The configuration of the stamp imprint of the signature."
    )


class DraftCreateTypeToSignSignatureType(BaseModel):
    UseExternalSignatureImage: Optional[UseExternalSignatureImage] = Field(
        None, description="The external signature image mode."
    )
    Preferred: Optional[bool] = Field(
        None,
        description="If true, the signature type is set as preferred.\r\nOnly one signature type may be marked.",
    )
    StampImprintConfiguration: Optional[DraftCreateTypeToSignStampImprint] = Field(
        None, description="The configuration of the stamp imprint of the signature."
    )


class DraftCreateDrawToSignSignatureType(BaseModel):
    UseExternalSignatureImage: Optional[UseExternalSignatureImage] = Field(
        None, description="The external signature image mode."
    )
    Preferred: Optional[bool] = Field(
        None,
        description="If true, the signature type is set as preferred.\r\nOnly one signature type may be marked.",
    )
    StampImprintConfiguration: Optional[DraftCreateDrawToSignStampImprint] = Field(
        None, description="The configuration of the stamp imprint of the signature."
    )


class DraftCreateClickToSignSignatureType(BaseModel):
    UseExternalSignatureImage: Optional[UseExternalSignatureImage] = Field(
        None, description="The external signature image mode."
    )
    Preferred: Optional[bool] = Field(
        None,
        description="If true, the signature type is set as preferred.\r\nOnly one signature type may be marked.",
    )
    StampImprintConfiguration: Optional[DraftCreateClickToSignStampImprint] = Field(
        None, description="The configuration of the stamp imprint of the signature."
    )


class DraftCreateRadioButtonItemDefinition(BaseModel):
    ExportValue: Optional[str] = Field(
        None, description="The value of the element when the radio button is checked."
    )
    IsChecked: Optional[bool] = Field(
        None, description="If true, the radio button is checked by default."
    )
    ReadOnly: Optional[bool] = Field(
        None, description="If true, the element is readonly."
    )
    Position: DraftCreatePosition = Field(
        ..., description="The position of the element within the document."
    )
    Size: DraftCreateSize = Field(..., description="The size of the element.")


class DraftCreateListBoxDefinition(BaseModel):
    TextFormat: Optional[DraftCreateTextFormat] = Field(
        None, description="The configuration of the text format."
    )
    Items: List[DraftCreateChoiceItem] = Field(
        ...,
        description="A list of items that can be selected for the element.",
        max_items=50,
    )
    IsMultiSelect: Optional[bool] = Field(
        None, description="If true, multiple values of the list box can be selected."
    )
    ReadOnly: Optional[bool] = Field(
        None, description="If true, the element is readonly."
    )
    Position: DraftCreatePosition = Field(
        ..., description="The position of the element within the document."
    )
    Size: DraftCreateSize = Field(..., description="The size of the element.")


class DraftCreateRadioButtonGroupDefinition(BaseModel):
    IsSelectUnison: Optional[bool] = Field(
        None,
        description="If true, radiobuttons with the same <code>ExportValue</code> are checked and unchecked together.",
    )
    Items: Optional[List[DraftCreateRadioButtonItemDefinition]] = Field(
        None,
        description="The list of radio buttons that belong to the same group.",
        max_items=50,
    )


class DraftCreateComboBoxDefinition(BaseModel):
    TextFormat: Optional[DraftCreateTextFormat] = Field(
        None, description="The configuration of the text format."
    )
    Items: List[DraftCreateChoiceItem] = Field(
        ...,
        description="A list of items that can be selected for the element.",
        max_items=50,
    )
    IsEditable: Optional[bool] = Field(
        None, description="If true, the combo box is editable."
    )
    ReadOnly: Optional[bool] = Field(
        None, description="If true, the element is readonly."
    )
    Position: DraftCreatePosition = Field(
        ..., description="The position of the element within the document."
    )
    Size: DraftCreateSize = Field(..., description="The size of the element.")


class DraftCreateCheckBoxDefinition(BaseModel):
    ExportValue: Optional[str] = Field(
        None, description="The value of the check box when it is checked."
    )
    Position: DraftCreatePosition = Field(
        ..., description="The position of the element within the document."
    )
    Size: DraftCreateSize = Field(..., description="The size of the element.")
    ReadOnly: Optional[bool] = Field(
        None, description="If true, the element is readonly."
    )


class DraftCreateTextBoxDefinition(BaseModel):
    ReadOnly: Optional[bool] = Field(
        None, description="If true, the element is readonly."
    )
    MaxLength: Optional[int] = Field(
        None, description="The maximum length of the text."
    )
    IsMultiline: Optional[bool] = Field(
        None, description="If true, the text box can have multiple lines."
    )
    IsPassword: Optional[bool] = Field(
        None,
        description="If true, the text box behaves like a password input field and does not show the actually entered characters.",
    )
    TextFormat: Optional[DraftCreateTextFormat] = Field(
        None, description="The configuration of the text format."
    )
    Position: DraftCreatePosition = Field(
        ..., description="The position of the element within the document."
    )
    Size: DraftCreateSize = Field(..., description="The size of the element.")


class DraftCreateDefaultSignature(BaseModel):
    IsDefault: Optional[bool] = Field(
        None,
        description="If true, this signature type is used for newly added signature fields as default.\r\nOnly one signature type can be set as default.",
    )


class DraftCreateReadDocumentConfirmation(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    Required: Optional[bool] = Field(
        None, description="If true, the element is required."
    )
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    DisplayName: Optional[str] = Field(None, description="The displayed name.")
    GuidingOrder: Optional[int] = Field(None, description="The order of the element.")


class DraftCreateReadPagesConfirmation(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    Required: Optional[bool] = Field(
        None, description="If true, the element is required."
    )
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    DisplayName: Optional[str] = Field(None, description="The displayed name.")
    PageNumber: Optional[int] = Field(
        None,
        description="The number of the page that needs to be read. Starting with 1.",
    )
    GuidingOrder: Optional[int] = Field(None, description="The order of the element.")


class PreSelectedItem(BaseModel):
    __root__: str


class DraftCreateListBox(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    Required: Optional[bool] = Field(
        None, description="If true, the element is required."
    )
    PreSelectedItems: Optional[List[PreSelectedItem]] = Field(
        None,
        description="The export values of the items which should be initially selected.",
        max_items=50,
    )
    GuidingOrder: Optional[int] = Field(None, description="The order of the element.")
    FieldDefinition: Optional[DraftCreateListBoxDefinition] = Field(
        None,
        description="The definition of the list box field.\r\nIt must be specified when the list box is added.\r\nIt must not be specified when the list box already exists.",
    )


class DraftCreateRadioButtonGroup(BaseModel):
    GroupName: Optional[str] = Field(
        None, description="The name of the radio button group."
    )
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    Required: Optional[bool] = Field(
        None, description="If true, the element is required."
    )
    SelectedItem: Optional[str] = Field(
        None,
        description="The export value of the selected item of the radio button group.",
    )
    GuidingOrder: Optional[int] = Field(None, description="The order of the element.")
    FieldDefinition: Optional[DraftCreateRadioButtonGroupDefinition] = Field(
        None,
        description="The definition of the radio button group.\r\nIt must be specified when the radio button group is added.\r\nIt must not be specified when the radio button group already exists.",
    )


class DraftCreateComboBox(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    Required: Optional[bool] = Field(
        None, description="If true, the element is required."
    )
    Value: Optional[str] = Field(
        None, description="The selected value of the combo box."
    )
    GuidingOrder: Optional[int] = Field(None, description="The order of the element.")
    FieldDefinition: Optional[DraftCreateComboBoxDefinition] = Field(
        None,
        description="The definition of the combo box.\r\nIt must be specified when the combo box is added.\r\nIt must not be specified when the combo box already exists.",
    )


class DraftCreateCheckBox(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    Required: Optional[bool] = Field(
        None, description="If true, the element is required."
    )
    IsChecked: Optional[bool] = Field(
        None, description="If true, the check box is checked."
    )
    GuidingOrder: Optional[int] = Field(None, description="The order of the element.")
    FieldDefinition: Optional[DraftCreateCheckBoxDefinition] = Field(
        None,
        description="The definition of the check box.\r\nIt must be specified when the check box is added.\r\nIt must not be specified when the check box already exists.",
    )


class DraftCreateReminderConfiguration(BaseModel):
    Enabled: Optional[bool] = Field(None, description="If true, reminders are sent.")
    FirstReminderInDays: Optional[int] = Field(
        None,
        description="The amount of days until a reminder is sent to a signer or a viewer after the initial notification.",
    )
    ReminderResendIntervalInDays: Optional[int] = Field(
        None,
        description="The amount of days until a reminder is sent again to a signer or a viewer.",
    )
    BeforeExpirationInDays: Optional[int] = Field(
        None,
        description="The amount of days before the envelope expires and a reminder should be sent.",
    )


class DraftCreateResponse(BaseModel):
    DraftId: Optional[str] = Field(None, description="The identifier of the draft.")


class DraftDeleteRequest(BaseModel):
    DraftId: str = Field(..., description="The identifier of the draft.")


class Void(BaseModel):
    pass


class DraftUpdateAgreementTranslation(BaseModel):
    LanguageCode: LanguageCode = Field(
        ..., description="The language of the translated agreement."
    )
    Text: str = Field(..., description="The translated agreement.")
    Header: Optional[str] = Field(
        None, description="The header for the translated agreement."
    )
    IsDefault: Optional[bool] = Field(
        None, description="If true, this translation is used as default."
    )


class DraftUpdateActionCallbackSelection(BaseModel):
    ConfirmTransactionCode: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when a transaction code was sent. This is only used for legacy disposable certificates, after user accepted issuance of disposable certificate.",
    )
    AgreementAccepted: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when the user accepted the agreement.",
    )
    AgreementRejected: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when the user rejected the agreement.",
    )
    PrepareAuthenticationSuccess: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when the preparation of the authentication process succeeded.",
    )
    AuthenticationFailed: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when the user failed to authenticate.",
    )
    AuthenticationSuccess: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when the user succeeded to authenticate.",
    )
    AuditTrailRequested: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when the audit trail was requested.",
    )
    AuditTrailXmlRequested: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when the audit trail XML was requested.",
    )
    CalledPage: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when the SignAnyWhere Viewer was requested.",
    )
    DocumentDownloaded: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when the document download was requested.",
    )
    FlattenedDocumentDownloaded: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when the flattened document download was requested.",
    )
    AddedAnnotation: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when an annotation was added.",
    )
    AddedAttachment: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when an attachment was added.",
    )
    AppendedDocument: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when a document was appended.",
    )
    FormsFilled: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when a form field was filled.",
    )
    ConfirmReading: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when a reading task was completed.",
    )
    SendTransactionCode: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when a transaction code for a signature with type TransactionCode was sent using the TransactionCodeSenderPlugin.",
    )
    PrepareSignWorkstepDocument: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when a signature was prepared for signing.",
    )
    SignWorkstepDocument: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when a signature was applied.",
    )
    UndoAction: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when an action was undone.",
    )
    WorkstepCreated: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when a workstep was created.",
    )
    WorkstepFinished: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when a workstep was finished.",
    )
    WorkstepRejected: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when a workstep was rejected.",
    )
    DisablePolicyAndValidityChecks: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when policy and validity checks were disabled.",
    )
    EnablePolicyAndValidityChecks: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when policy and validity checks were enabled.",
    )
    AppendFileToWorkstep: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when a file was appended to the workstep.",
    )
    AppendTasksToWorkstep: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when a task was added to the workstep.",
    )
    SetOptionalDocumentState: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when an optional document became either active or inactive.",
    )
    PreparePayloadForBatch: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when the payload was prepared for batch signing.",
    )


class DraftUpdateDefaultSignature(BaseModel):
    IsDefault: Optional[bool] = Field(
        None,
        description="If true, this signature type is used for newly added signature fields as default.\r\nOnly one signature type can be set as default.",
    )


class DraftUpdateRedirectConfiguration(BaseModel):
    AfterSendRedirectUrl: Optional[str] = Field(
        None,
        description="The URL to redirect to after the envelope was sent successfully.\r\nThis is only applicable when using the eSAW UI.",
    )
    BeforeSendRedirectUrl: Optional[str] = Field(
        None,
        description="The URL to redirect to before the envelope is sent.\r\nThis is only applicable when using the eSAW UI.",
    )


class DraftUpdateAgentRedirectConfiguration(BaseModel):
    Policy: Optional[Policy] = Field(
        None,
        description="Defines the redirect target page which should be opened when the agent mode is active. \r\nMust not be set, when 'Allow' is not set to true.",
    )
    Allow: Optional[bool] = Field(
        None,
        description="If true, the agent mode can be used. \r\nIf false, both 'Policy'and 'IFrameAllowList' must not be set.",
    )
    IFrameAllowList: Optional[List[IFrameAllowListItem]] = Field(
        None,
        description="The URLs where the designer interface of eSignAnyWhere may be embedded.\r\nMust not be set, when 'Allow' is not set to true.",
        max_items=50,
    )


class DraftUpdateExpirationConfiguration(BaseModel):
    ExpirationInSecondsAfterSending: Optional[int] = Field(
        None,
        description="The relative expiration in seconds after sending the envelope.\r\nMust be a positive number between 600 and the maximum envelope validity located in the system configuration [Configuration key: maxEnvelopeValidityInDays, Default: 2419200 seconds (28 days)].\r\nMust not be defined when property <code>ExpirationDate</code> is specified.",
    )
    ExpirationDate: Optional[datetime] = Field(
        None,
        description="The absolute expiration date of the envelope.\r\nMust not be in the past.\r\nMust not be defined when property <code>ExpirationInSecondsAfterSending</code> is specified.\r\nA datetime in the format RFC 3339, section 5.6, 'date-Time' (e.g. 2017-07-21T17:32:28Z).",
    )


class DraftUpdateReminderConfiguration(BaseModel):
    Enabled: Optional[bool] = Field(None, description="If true, reminders are sent.")
    FirstReminderInDays: Optional[int] = Field(
        None,
        description="The amount of days until a reminder is sent to a signer or a viewer after the initial notification.",
    )
    ReminderResendIntervalInDays: Optional[int] = Field(
        None,
        description="The amount of days until a reminder is sent again to a signer or a viewer.",
    )
    BeforeExpirationInDays: Optional[int] = Field(
        None,
        description="The amount of days before the envelope expires and a reminder should be sent.",
    )


class DraftUpdateEmailConfiguration(BaseModel):
    Subject: Optional[str] = Field(
        None, description="The subject of the sign notifications."
    )
    Message: Optional[str] = Field(
        None, description="The message of the sign notifications."
    )
    SenderDisplayName: Optional[str] = Field(
        None, description="The displayed name of the sender in the notifications."
    )


class DraftUpdateSealingConfiguration(BaseModel):
    CertificateId: Optional[str] = Field(
        None, description="Update the referenced Sealing Certificate identifier."
    )


class DraftReorderActivitiesView(BaseModel):
    ViewingGroup: str = Field(
        ..., description="The group for defining parallel view actions."
    )


class DraftReorderActivitiesCopy(BaseModel):
    CopyingGroup: str = Field(
        ..., description="The group for defining parallel copy actions."
    )


class DraftReorderActivitiesSign(BaseModel):
    SigningGroup: str = Field(
        ..., description="The group for defining parallel sign actions."
    )


class DraftReorderActivitiesSignAsP7M(BaseModel):
    SignAsP7MGroup: str = Field(
        ..., description="The group for defining parallel P7M actions."
    )


class DraftActivityReplaceVisibilityOption(BaseModel):
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    IsHidden: Optional[bool] = Field(
        None, description="If true, the referenced document is hidden for the activity."
    )


class DraftActivityReplaceBatchConfiguration(BaseModel):
    Mode: Optional[Mode] = Field(
        None, description="The mode, that will be used for batch signing."
    )
    RequireScrollingOverAllSignaturesBeforeSigning: Optional[bool] = Field(
        None,
        description="If true, the user has to review all signatures in the batch signing dialog before signing.\r\nThis is only applicable when the <code>Mode</code> is set to <code>OptIn</code> or <code>OptOut</code>.",
    )


class DraftActivityReplaceClientFinishAction(BaseModel):
    RedirectUri: Optional[str] = Field(None, description="The redirect uri.")


class DraftActivityReplaceAppFinishAction(BaseModel):
    RemoveDocumentFromRecentDocumentList: Optional[bool] = Field(
        None,
        description="If true, the document will be removed from the recent document list.",
    )
    CallClientActionOnlyAfterSuccessfulSync: Optional[bool] = Field(
        None,
        description="If true, the client action will be called only after a successful sync.",
    )
    CloseApp: Optional[bool] = Field(
        None, description="If true, the app will be closed."
    )
    RedirectUri: Optional[str] = Field(None, description="The redirect uri.")


class DraftActivityReplaceKioskFinishAction(BaseModel):
    RedirectUri: Optional[str] = Field(None, description="The redirect uri.")


class DraftActivityReplaceRemoteCertificateSignatureData(BaseModel):
    UserId: Optional[str] = Field(None, description="The identifier of the user.")
    DeviceId: Optional[str] = Field(None, description="The identifier of the device.")


class DraftActivityReplaceSwissComOnDemandSignatureData(BaseModel):
    PhoneNumber: Optional[str] = Field(None, description="The phone number.")
    CommonName: Optional[str] = Field(
        None, description="The name of the certificate that is created or checked."
    )
    Country: Optional[str] = Field(None, description="The country.")
    Locality: Optional[str] = Field(None, description="The locality.")
    OrganizationUnits: Optional[List[OrganizationUnit]] = Field(
        None, description="The organizational units.", max_items=228
    )
    Organization: Optional[str] = Field(None, description="The organization.")
    SerialNumber: Optional[str] = Field(None, description="The serial number.")
    StateOrProvince: Optional[str] = Field(None, description="The state or province.")
    Pseudonym: Optional[str] = Field(
        None, description="A name or key that uniquely identifies the user."
    )


class DraftActivityReplaceSmsOneTimePasswordSignatureData(BaseModel):
    PhoneNumber: Optional[str] = Field(
        None,
        description="The phone number to which the one time password will be sent.",
    )


class DraftActivityReplaceATrustCertificateSignatureData(BaseModel):
    PhoneNumber: Optional[str] = Field(
        None, description="The phone number of the recipient."
    )


class DraftActivityReplaceSwedishBankIdSignatureData(BaseModel):
    PersonalNumber: Optional[str] = Field(
        None, description="The personal number for signing."
    )
    AllowAnyPersonalNumber: Optional[bool] = Field(
        None,
        description="If true, the personal number can be edited by the recipient.\r\nIf the personal number is empty and can be edited, a QR code for scanning is provided.",
    )


class DraftActivityReplacePosition(BaseModel):
    PageNumber: Optional[int] = Field(
        None,
        description="The number of the page where the element is located. It starts with 1.",
    )
    X: float = Field(
        ..., description="The X coordinate in points. It starts from the left."
    )
    Y: float = Field(
        ..., description="The Y coordinate in points. It starts from the bottom."
    )


class DraftActivityReplaceSize(BaseModel):
    Width: float = Field(..., description="The width of the element in points.")
    Height: float = Field(..., description="The height of the element in points.")


class DraftActivityReplaceAccessCodeAuthentication(BaseModel):
    Code: Optional[str] = Field(
        None, description="The code for authenticating the recipient."
    )


class DraftActivityReplaceSmsOneTimePasswordAuthentication(BaseModel):
    PhoneNumber: Optional[str] = Field(
        None,
        description="The phone number to which the one time password will be sent.",
    )


class DraftActivityReplaceSwedishBankIdAuthentication(BaseModel):
    PersonalNumber: Optional[str] = Field(
        None, description="The personal number for the authentication."
    )
    AllowAnyPersonalNumber: Optional[bool] = Field(
        None,
        description="If true, the personal number can be edited by the recipient.\r\nIf the personal number is empty and can be edited, a QR code for scanning is provided.",
    )


class Type4(Enum):
    None_ = "None"
    Date = "Date"
    Email = "Email"
    Number = "Number"
    Phone = "Phone"
    Time = "Time"


class DraftActivityReplaceAttachmentDefinition(BaseModel):
    Position: DraftActivityReplacePosition = Field(
        ..., description="The position of the element within the document."
    )
    Size: DraftActivityReplaceSize = Field(..., description="The size of the element.")


class DraftActivityReplaceReadingAreaDefinition(BaseModel):
    Position: DraftActivityReplacePosition = Field(
        ..., description="The position of the element within the document."
    )
    Size: DraftActivityReplaceSize = Field(..., description="The size of the element.")


class DraftActivityReplaceSignaturePluginParameter(BaseModel):
    Key: Optional[str] = Field(None, description="The identifier of the parameter.")
    Value: Optional[str] = Field(None, description="The value of the parameter.")


class DraftActivityReplaceAuthenticationValidation(BaseModel):
    FieldReferenceId: Optional[str] = Field(
        None, description="The identifier of the field."
    )
    ExpectedValue: Optional[str] = Field(
        None, description="The expected value of the field."
    )


class DraftActivityReplaceChoiceItem(BaseModel):
    ExportValue: Optional[str] = Field(
        None, description="The value of the element when the choice item is selected."
    )
    DisplayValue: str = Field(
        ..., description="The displayed value of the choice item."
    )


class DraftActivityReplaceLinkDefinition(BaseModel):
    Position: DraftActivityReplacePosition = Field(
        ..., description="The position of the element within the document."
    )
    Size: DraftActivityReplaceSize = Field(..., description="The size of the element.")


class DraftActivityReplaceFieldValidationRange(BaseModel):
    From: Optional[str] = Field(None, description="The lower boundary of the range.")
    To: Optional[str] = Field(None, description="The upper boundary of the range.")


class DraftActivityReplacePluginStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayEmail: Optional[bool] = Field(
        None, description="If true, the email address of the signer is displayed."
    )
    DisplayIp: Optional[bool] = Field(
        None, description="If true, the IP address of the signer is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class DraftActivityReplaceSwedishBankIdStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayTransactionId: Optional[bool] = Field(
        None, description="If true, the transaction identifier is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class DraftActivityReplaceOneTimePasswordStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayTransactionId: Optional[bool] = Field(
        None, description="If true, the transaction identifier is displayed."
    )
    DisplayTransactionToken: Optional[bool] = Field(
        None, description="If true, the transaction token is displayed."
    )
    DisplayPhoneNumber: Optional[bool] = Field(
        None, description="If true, the phone number of the signer is displayed."
    )
    DisplayIp: Optional[bool] = Field(
        None, description="If true, the IP address of the signer is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class DraftActivityReplaceRemoteCertificateStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayIp: Optional[bool] = Field(
        None, description="If true, the IP address of the signer is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class DraftActivityReplaceSwissComOnDemandStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayIp: Optional[bool] = Field(
        None, description="If true, the IP address of the signer is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class DraftActivityReplaceDisposableCertificateStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayIp: Optional[bool] = Field(
        None, description="If true, the IP address of the signer is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class DraftActivityReplaceLocalCertificateStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayIp: Optional[bool] = Field(
        None, description="If true, the IP address of the signer is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class DraftActivityReplaceTypeToSignStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayEmail: Optional[bool] = Field(
        None, description="If true, the email address of the signer is displayed."
    )
    DisplayIp: Optional[bool] = Field(
        None, description="If true, the IP address of the signer is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class DraftActivityReplaceDrawToSignStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayEmail: Optional[bool] = Field(
        None, description="If true, the email address of the signer is displayed."
    )
    DisplayIp: Optional[bool] = Field(
        None, description="If true, the IP address of the signer is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class DraftActivityReplaceClickToSignStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayEmail: Optional[bool] = Field(
        None, description="If true, the email address of the signer is displayed."
    )
    DisplayIp: Optional[bool] = Field(
        None, description="If true, the IP address of the signer is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class DraftActivityReplaceStampImprintDateConfiguration(BaseModel):
    UseLocalTimezone: Optional[bool] = Field(
        None, description="If true, the local timezone is used."
    )
    DateTimeFormat: Optional[str] = Field(
        None, description="The format of the timestamp."
    )


class DraftActivityReplaceSignaturePluginSignatureType(BaseModel):
    PluginId: Optional[str] = Field(None, description="The identifier of the plugin.")
    Preferred: Optional[bool] = Field(
        None,
        description="If true, the signature type is set as preferred.\r\nOnly one signature type may be marked.",
    )
    StampImprintConfiguration: Optional[DraftActivityReplacePluginStampImprint] = Field(
        None, description="The configuration of the stamp imprint of the signature."
    )


class DraftActivityReplaceSwedishBankIdSignatureType(BaseModel):
    Preferred: Optional[bool] = Field(
        None,
        description="If true, the signature type is set as preferred.\r\nOnly one signature type may be marked.",
    )
    StampImprintConfiguration: Optional[
        DraftActivityReplaceSwedishBankIdStampImprint
    ] = Field(
        None, description="The configuration of the stamp imprint of the signature."
    )


class DraftActivityReplaceOneTimePasswordSignatureType(BaseModel):
    ValidityInSeconds: Optional[int] = Field(
        None, description="The validity of the password in seconds."
    )
    UseExternalSignatureImage: Optional[UseExternalSignatureImage] = Field(
        None, description="The external signature image mode."
    )
    Preferred: Optional[bool] = Field(
        None,
        description="If true, the signature type is set as preferred.\r\nOnly one signature type may be marked.",
    )
    StampImprintConfiguration: Optional[
        DraftActivityReplaceOneTimePasswordStampImprint
    ] = Field(
        None, description="The configuration of the stamp imprint of the signature."
    )


class DraftActivityReplaceRemoteCertificateSignatureType(BaseModel):
    ValidityInSeconds: Optional[int] = Field(
        None, description="The validity of the certificate in seconds."
    )
    UseExternalSignatureImage: Optional[UseExternalSignatureImage] = Field(
        None, description="The external signature image mode."
    )
    Preferred: Optional[bool] = Field(
        None,
        description="If true, the signature type is set as preferred.\r\nOnly one signature type may be marked.",
    )
    StampImprintConfiguration: Optional[
        DraftActivityReplaceRemoteCertificateStampImprint
    ] = Field(
        None, description="The configuration of the stamp imprint of the signature."
    )


class DraftActivityReplaceBiometricSignatureType(BaseModel):
    BiometricVerification: Optional[bool] = Field(
        None, description="If true, a biometric verification is performed."
    )
    AllowBiometricStoringOnly: Optional[bool] = Field(
        None,
        description="If true, the biometric signature might be stored without verification.",
    )
    StoreSignedResponseWithoutBioData: Optional[bool] = Field(
        None,
        description="If true, the signed response is stored without biometric data.",
    )
    BiometricServerUserId: Optional[str] = Field(
        None, description="The identifier of the user on the biometric server."
    )
    SignaturePositioning: Optional[SignaturePositioning] = Field(
        None, description="The allowed positioning of the biometric signature."
    )
    Preferred: Optional[bool] = Field(
        None,
        description="If true, the signature type is set as preferred.\r\nOnly one signature type may be marked.",
    )


class DraftActivityReplaceATrustCertificateSignatureType(BaseModel):
    TemplateId: Optional[str] = Field(
        None, description="The identifier of the A-Trust template."
    )
    Preferred: Optional[bool] = Field(
        None,
        description="If true, the signature type is set as preferred.\r\nOnly one signature type may be marked.",
    )


class DraftActivityReplaceSwissComOnDemandSignatureType(BaseModel):
    ValidityInSeconds: Optional[int] = Field(
        None, description="The validity of the certificate in seconds."
    )
    Preferred: Optional[bool] = Field(
        None,
        description="If true, the signature type is set as preferred.\r\nOnly one signature type may be marked.",
    )
    StampImprintConfiguration: Optional[
        DraftActivityReplaceSwissComOnDemandStampImprint
    ] = Field(
        None, description="The configuration of the stamp imprint of the signature."
    )


class DraftActivityReplaceDisposableCertificateSignatureType(BaseModel):
    IsLongLived: Optional[bool] = Field(
        None, description="If true, the disposable certificate is long lived."
    )
    ValidityInSeconds: Optional[int] = Field(
        None, description="The validity of the certificate in seconds."
    )
    UseExternalSignatureImage: Optional[UseExternalSignatureImage] = Field(
        None, description="The external signature image mode."
    )
    Preferred: Optional[bool] = Field(
        None,
        description="If true, the signature type is set as preferred.\r\nOnly one signature type may be marked.",
    )
    StampImprintConfiguration: Optional[
        DraftActivityReplaceDisposableCertificateStampImprint
    ] = Field(
        None, description="The configuration of the stamp imprint of the signature."
    )


class DraftActivityReplaceLocalCertificateSignatureType(BaseModel):
    EnforcePreferredHashAlgorithm: Optional[bool] = Field(
        None,
        description="If true, the usage of the preferred hash algorithm is enforced.",
    )
    PreferredHashAlgorithm: Optional[PreferredHashAlgorithm] = Field(
        None, description="The preferred hash algorithm."
    )
    UseExternalSignatureImage: Optional[UseExternalSignatureImage] = Field(
        None, description="The external signature image mode."
    )
    Preferred: Optional[bool] = Field(
        None,
        description="If true, the signature type is set as preferred.\r\nOnly one signature type may be marked.",
    )
    StampImprintConfiguration: Optional[
        DraftActivityReplaceLocalCertificateStampImprint
    ] = Field(
        None, description="The configuration of the stamp imprint of the signature."
    )


class DraftActivityReplaceTypeToSignSignatureType(BaseModel):
    UseExternalSignatureImage: Optional[UseExternalSignatureImage] = Field(
        None, description="The external signature image mode."
    )
    Preferred: Optional[bool] = Field(
        None,
        description="If true, the signature type is set as preferred.\r\nOnly one signature type may be marked.",
    )
    StampImprintConfiguration: Optional[DraftActivityReplaceTypeToSignStampImprint] = (
        Field(
            None, description="The configuration of the stamp imprint of the signature."
        )
    )


class DraftActivityReplaceDrawToSignSignatureType(BaseModel):
    UseExternalSignatureImage: Optional[UseExternalSignatureImage] = Field(
        None, description="The external signature image mode."
    )
    Preferred: Optional[bool] = Field(
        None,
        description="If true, the signature type is set as preferred.\r\nOnly one signature type may be marked.",
    )
    StampImprintConfiguration: Optional[DraftActivityReplaceDrawToSignStampImprint] = (
        Field(
            None, description="The configuration of the stamp imprint of the signature."
        )
    )


class DraftActivityReplaceClickToSignSignatureType(BaseModel):
    UseExternalSignatureImage: Optional[UseExternalSignatureImage] = Field(
        None, description="The external signature image mode."
    )
    Preferred: Optional[bool] = Field(
        None,
        description="If true, the signature type is set as preferred.\r\nOnly one signature type may be marked.",
    )
    StampImprintConfiguration: Optional[DraftActivityReplaceClickToSignStampImprint] = (
        Field(
            None, description="The configuration of the stamp imprint of the signature."
        )
    )


class DraftActivityReplaceRadioButtonItemDefinition(BaseModel):
    ExportValue: Optional[str] = Field(
        None, description="The value of the element when the radio button is checked."
    )
    IsChecked: Optional[bool] = Field(
        None, description="If true, the radio button is checked by default."
    )
    ReadOnly: Optional[bool] = Field(
        None, description="If true, the element is readonly."
    )
    Position: DraftActivityReplacePosition = Field(
        ..., description="The position of the element within the document."
    )
    Size: DraftActivityReplaceSize = Field(..., description="The size of the element.")


class DraftActivityReplaceTextFormat(BaseModel):
    TextColor: Optional[str] = Field(
        None,
        description="The color of the text. The default color is black.\r\nSix digit hexadecimal color that starts with # in #RRGGBB format according to CSS Color Module Level 4, paragraph 5.2.",
    )
    FontSizeInPt: Optional[float] = Field(
        None, description="The size of the font in points."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    Bold: Optional[bool] = Field(None, description="If true, the bold font is used.")
    Italic: Optional[bool] = Field(
        None, description="If true, the italic font is used."
    )
    TextAlign: Optional[TextAlign] = Field(
        None, description="The alignment of the text. The default alignment is left."
    )


class Type5(Enum):
    International = "International"
    InternationalLeadingZeros = "InternationalLeadingZeros"
    InternationalLeadingPlus = "InternationalLeadingPlus"


class DraftActivityReplacePhoneValidationConfiguration(BaseModel):
    Type: Optional[Type5] = Field(None, description="The format of the phone numbers.")


class DraftActivityReplaceNumberValidationConfiguration(BaseModel):
    DecimalDigits: Optional[int] = Field(
        None, description="The expected amount of decimal digits."
    )
    Symbol: Optional[str] = Field(None, description="The expected symbol.")
    SymbolLocation: Optional[SymbolLocation] = Field(
        None, description="The defined symbol location."
    )
    GroupSeparator: Optional[GroupSeparator] = Field(
        None, description="The expected thousands separator."
    )
    DecimalSeparator: Optional[DecimalSeparator] = Field(
        None, description="The expected decimal separator."
    )
    Range: Optional[DraftActivityReplaceFieldValidationRange] = Field(
        None, description="The range of the values."
    )


class DraftActivityReplaceListBoxDefinition(BaseModel):
    TextFormat: Optional[DraftActivityReplaceTextFormat] = Field(
        None, description="The configuration of the text format."
    )
    Items: List[DraftActivityReplaceChoiceItem] = Field(
        ...,
        description="A list of items that can be selected for the element.",
        max_items=50,
    )
    IsMultiSelect: Optional[bool] = Field(
        None, description="If true, multiple values of the list box can be selected."
    )
    ReadOnly: Optional[bool] = Field(
        None, description="If true, the element is readonly."
    )
    Position: DraftActivityReplacePosition = Field(
        ..., description="The position of the element within the document."
    )
    Size: DraftActivityReplaceSize = Field(..., description="The size of the element.")


class DraftActivityReplaceRadioButtonGroupDefinition(BaseModel):
    IsSelectUnison: Optional[bool] = Field(
        None,
        description="If true, radiobuttons with the same <code>ExportValue</code> are checked and unchecked together.",
    )
    Items: Optional[List[DraftActivityReplaceRadioButtonItemDefinition]] = Field(
        None,
        description="The list of radio buttons that belong to the same group.",
        max_items=50,
    )


class DraftActivityReplaceComboBoxDefinition(BaseModel):
    TextFormat: Optional[DraftActivityReplaceTextFormat] = Field(
        None, description="The configuration of the text format."
    )
    Items: List[DraftActivityReplaceChoiceItem] = Field(
        ...,
        description="A list of items that can be selected for the element.",
        max_items=50,
    )
    IsEditable: Optional[bool] = Field(
        None, description="If true, the combo box is editable."
    )
    ReadOnly: Optional[bool] = Field(
        None, description="If true, the element is readonly."
    )
    Position: DraftActivityReplacePosition = Field(
        ..., description="The position of the element within the document."
    )
    Size: DraftActivityReplaceSize = Field(..., description="The size of the element.")


class DraftActivityReplaceCheckBoxDefinition(BaseModel):
    ExportValue: Optional[str] = Field(
        None, description="The value of the check box when it is checked."
    )
    Position: DraftActivityReplacePosition = Field(
        ..., description="The position of the element within the document."
    )
    Size: DraftActivityReplaceSize = Field(..., description="The size of the element.")
    ReadOnly: Optional[bool] = Field(
        None, description="If true, the element is readonly."
    )


class DraftActivityReplaceTextBoxDefinition(BaseModel):
    ReadOnly: Optional[bool] = Field(
        None, description="If true, the element is readonly."
    )
    MaxLength: Optional[int] = Field(
        None, description="The maximum length of the text."
    )
    IsMultiline: Optional[bool] = Field(
        None, description="If true, the text box can have multiple lines."
    )
    IsPassword: Optional[bool] = Field(
        None,
        description="If true, the text box behaves like a password input field and does not show the actually entered characters.",
    )
    TextFormat: Optional[DraftActivityReplaceTextFormat] = Field(
        None, description="The configuration of the text format."
    )
    Position: DraftActivityReplacePosition = Field(
        ..., description="The position of the element within the document."
    )
    Size: DraftActivityReplaceSize = Field(..., description="The size of the element.")


class DraftActivityReplaceDisposableCertificateSignatureData(BaseModel):
    DocumentIssuingCountry: Optional[str] = Field(
        None,
        description="The issuing country of the document.\r\nWill be used as country of residence, if lean is disabled.",
    )
    IdentificationIssuingCountry: Optional[str] = Field(
        None, description="The issuing country of the identification."
    )
    IdentificationType: Optional[IdentificationType] = Field(
        None, description="The type of identification in use."
    )
    PhoneNumber: Optional[str] = Field(
        None, description="The phone number registered for identification."
    )
    DocumentType: Optional[DocumentType] = Field(
        None, description="The type of document used for the identification."
    )
    DocumentIssuedBy: Optional[str] = Field(
        None, description="The authority that issued the document."
    )
    DocumentIssuedOn: Optional[datetime] = Field(
        None,
        description="The date when the document has been issued.\r\nA date in the format RFC 3339, section 5.6, 'full-date' (e.g. 2017-07-21).",
    )
    DocumentExpiryDate: Optional[datetime] = Field(
        None,
        description="The expiration date of the document.\r\nA date in the format RFC 3339, section 5.6, 'full-date' (e.g. 2017-07-21).",
    )
    SerialNumber: Optional[str] = Field(
        None, description="The serial number of the certificate."
    )
    DocumentNumber: Optional[str] = Field(
        None, description="The identifier of the document."
    )


class DraftActivityReplaceReadDocumentConfirmation(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    Required: Optional[bool] = Field(
        None, description="If true, the element is required."
    )
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    DisplayName: Optional[str] = Field(None, description="The displayed name.")
    GuidingOrder: Optional[int] = Field(None, description="The order of the element.")


class DraftActivityReplaceReadPagesConfirmation(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    Required: Optional[bool] = Field(
        None, description="If true, the element is required."
    )
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    DisplayName: Optional[str] = Field(None, description="The displayed name.")
    PageNumber: Optional[int] = Field(
        None,
        description="The number of the page that needs to be read. Starting with 1.",
    )
    GuidingOrder: Optional[int] = Field(None, description="The order of the element.")


class DraftActivityReplaceReadAreaConfirmation(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    Required: Optional[bool] = Field(
        None, description="If true, the element is required."
    )
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    DisplayName: Optional[str] = Field(None, description="The displayed name.")
    GuidingOrder: Optional[int] = Field(None, description="The order of the element.")
    Definition: Optional[DraftActivityReplaceReadingAreaDefinition] = Field(
        None,
        description="The definition of the area.\r\nWhen adding a new element, it has to be specified .\r\nWhen the field already exists, it must not be specified.",
    )


class DraftActivityReplaceAttachment(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    Required: Optional[bool] = Field(
        None, description="If true, the element is required."
    )
    DisplayName: Optional[str] = Field(None, description="The displayed name.")
    DisplayIconType: Optional[DisplayIconType] = Field(
        None,
        description="The type of the displayed icon. If no icon is provided Paperclip will be used.",
    )
    GuidingOrder: Optional[int] = Field(None, description="The order of the element.")
    FieldDefinition: Optional[DraftActivityReplaceAttachmentDefinition] = Field(
        None,
        description="The definition of the attachment element.\r\nIt must be specified when the attachment element is added.\r\nIt must not be specified when the attachment element already exists.",
    )


class DraftActivityReplaceListBox(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    Required: Optional[bool] = Field(
        None, description="If true, the element is required."
    )
    PreSelectedItems: Optional[List[PreSelectedItem]] = Field(
        None,
        description="The export values of the items which should be initially selected.",
        max_items=50,
    )
    GuidingOrder: Optional[int] = Field(None, description="The order of the element.")
    FieldDefinition: Optional[DraftActivityReplaceListBoxDefinition] = Field(
        None,
        description="The definition of the list box field.\r\nIt must be specified when the list box is added.\r\nIt must not be specified when the list box already exists.",
    )


class DraftActivityReplaceRadioButtonGroup(BaseModel):
    GroupName: Optional[str] = Field(
        None, description="The name of the radio button group."
    )
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    Required: Optional[bool] = Field(
        None, description="If true, the element is required."
    )
    SelectedItem: Optional[str] = Field(
        None,
        description="The export value of the selected item of the radio button group.",
    )
    GuidingOrder: Optional[int] = Field(None, description="The order of the element.")
    FieldDefinition: Optional[DraftActivityReplaceRadioButtonGroupDefinition] = Field(
        None,
        description="The definition of the radio button group.\r\nIt must be specified when the radio button group is added.\r\nIt must not be specified when the radio button group already exists.",
    )


class DraftActivityReplaceComboBox(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    Required: Optional[bool] = Field(
        None, description="If true, the element is required."
    )
    Value: Optional[str] = Field(
        None, description="The selected value of the combo box."
    )
    GuidingOrder: Optional[int] = Field(None, description="The order of the element.")
    FieldDefinition: Optional[DraftActivityReplaceComboBoxDefinition] = Field(
        None,
        description="The definition of the combo box.\r\nIt must be specified when the combo box is added.\r\nIt must not be specified when the combo box already exists.",
    )


class DraftActivityReplaceCheckBox(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    Required: Optional[bool] = Field(
        None, description="If true, the element is required."
    )
    IsChecked: Optional[bool] = Field(
        None, description="If true, the check box is checked."
    )
    GuidingOrder: Optional[int] = Field(None, description="The order of the element.")
    FieldDefinition: Optional[DraftActivityReplaceCheckBoxDefinition] = Field(
        None,
        description="The definition of the check box.\r\nIt must be specified when the check box is added.\r\nIt must not be specified when the check box already exists.",
    )


class DraftActivityReplaceEmailAppLinks(BaseModel):
    Android: Optional[bool] = Field(
        None, description="If true, an Android app link is added to the email message."
    )
    iOS: Optional[bool] = Field(
        None, description="If true, an iOS app link is added to the email message."
    )
    Windows: Optional[bool] = Field(
        None, description="If true, a Windows app link is added to the email message."
    )


class DraftActivityReplaceContactInformation(BaseModel):
    Email: Optional[str] = Field(
        None, description="The email address of the recipient."
    )
    GivenName: Optional[str] = Field(
        None, description="The given name of the recipient."
    )
    Surname: Optional[str] = Field(None, description="The surname of the recipient.")
    PhoneNumber: Optional[str] = Field(
        None, description="The phone number of the recipient."
    )
    LanguageCode: Optional[LanguageCode] = Field(
        None, description="The language of the recipient."
    )


class DraftActivityReplacePoliciesForP7MAction(BaseModel):
    AllowSaveDocument: Optional[bool] = Field(
        None,
        description="If true, the client is allowed to save the workstep document.",
    )
    AllowSaveAuditTrail: Optional[bool] = Field(
        None,
        description="If true, the client is allowed to save the audittrail document.",
    )
    AllowPrintDocument: Optional[bool] = Field(
        None,
        description="If true, the client is allowed to print the workstep document.",
    )
    AllowAdhocPdfAttachments: Optional[bool] = Field(
        None, description="If true, the client is allowed to append adhoc documents."
    )
    AllowRejectWorkstep: Optional[bool] = Field(
        None, description="If true, the client is allowed to reject the workstep."
    )
    AllowUndoLastAction: Optional[bool] = Field(
        None, description="If true, the client is allowed to undo actions."
    )
    AllowDownloadOfSignedP7MFiles: Optional[bool] = Field(
        None, description="If true, the client is allowed to download signed p7m files."
    )


class DraftActivityReplaceGeneralPoliciesForViewAction(BaseModel):
    AllowSaveDocument: Optional[bool] = Field(
        None,
        description="If true, the client is allowed to save the workstep document.",
    )
    AllowSaveAuditTrail: Optional[bool] = Field(
        None,
        description="If true, the client is allowed to save the audittrail document.",
    )
    AllowPrintDocument: Optional[bool] = Field(
        None,
        description="If true, the client is allowed to print the workstep document.",
    )


class DraftActivityReplaceGeneralPoliciesForSignAction(BaseModel):
    AllowSaveDocument: Optional[bool] = Field(
        None,
        description="If true, the client is allowed to save the workstep document.",
    )
    AllowSaveAuditTrail: Optional[bool] = Field(
        None,
        description="If true, the client is allowed to save the audittrail document.",
    )
    AllowPrintDocument: Optional[bool] = Field(
        None,
        description="If true, the client is allowed to print the workstep document.",
    )
    AllowAdhocPdfAttachments: Optional[bool] = Field(
        None, description="If true, the client is allowed to append adhoc documents."
    )
    AllowRejectWorkstep: Optional[bool] = Field(
        None, description="If true, the client is allowed to reject the workstep."
    )
    AllowUndoLastAction: Optional[bool] = Field(
        None, description="If true, the client is allowed to undo actions."
    )


class DraftActivityReplaceBasicRecipientConfiguration(BaseModel):
    ContactInformation: Optional[DraftActivityReplaceContactInformation] = Field(
        None, description="The contact information of the recipient."
    )
    PersonalMessage: Optional[str] = Field(
        None, description="The personal message for the recipient."
    )
    NotificationChannel: Optional[NotificationChannel] = Field(
        None,
        description="Which channel is used for sending notifications to the recipient.\r\nDefault Email if not specified.",
    )


class EnvelopeStatus(Enum):
    Active = "Active"
    Completed = "Completed"
    Canceled = "Canceled"
    Expired = "Expired"
    Rejected = "Rejected"


class Status(Enum):
    Pending = "Pending"
    Completed = "Completed"
    Rejected = "Rejected"
    Delegated = "Delegated"


class EnvelopeGetSenderUserInformation(BaseModel):
    Email: Optional[str] = Field(None, description="The email address of the sender.")
    GivenName: Optional[str] = Field(None, description="The given name of the sender.")
    Surname: Optional[str] = Field(None, description="The surname of the sender.")


class EnvelopeGetSignAutomatic(BaseModel):
    ProfileId: Optional[str] = Field(
        None, description="The identifier of the profile for the automatic signatures."
    )
    RenderingLanguageCode: Optional[RenderingLanguageCode] = Field(
        None, description="The rendering language for the automatic signatures."
    )


class EnvelopeGetContactInformation(BaseModel):
    Email: Optional[str] = Field(
        None, description="The email address of the recipient."
    )
    GivenName: Optional[str] = Field(
        None, description="The given name of the recipient."
    )
    Surname: Optional[str] = Field(None, description="The surname of the recipient.")
    PhoneNumber: Optional[str] = Field(
        None, description="The phone number of the recipient."
    )
    LanguageCode: Optional[LanguageCode] = Field(
        None, description="The language of the recipient."
    )


class EnvelopeGetLongLivedDisposableCertificateWarning(BaseModel):
    RequestId: Optional[str] = Field(None, description="The identifier of the request.")
    RemoteDeviceId: Optional[str] = Field(
        None, description="The identifier of the remote device."
    )


class EnvelopeGetFilesAuditTrail(BaseModel):
    FileId: Optional[str] = Field(
        None, description="The identifier of the audit trail pdf file."
    )
    XmlFileId: Optional[str] = Field(
        None, description="The identifier of the audit trail xml file."
    )


class EnvelopeGetFilesLegalDocument(BaseModel):
    FileId: Optional[str] = Field(None, description="The identifier of the file.")
    FileName: Optional[str] = Field(None, description="The name of the file.")
    ActivityId: Optional[str] = Field(
        None, description="The identifier of the activity."
    )
    Email: Optional[str] = Field(
        None, description="The email address of the recipient."
    )


class EnvelopeGetFilesDocumentAttachment(BaseModel):
    FileId: Optional[str] = Field(None, description="The identifier of the file.")
    FileName: Optional[str] = Field(None, description="The name of the file.")


class EnvelopeGetHistoryEventRecipient(BaseModel):
    Id: Optional[UUID] = Field(
        None,
        description="The id of the recipient.",
        example="00000000-0000-0000-0000-000000000000",
    )
    Email: Optional[str] = Field(
        None, description="The email address of the recipient."
    )
    GivenName: Optional[str] = Field(
        None, description="The given name of the recipient."
    )
    Surname: Optional[str] = Field(None, description="The surname of the recipient.")


class EnvelopeGetElementsReadPagesConfirmation(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    Required: Optional[bool] = Field(
        None, description="If true, the element is required."
    )
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    DisplayName: Optional[str] = Field(None, description="The displayed name.")
    PageNumber: Optional[int] = Field(
        None, description="The number of the page that needs to be read."
    )
    GuidingOrder: Optional[int] = Field(None, description="The order of the element.")


class EnvelopeGetElementsReadDocumentConfirmation(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    Required: Optional[bool] = Field(
        None, description="If true, the element is required."
    )
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    DisplayName: Optional[str] = Field(None, description="The displayed name.")
    GuidingOrder: Optional[int] = Field(None, description="The order of the element.")


class Type6(Enum):
    None_ = "None"
    Date = "Date"
    Email = "Email"
    Number = "Number"
    Phone = "Phone"
    Time = "Time"


class Type7(Enum):
    International = "International"
    InternationalLeadingZeros = "InternationalLeadingZeros"
    InternationalLeadingPlus = "InternationalLeadingPlus"


class EnvelopeGetElementsPhoneValidationConfiguration(BaseModel):
    Type: Optional[Type7] = Field(None, description="The format of the phone numbers.")


class EnvelopeGetElementsTextFormat(BaseModel):
    TextColor: Optional[str] = Field(
        None,
        description="The color of the text.\r\nSix digit hexadecimal color starting with # in #RRGGBB format according to CSS Color Module Level 4, paragraph 5.2.",
    )
    FontSizeInPt: Optional[float] = Field(
        None, description="The size of the font in points."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    Bold: Optional[bool] = Field(None, description="If true, the bold font is used.")
    Italic: Optional[bool] = Field(
        None, description="If true, the italic font is used."
    )
    TextAlign: Optional[TextAlign] = Field(
        None, description="The alignment of the text. The default alignment is left."
    )


class EnvelopeGetElementsPosition(BaseModel):
    PageNumber: Optional[int] = Field(
        None,
        description="The number of the page where the element is located. It starts with 1.",
    )
    X: Optional[float] = Field(
        None, description="The X coordinate in points. It starts from the left."
    )
    Y: Optional[float] = Field(
        None, description="The Y coordinate in points. It starts from the bottom."
    )


class EnvelopeGetElementsSize(BaseModel):
    Width: Optional[float] = Field(
        None, description="The width of the element in points."
    )
    Height: Optional[float] = Field(
        None, description="The height of the element in points."
    )


class EnvelopeGetElementsChoiceItem(BaseModel):
    ExportValue: Optional[str] = Field(
        None, description="The value of the element when the choice item is selected."
    )
    DisplayValue: Optional[str] = Field(
        None, description="The displayed value of the choice item."
    )


class EnvelopeGetElementsRadioButtonItemDefinition(BaseModel):
    ExportValue: Optional[str] = Field(
        None, description="The value of the element when the radio button is checked."
    )
    IsChecked: Optional[bool] = Field(
        None, description="If true, the radio button is checked by default."
    )
    ReadOnly: Optional[bool] = Field(
        None, description="If true, the element is readonly."
    )
    Position: Optional[EnvelopeGetElementsPosition] = Field(
        None, description="The position of the  within the document."
    )
    Size: Optional[EnvelopeGetElementsSize] = Field(
        None, description="The size of the form field."
    )


class EnvelopeGetElementsATrustCertificateSignatureType(BaseModel):
    TemplateId: Optional[str] = Field(
        None, description="The identifier of the A-Trust template."
    )
    Preferred: Optional[bool] = Field(
        None, description="If true, the signature type is set as preferred."
    )


class EnvelopeGetElementsBiometricSignatureType(BaseModel):
    BiometricVerification: Optional[bool] = Field(
        None, description="If true, a biometric verification is performed."
    )
    AllowBiometricStoringOnly: Optional[bool] = Field(
        None,
        description="If true, the biometric signature might be stored without verification.",
    )
    StoreSignedResponseWithoutBioData: Optional[bool] = Field(
        None,
        description="If true, the signed response is stored without biometric data.",
    )
    BiometricServerUserId: Optional[str] = Field(
        None, description="The identifier of the user on the biometric server."
    )
    SignaturePositioning: Optional[SignaturePositioning] = Field(
        None, description="The allowed positioning of the biometric signature."
    )
    Preferred: Optional[bool] = Field(
        None, description="If true, the signature type is set as preferred."
    )


class EnvelopeGetElementsStampImprintDateConfiguration(BaseModel):
    UseLocalTimezone: Optional[bool] = Field(
        None, description="If true, the local timezone is used."
    )
    DateTimeFormat: Optional[str] = Field(
        None, description="The format of the timestamp."
    )


class EnvelopeGetElementsPredefinedElementDefinition(BaseModel):
    TextFormat: Optional[EnvelopeGetElementsTextFormat] = Field(
        None, description="The configuration of the text format."
    )
    Position: Optional[EnvelopeGetElementsPosition] = Field(
        None, description="The position of the  within the document."
    )
    Size: Optional[EnvelopeGetElementsSize] = Field(
        None, description="The size of the form field."
    )


class EnvelopeGetElementsLinkDefinition(BaseModel):
    Position: Optional[EnvelopeGetElementsPosition] = Field(
        None, description="The position of the  within the document."
    )
    Size: Optional[EnvelopeGetElementsSize] = Field(
        None, description="The size of the form field."
    )


class EnvelopeGetElementsFieldValidationRange(BaseModel):
    From: Optional[str] = Field(None, description="The lower boundary of the range.")
    To: Optional[str] = Field(None, description="The upper boundary of the range.")


class EnvelopeGetElementsClickToSignStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayEmail: Optional[bool] = Field(
        None, description="If true, the email address of the signer is displayed."
    )
    DisplayIp: Optional[bool] = Field(
        None, description="If true, the IP address of the signer is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class EnvelopeGetElementsDrawToSignStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayEmail: Optional[bool] = Field(
        None, description="If true, the email address of the signer is displayed."
    )
    DisplayIp: Optional[bool] = Field(
        None, description="If true, the IP address of the signer is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class EnvelopeGetElementsTypeToSignStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayEmail: Optional[bool] = Field(
        None, description="If true, the email address of the signer is displayed."
    )
    DisplayIp: Optional[bool] = Field(
        None, description="If true, the IP address of the signer is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class EnvelopeGetElementsLocalCertificateStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayIp: Optional[bool] = Field(
        None, description="If true, the IP address of the signer is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class EnvelopeGetElementsDisposableCertificateStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayIp: Optional[bool] = Field(
        None, description="If true, the IP address of the signer is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class EnvelopeGetElementsSwissComOnDemandStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayIp: Optional[bool] = Field(
        None, description="If true, the IP address of the signer is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class EnvelopeGetElementsRemoteCertificateStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayIp: Optional[bool] = Field(
        None, description="If true, the IP address of the signer is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class EnvelopeGetElementsOneTimePasswordStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayTransactionId: Optional[bool] = Field(
        None, description="If true, the transaction identifier is displayed."
    )
    DisplayTransactionToken: Optional[bool] = Field(
        None, description="If true, the transaction token is displayed."
    )
    DisplayPhoneNumber: Optional[bool] = Field(
        None, description="If true, the phone number of the signer is displayed."
    )
    DisplayIp: Optional[bool] = Field(
        None, description="If true, the IP address of the signer is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class EnvelopeGetElementsSwedishBankIdStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayTransactionId: Optional[bool] = Field(
        None, description="If true, the transaction identifier is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class EnvelopeGetElementsPluginStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayEmail: Optional[bool] = Field(
        None, description="If true, the email address of the signer is displayed."
    )
    DisplayIp: Optional[bool] = Field(
        None, description="If true, the IP address of the signer is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class EnvelopeGetViewerLinksViewerLink(BaseModel):
    ActivityId: Optional[str] = Field(
        None, description="The identifier of the activity."
    )
    Email: Optional[str] = Field(
        None, description="The email address of the recipient."
    )
    ViewerLink: Optional[str] = Field(
        None,
        description="The URL to access the SignAnyWhere Viewer for this recipient.",
    )


class EnvelopeGetConfigurationEmailConfiguration(BaseModel):
    Subject: Optional[str] = Field(
        None, description="The subject of the sign notifications."
    )
    Message: Optional[str] = Field(
        None, description="The message of the sign notifications."
    )
    SenderDisplayName: Optional[str] = Field(
        None, description="The displayed name of the sender in the notifications."
    )


class EnvelopeGetConfigurationReminderConfiguration(BaseModel):
    Enabled: Optional[bool] = Field(None, description="If true, reminders are sent.")
    FirstReminderInDays: Optional[int] = Field(
        None,
        description="The amount of days until a reminder is sent to a signer or a viewer after the initial notification.",
    )
    ReminderResendIntervalInDays: Optional[int] = Field(
        None,
        description="The amount of days until a reminder is sent again to a signer or a viewer.",
    )
    BeforeExpirationInDays: Optional[int] = Field(
        None,
        description="The amount of days before the envelope expires and a reminder should be sent.",
    )


class EnvelopeGetConfigurationExpirationConfiguration(BaseModel):
    ExpirationDate: Optional[datetime] = Field(
        None,
        description="The absolute expiration date of the sent envelope.\r\nA datetime in the format RFC 3339, section 5.6, 'date-Time' (e.g. 2017-07-21T17:32:28Z).",
    )


class EnvelopeGetConfigurationSealingConfiguration(BaseModel):
    CertificateId: Optional[str] = Field(None, description="Sealing certificate used.")


class EnvelopeGetConfigurationVisibilityOption(BaseModel):
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    IsHidden: Optional[bool] = Field(
        None, description="If true, the referenced document is hidden for the activity."
    )


class EnvelopeGetConfigurationAgreementTranslation(BaseModel):
    LanguageCode: Optional[LanguageCode] = Field(
        None, description="The language of the translated agreement."
    )
    Text: Optional[str] = Field(None, description="The translated agreement.")
    Header: Optional[str] = Field(
        None, description="The header for the translated agreement."
    )
    IsDefault: Optional[bool] = Field(
        None, description="If true, this translation is used as default."
    )


class EnvelopeGetConfigurationActionCallbackSelection(BaseModel):
    ConfirmTransactionCode: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when a transaction code was sent. This is only used for legacy disposable certificates, after user accepted issuance of disposable certificate.",
    )
    AgreementAccepted: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when the user accepted the agreement.",
    )
    AgreementRejected: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when the user rejected the agreement.",
    )
    PrepareAuthenticationSuccess: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when the preparation of the authentication process succeeded.",
    )
    AuthenticationFailed: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when the user failed to authenticate.",
    )
    AuthenticationSuccess: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when the user succeeded to authenticate.",
    )
    AuditTrailRequested: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when the audit trail was requested.",
    )
    AuditTrailXmlRequested: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when the audit trail XML was requested.",
    )
    CalledPage: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when the SignAnyWhere Viewer was requested.",
    )
    DocumentDownloaded: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when the document download was requested.",
    )
    FlattenedDocumentDownloaded: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when the flattened document download was requested.",
    )
    AddedAnnotation: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when an annotation was added.",
    )
    AddedAttachment: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when an attachment was added.",
    )
    AppendedDocument: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when a document was appended.",
    )
    FormsFilled: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when a form field was filled.",
    )
    ConfirmReading: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when a reading task was completed.",
    )
    SendTransactionCode: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when a transaction code for a signature with type TransactionCode was sent using the TransactionCodeSenderPlugin.",
    )
    PrepareSignWorkstepDocument: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when a signature was prepared for signing.",
    )
    SignWorkstepDocument: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when a signature was applied.",
    )
    UndoAction: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when an action was undone.",
    )
    WorkstepCreated: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when a workstep was created.",
    )
    WorkstepFinished: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when a workstep was finished.",
    )
    WorkstepRejected: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when a workstep was rejected.",
    )
    DisablePolicyAndValidityChecks: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when policy and validity checks were disabled.",
    )
    EnablePolicyAndValidityChecks: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when policy and validity checks were enabled.",
    )
    AppendFileToWorkstep: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when a file was appended to the workstep.",
    )
    AppendTasksToWorkstep: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when a task was added to the workstep.",
    )
    SetOptionalDocumentState: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when an optional document became either active or inactive.",
    )
    PreparePayloadForBatch: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when the payload was prepared for batch signing.",
    )


class EnvelopeGetConfigurationBasicRecipientConfiguration(BaseModel):
    PersonalMessage: Optional[str] = Field(
        None, description="The personal message for the recipient."
    )
    NotificationChannel: Optional[NotificationChannel] = Field(
        None,
        description="Which channel is used for sending notifications to the recipient.",
    )


class EnvelopeGetConfigurationBatchConfiguration(BaseModel):
    Mode: Optional[Mode] = Field(
        None, description="The mode, that will be used for batch signing."
    )
    RequireScrollingOverAllSignaturesBeforeSigning: Optional[bool] = Field(
        None,
        description="If true, the user has to review all signatures in the batch signing dialog before signing.\r\nThis is only applicable when the <code>Mode</code> is set to <code>OptIn</code> or <code>OptOut</code>.",
    )


class EnvelopeGetConfigurationGeneralPoliciesForSignAction(BaseModel):
    AllowSaveDocument: Optional[bool] = Field(
        None,
        description="If true, the client is allowed to save the workstep document.",
    )
    AllowSaveAuditTrail: Optional[bool] = Field(
        None,
        description="If true, the client is allowed to save the audittrail document.",
    )
    AllowPrintDocument: Optional[bool] = Field(
        None,
        description="If true, the client is allowed to print the workstep document.",
    )
    AllowAdhocPdfAttachments: Optional[bool] = Field(
        None, description="If true, the client is allowed to append adhoc documents."
    )
    AllowRejectWorkstep: Optional[bool] = Field(
        None, description="If true, the client is allowed to reject the workstep."
    )
    AllowUndoLastAction: Optional[bool] = Field(
        None, description="If true, the client is allowed to undo actions."
    )


class EnvelopeGetConfigurationGeneralPoliciesForViewAction(BaseModel):
    AllowSaveDocument: Optional[bool] = Field(
        None,
        description="If true, the client is allowed to save the workstep document.",
    )
    AllowSaveAuditTrail: Optional[bool] = Field(
        None,
        description="If true, the client is allowed to save the audittrail document.",
    )
    AllowPrintDocument: Optional[bool] = Field(
        None,
        description="If true, the client is allowed to print the workstep document.",
    )


class EnvelopeGetConfigurationGeneralPoliciesForP7MAction(BaseModel):
    AllowSaveDocument: Optional[bool] = Field(
        None,
        description="If true, the client is allowed to save the workstep document.",
    )
    AllowSaveAuditTrail: Optional[bool] = Field(
        None,
        description="If true, the client is allowed to save the audittrail document.",
    )
    AllowPrintDocument: Optional[bool] = Field(
        None,
        description="If true, the client is allowed to print the workstep document.",
    )
    AllowAdhocPdfAttachments: Optional[bool] = Field(
        None, description="If true, the client is allowed to append adhoc documents."
    )
    AllowRejectWorkstep: Optional[bool] = Field(
        None, description="If true, the client is allowed to reject the workstep."
    )
    AllowUndoLastAction: Optional[bool] = Field(
        None, description="If true, the client is allowed to undo actions."
    )
    AllowDownloadOfSignedP7MFiles: Optional[bool] = Field(
        None, description="If true, the client is allowed to download signed p7m files."
    )


class EnvelopeGetConfigurationEmailAppLinks(BaseModel):
    Android: Optional[bool] = Field(
        None, description="If true, an Android app link is added to the email message."
    )
    iOS: Optional[bool] = Field(
        None, description="If true, an iOS app link is added to the email message."
    )
    Windows: Optional[bool] = Field(
        None, description="If true, a Windows app link is added to the email message."
    )


class EnvelopeGetConfigurationWebFinishAction(BaseModel):
    RedirectUri: Optional[str] = Field(None, description="The redirect uri.")


class EnvelopeGetConfigurationAppFinishAction(BaseModel):
    RemoveDocumentFromRecentDocumentList: Optional[bool] = Field(
        None,
        description="If true, the document will be removed from the recent document list.",
    )
    CallClientActionOnlyAfterSuccessfulSync: Optional[bool] = Field(
        None,
        description="If true, the client action will be called only after a successful sync.",
    )
    CloseApp: Optional[bool] = Field(
        None, description="If true, the app will be closed."
    )
    RedirectUri: Optional[str] = Field(None, description="The redirect uri.")


class EnvelopeGetConfigurationKioskFinishAction(BaseModel):
    RedirectUri: Optional[str] = Field(None, description="The redirect uri.")


class EnvelopeGetConfigurationDisposableCertificateSignatureData(BaseModel):
    DocumentIssuingCountry: Optional[str] = Field(
        None,
        description="The issuing country of the document.\r\nWill be used as country of residence, if lean is disabled.",
    )
    IdentificationIssuingCountry: Optional[str] = Field(
        None, description="The issuing country of the identification."
    )
    IdentificationType: Optional[IdentificationType] = Field(
        None, description="The type of identification in use."
    )
    PhoneNumber: Optional[str] = Field(
        None, description="The phone number registered for identification."
    )
    DocumentType: Optional[DocumentType] = Field(
        None, description="The type of document used for the identification."
    )
    DocumentIssuedBy: Optional[str] = Field(
        None, description="The authority that issued the document."
    )
    DocumentIssuedOn: Optional[datetime] = Field(
        None,
        description="The date when the document has been issued.\r\nA date in the format RFC 3339, section 5.6, 'full-date' (e.g. 2017-07-21).",
    )
    DocumentExpiryDate: Optional[datetime] = Field(
        None,
        description="The expiration date of the document.\r\nA date in the format RFC 3339, section 5.6, 'full-date' (e.g. 2017-07-21).",
    )
    SerialNumber: Optional[str] = Field(
        None, description="The serial number of the certificate."
    )
    DocumentNumber: Optional[str] = Field(
        None, description="The identifier of the document."
    )


class EnvelopeGetConfigurationRemoteCertificateSignatureData(BaseModel):
    UserId: Optional[str] = Field(None, description="The identifier of the user.")
    DeviceId: Optional[str] = Field(None, description="The identifier of the device.")


class EnvelopeGetConfigurationSwissComOnDemandSignatureData(BaseModel):
    PhoneNumber: Optional[str] = Field(None, description="The phone number.")
    CommonName: Optional[str] = Field(
        None, description="The name of the certificate that is created or checked."
    )
    Country: Optional[str] = Field(None, description="The country.")
    Locality: Optional[str] = Field(None, description="The locality.")
    OrganizationUnit: Optional[str] = Field(
        None, description="The organizational unit."
    )
    Organization: Optional[str] = Field(None, description="The organization.")
    SerialNumber: Optional[str] = Field(None, description="The serial number.")
    StateOrProvince: Optional[str] = Field(None, description="The state or province.")
    Pseudonym: Optional[str] = Field(
        None, description="A name or key that uniquely identifies the user."
    )


class EnvelopeGetConfigurationSmsOneTimePasswordSignatureData(BaseModel):
    PhoneNumber: Optional[str] = Field(
        None,
        description="The phone number to which the one time password will be sent.",
    )


class EnvelopeGetConfigurationATrustCertificateSignatureData(BaseModel):
    PhoneNumber: Optional[str] = Field(
        None, description="The phone number of the recipient."
    )


class EnvelopeGetConfigurationSwedishBankIdSignatureData(BaseModel):
    PersonalNumber: Optional[str] = Field(
        None, description="The personal number for signing."
    )
    AllowAnyPersonalNumber: Optional[bool] = Field(
        None,
        description="If true, the personal number can be edited by the recipient.\r\nIf the personal number is empty and can be edited, a QR code for scanning is provided.",
    )


class EnvelopeGetConfigurationAccessCodeAuthentication(BaseModel):
    Code: Optional[str] = Field(
        None, description="The code for authenticating the recipient."
    )


class EnvelopeGetConfigurationSmsOneTimePasswordAuthentication(BaseModel):
    PhoneNumber: Optional[str] = Field(
        None,
        description="The phone number to which the one time password will be sent.",
    )


class EnvelopeGetConfigurationSwedishBankIdAuthentication(BaseModel):
    PersonalNumber: Optional[str] = Field(
        None, description="The personal number for the authentication."
    )
    AllowAnyPersonalNumber: Optional[bool] = Field(
        None,
        description="If true, the personal number can be edited by the recipient.\r\nIf the personal number is empty and can be edited, a QR code for scanning is provided.",
    )


class EnvelopeGetConfigurationSignaturePluginParameter(BaseModel):
    Key: Optional[str] = Field(None, description="The identifier of the parameter.")
    Value: Optional[str] = Field(None, description="The value of the parameter.")


class EnvelopeGetConfigurationAuthenticationValidation(BaseModel):
    FieldReferenceId: Optional[str] = Field(
        None, description="The identifier of the field."
    )
    ExpectedValue: Optional[str] = Field(
        None, description="The expected value of the field."
    )


class Status1(Enum):
    Canceled = "Canceled"
    Completed = "Completed"
    Expired = "Expired"
    Rejected = "Rejected"
    ActionRequired = "ActionRequired"
    WaitingForOthers = "WaitingForOthers"
    ExpiringSoon = "ExpiringSoon"
    Active = "Active"


class EnvelopeFindRequest(BaseModel):
    StartDate: Optional[datetime] = Field(
        None,
        description="If set, filter for envelopes which were sent after the start date.\r\nA datetime in the format RFC 3339, section 5.6, 'date-Time' (e.g. 2017-07-21T17:32:28Z).",
    )
    EndDate: Optional[datetime] = Field(
        None,
        description="If set, filter for envelopes which were sent before the end date.\r\nA datetime in the format RFC 3339, section 5.6, 'date-Time' (e.g. 2017-07-21T17:32:28Z).",
    )
    SearchText: Optional[str] = Field(
        None,
        description="If set, the given text is searched in following fields:\r\nenvelope name and description\r\nnotification subject and message \r\nsender email address, given name and surname  \r\nrecipient email address, given name and surname\r\nNote: Using this search option is very resource intensive! It might take very long.",
    )
    Status: Optional[Status1] = Field(
        None, description="If set, envelopes in the given status are matched."
    )
    InStatusSinceDays: Optional[int] = Field(
        None,
        description="If set, envelopes having the given status for the specified days are matched.\r\nIt must be combined with Status.",
    )
    SenderEmail: Optional[str] = Field(
        None,
        description="If set, envelopes sent by the user with the given email address are matched.",
    )
    CompletedByRecipientWithEmail: Optional[str] = Field(
        None,
        description="If set, envelopes containing a completed activity, belonging to a recipient with the given email address, are matched.",
    )
    RecipientEmail: Optional[str] = Field(
        None,
        description="If set, envelopes containing a recipient with the given email address are matched.",
    )
    WaitingForRecipientWithEmail: Optional[str] = Field(
        None,
        description="If set, envelopes waiting for the recipient with the given email address are matched.",
    )
    EnvelopeBulkParentId: Optional[str] = Field(
        None,
        description="If set, envelopes belonging to the given BulkParent envelope are matched.",
    )


class Status2(Enum):
    Active = "Active"
    Completed = "Completed"
    Canceled = "Canceled"
    Expired = "Expired"
    Rejected = "Rejected"


class EnvelopeFindEnvelope(BaseModel):
    Status: Optional[Status2] = Field(None, description="The status of the envelope.")
    Id: Optional[str] = Field(None, description="The identifier of the envelope.")
    Name: Optional[str] = Field(None, description="The name of the envelope.")
    MetaData: Optional[str] = Field(None, description="The metadata of the envelope.")
    EnvelopeBulkParentId: Optional[str] = Field(
        None,
        description="The identifier of the BulkParent envelope.\r\nOnly set, if the envelope is part of a bulk.",
    )
    IsExpiringSoon: Optional[bool] = Field(
        None,
        description="If true, the envelope will expire within the configured time period  [Configuration key: filterExpiringSoonDays, Default: 4 days].",
    )


class EnvelopeSendDocument(BaseModel):
    FileId: str = Field(..., description="The identifier of the file.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The document number.\r\nIf the document number is 0 for all documents, the order of the documents is used as number.\r\nThe document number must not be duplicated.\r\nThe document number must be set for all documents or none.",
    )


class EnvelopeSendEmailConfiguration(BaseModel):
    Subject: Optional[str] = Field(
        None, description="The subject of the sign notifications."
    )
    Message: Optional[str] = Field(
        None, description="The message of the sign notifications."
    )
    SenderDisplayName: Optional[str] = Field(
        None, description="The displayed name of the sender in the notifications."
    )


class EnvelopeSendSealingConfiguration(BaseModel):
    CertificateId: Optional[str] = Field(
        None, description="Custom Sealing certificate identifier."
    )


class EnvelopeSendVisibilityOption(BaseModel):
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    IsHidden: Optional[bool] = Field(
        None, description="If true, the referenced document is hidden for the activity."
    )


class EnvelopeSendAgreementTranslation(BaseModel):
    LanguageCode: LanguageCode = Field(
        ..., description="The language of the translated agreement."
    )
    Text: str = Field(..., description="The translated agreement.")
    Header: Optional[str] = Field(
        None, description="The header for the translated agreement."
    )
    IsDefault: Optional[bool] = Field(
        None, description="If true, this translation is used as default."
    )


class Type8(Enum):
    None_ = "None"
    Date = "Date"
    Email = "Email"
    Number = "Number"
    Phone = "Phone"
    Time = "Time"


class EnvelopeSendPosition(BaseModel):
    PageNumber: Optional[int] = Field(
        None,
        description="The number of the page where the element is located. It starts with 1.",
    )
    X: float = Field(
        ..., description="The X coordinate in points. It starts from the left."
    )
    Y: float = Field(
        ..., description="The Y coordinate in points. It starts from the bottom."
    )


class EnvelopeSendSize(BaseModel):
    Width: float = Field(..., description="The width of the element in points.")
    Height: float = Field(..., description="The height of the element in points.")


class EnvelopeSendChoiceItem(BaseModel):
    ExportValue: Optional[str] = Field(
        None, description="The value of the element when the choice item is selected."
    )
    DisplayValue: str = Field(
        ..., description="The displayed value of the choice item."
    )


class EnvelopeSendBatchConfiguration(BaseModel):
    Mode: Optional[Mode] = Field(
        None, description="The mode, that will be used for batch signing."
    )
    RequireScrollingOverAllSignaturesBeforeSigning: Optional[bool] = Field(
        None,
        description="If true, the user has to review all signatures in the batch signing dialog before signing.\r\nThis is only applicable when the <code>Mode</code> is set to <code>OptIn</code> or <code>OptOut</code>.",
    )


class EnvelopeSendFieldValidationRange(BaseModel):
    From: Optional[str] = Field(None, description="The lower boundary of the range.")
    To: Optional[str] = Field(None, description="The upper boundary of the range.")


class EnvelopeSendSignatureFieldDefinition(BaseModel):
    Position: EnvelopeSendPosition = Field(
        ..., description="The position of the element within the document."
    )
    Size: EnvelopeSendSize = Field(..., description="The size of the element.")


class EnvelopeSendClientFinishAction(BaseModel):
    RedirectUri: Optional[str] = Field(None, description="The redirect uri.")


class EnvelopeSendAppFinishAction(BaseModel):
    RemoveDocumentFromRecentDocumentList: Optional[bool] = Field(
        None,
        description="If true, the document will be removed from the recent document list.",
    )
    CallClientActionOnlyAfterSuccessfulSync: Optional[bool] = Field(
        None,
        description="If true, the client action will be called only after a successful sync.",
    )
    CloseApp: Optional[bool] = Field(
        None, description="If true, the app will be closed."
    )
    RedirectUri: Optional[str] = Field(None, description="The redirect uri.")


class EnvelopeSendKioskFinishAction(BaseModel):
    RedirectUri: Optional[str] = Field(None, description="The redirect uri.")


class EnvelopeSendRemoteCertificateSignatureData(BaseModel):
    UserId: Optional[str] = Field(None, description="The identifier of the user.")
    DeviceId: Optional[str] = Field(None, description="The identifier of the device.")


class EnvelopeSendSwissComOnDemandSignatureData(BaseModel):
    PhoneNumber: Optional[str] = Field(None, description="The phone number.")
    CommonName: Optional[str] = Field(
        None, description="The name of the certificate that is created or checked."
    )
    Country: Optional[str] = Field(None, description="The country.")
    Locality: Optional[str] = Field(None, description="The locality.")
    OrganizationUnits: Optional[List[OrganizationUnit]] = Field(
        None, description="The organizational units.", max_items=228
    )
    Organization: Optional[str] = Field(None, description="The organization.")
    SerialNumber: Optional[str] = Field(None, description="The serial number.")
    StateOrProvince: Optional[str] = Field(None, description="The state or province.")
    Pseudonym: Optional[str] = Field(
        None, description="A name or key that uniquely identifies the user."
    )


class EnvelopeSendSmsOneTimePasswordSignatureData(BaseModel):
    PhoneNumber: Optional[str] = Field(
        None,
        description="The phone number to which the one time password will be sent.",
    )


class EnvelopeSendATrustCertificateSignatureData(BaseModel):
    PhoneNumber: Optional[str] = Field(
        None, description="The phone number of the recipient."
    )


class EnvelopeSendSwedishBankIdSignatureData(BaseModel):
    PersonalNumber: Optional[str] = Field(
        None, description="The personal number for signing."
    )
    AllowAnyPersonalNumber: Optional[bool] = Field(
        None,
        description="If true, the personal number can be edited by the recipient.\r\nIf the personal number is empty and can be edited, a QR code for scanning is provided.",
    )


class EnvelopeSendAccessCodeAuthentication(BaseModel):
    Code: str = Field(..., description="The code for authenticating the recipient.")


class EnvelopeSendSmsOneTimePasswordAuthentication(BaseModel):
    PhoneNumber: Optional[str] = Field(
        None,
        description="The phone number to which the one time password will be sent.",
    )


class EnvelopeSendSwedishBankIdAuthentication(BaseModel):
    PersonalNumber: Optional[str] = Field(
        None, description="The personal number for the authentication."
    )
    AllowAnyPersonalNumber: Optional[bool] = Field(
        None,
        description="If true, the personal number can be edited by the recipient.\r\nIf the personal number is empty and can be edited, a QR code for scanning is provided.",
    )


class EnvelopeSendAttachmentDefinition(BaseModel):
    Position: EnvelopeSendPosition = Field(
        ..., description="The position of the element within the document."
    )
    Size: EnvelopeSendSize = Field(..., description="The size of the element.")


class EnvelopeSendReadingAreaDefinition(BaseModel):
    Position: EnvelopeSendPosition = Field(
        ..., description="The position of the element within the document."
    )
    Size: EnvelopeSendSize = Field(..., description="The size of the element.")


class EnvelopeSendSignaturePluginParameter(BaseModel):
    Key: Optional[str] = Field(None, description="The identifier of the parameter.")
    Value: Optional[str] = Field(None, description="The value of the parameter.")


class EnvelopeSendAuthenticationValidation(BaseModel):
    FieldReferenceId: Optional[str] = Field(
        None, description="The identifier of the field."
    )
    ExpectedValue: Optional[str] = Field(
        None, description="The expected value of the field."
    )


class EnvelopeSendLinkDefinition(BaseModel):
    Position: EnvelopeSendPosition = Field(
        ..., description="The position of the element within the document."
    )
    Size: EnvelopeSendSize = Field(..., description="The size of the element.")


class EnvelopeSendPluginStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayEmail: Optional[bool] = Field(
        None, description="If true, the email address of the signer is displayed."
    )
    DisplayIp: Optional[bool] = Field(
        None, description="If true, the IP address of the signer is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class EnvelopeSendSwedishBankIdStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayTransactionId: Optional[bool] = Field(
        None, description="If true, the transaction identifier is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class EnvelopeSendOneTimePasswordStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayTransactionId: Optional[bool] = Field(
        None, description="If true, the transaction identifier is displayed."
    )
    DisplayTransactionToken: Optional[bool] = Field(
        None, description="If true, the transaction token is displayed."
    )
    DisplayPhoneNumber: Optional[bool] = Field(
        None, description="If true, the phone number of the signer is displayed."
    )
    DisplayIp: Optional[bool] = Field(
        None, description="If true, the IP address of the signer is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class EnvelopeSendRemoteCertificateStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayIp: Optional[bool] = Field(
        None, description="If true, the IP address of the signer is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class EnvelopeSendSwissComOnDemandStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayIp: Optional[bool] = Field(
        None, description="If true, the IP address of the signer is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class EnvelopeSendDisposableCertificateStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayIp: Optional[bool] = Field(
        None, description="If true, the IP address of the signer is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class EnvelopeSendLocalCertificateStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayIp: Optional[bool] = Field(
        None, description="If true, the IP address of the signer is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class EnvelopeSendTypeToSignStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayEmail: Optional[bool] = Field(
        None, description="If true, the email address of the signer is displayed."
    )
    DisplayIp: Optional[bool] = Field(
        None, description="If true, the IP address of the signer is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class EnvelopeSendDrawToSignStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayEmail: Optional[bool] = Field(
        None, description="If true, the email address of the signer is displayed."
    )
    DisplayIp: Optional[bool] = Field(
        None, description="If true, the IP address of the signer is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class EnvelopeSendClickToSignStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayEmail: Optional[bool] = Field(
        None, description="If true, the email address of the signer is displayed."
    )
    DisplayIp: Optional[bool] = Field(
        None, description="If true, the IP address of the signer is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class EnvelopeSendStampImprintDateConfiguration(BaseModel):
    UseLocalTimezone: Optional[bool] = Field(
        None, description="If true, the local timezone is used."
    )
    DateTimeFormat: Optional[str] = Field(
        None, description="The format of the timestamp."
    )


class EnvelopeSendSignaturePluginSignatureType(BaseModel):
    PluginId: Optional[str] = Field(None, description="The identifier of the plugin.")
    Preferred: Optional[bool] = Field(
        None,
        description="If true, the signature type is set as preferred.\r\nOnly one signature type may be marked.",
    )
    StampImprintConfiguration: Optional[EnvelopeSendPluginStampImprint] = Field(
        None, description="The configuration of the stamp imprint of the signature."
    )


class EnvelopeSendSwedishBankIdSignatureType(BaseModel):
    Preferred: Optional[bool] = Field(
        None,
        description="If true, the signature type is set as preferred.\r\nOnly one signature type may be marked.",
    )
    StampImprintConfiguration: Optional[EnvelopeSendSwedishBankIdStampImprint] = Field(
        None, description="The configuration of the stamp imprint of the signature."
    )


class EnvelopeSendOneTimePasswordSignatureType(BaseModel):
    ValidityInSeconds: Optional[int] = Field(
        None, description="The validity of the password in seconds."
    )
    UseExternalSignatureImage: Optional[UseExternalSignatureImage] = Field(
        None, description="The external signature image mode."
    )
    Preferred: Optional[bool] = Field(
        None,
        description="If true, the signature type is set as preferred.\r\nOnly one signature type may be marked.",
    )
    StampImprintConfiguration: Optional[EnvelopeSendOneTimePasswordStampImprint] = (
        Field(
            None, description="The configuration of the stamp imprint of the signature."
        )
    )


class EnvelopeSendRemoteCertificateSignatureType(BaseModel):
    ValidityInSeconds: Optional[int] = Field(
        None, description="The validity of the certificate in seconds."
    )
    UseExternalSignatureImage: Optional[UseExternalSignatureImage] = Field(
        None, description="The external signature image mode."
    )
    Preferred: Optional[bool] = Field(
        None,
        description="If true, the signature type is set as preferred.\r\nOnly one signature type may be marked.",
    )
    StampImprintConfiguration: Optional[EnvelopeSendRemoteCertificateStampImprint] = (
        Field(
            None, description="The configuration of the stamp imprint of the signature."
        )
    )


class EnvelopeSendBiometricSignatureType(BaseModel):
    BiometricVerification: Optional[bool] = Field(
        None, description="If true, a biometric verification is performed."
    )
    AllowBiometricStoringOnly: Optional[bool] = Field(
        None,
        description="If true, the biometric signature might be stored without verification.",
    )
    StoreSignedResponseWithoutBioData: Optional[bool] = Field(
        None,
        description="If true, the signed response is stored without biometric data.",
    )
    BiometricServerUserId: Optional[str] = Field(
        None, description="The identifier of the user on the biometric server."
    )
    SignaturePositioning: Optional[SignaturePositioning] = Field(
        None, description="The allowed positioning of the biometric signature."
    )
    Preferred: Optional[bool] = Field(
        None,
        description="If true, the signature type is set as preferred.\r\nOnly one signature type may be marked.",
    )


class EnvelopeSendATrustCertificateSignatureType(BaseModel):
    TemplateId: Optional[str] = Field(
        None, description="The identifier of the A-Trust template."
    )
    Preferred: Optional[bool] = Field(
        None,
        description="If true, the signature type is set as preferred.\r\nOnly one signature type may be marked.",
    )


class EnvelopeSendSwissComOnDemandSignatureType(BaseModel):
    ValidityInSeconds: Optional[int] = Field(
        None, description="The validity of the certificate in seconds."
    )
    Preferred: Optional[bool] = Field(
        None,
        description="If true, the signature type is set as preferred.\r\nOnly one signature type may be marked.",
    )
    StampImprintConfiguration: Optional[EnvelopeSendSwissComOnDemandStampImprint] = (
        Field(
            None, description="The configuration of the stamp imprint of the signature."
        )
    )


class EnvelopeSendDisposableCertificateSignatureType(BaseModel):
    IsLongLived: Optional[bool] = Field(
        None, description="If true, the disposable certificate is long lived."
    )
    ValidityInSeconds: Optional[int] = Field(
        None, description="The validity of the certificate in seconds."
    )
    UseExternalSignatureImage: Optional[UseExternalSignatureImage] = Field(
        None, description="The external signature image mode."
    )
    Preferred: Optional[bool] = Field(
        None,
        description="If true, the signature type is set as preferred.\r\nOnly one signature type may be marked.",
    )
    StampImprintConfiguration: Optional[
        EnvelopeSendDisposableCertificateStampImprint
    ] = Field(
        None, description="The configuration of the stamp imprint of the signature."
    )


class EnvelopeSendLocalCertificateSignatureType(BaseModel):
    EnforcePreferredHashAlgorithm: Optional[bool] = Field(
        None,
        description="If true, the usage of the preferred hash algorithm is enforced.",
    )
    PreferredHashAlgorithm: Optional[PreferredHashAlgorithm] = Field(
        None, description="The preferred hash algorithm."
    )
    UseExternalSignatureImage: Optional[UseExternalSignatureImage] = Field(
        None, description="The external signature image mode."
    )
    Preferred: Optional[bool] = Field(
        None,
        description="If true, the signature type is set as preferred.\r\nOnly one signature type may be marked.",
    )
    StampImprintConfiguration: Optional[EnvelopeSendLocalCertificateStampImprint] = (
        Field(
            None, description="The configuration of the stamp imprint of the signature."
        )
    )


class EnvelopeSendTypeToSignSignatureType(BaseModel):
    UseExternalSignatureImage: Optional[UseExternalSignatureImage] = Field(
        None, description="The external signature image mode."
    )
    Preferred: Optional[bool] = Field(
        None,
        description="If true, the signature type is set as preferred.\r\nOnly one signature type may be marked.",
    )
    StampImprintConfiguration: Optional[EnvelopeSendTypeToSignStampImprint] = Field(
        None, description="The configuration of the stamp imprint of the signature."
    )


class EnvelopeSendDrawToSignSignatureType(BaseModel):
    UseExternalSignatureImage: Optional[UseExternalSignatureImage] = Field(
        None, description="The external signature image mode."
    )
    Preferred: Optional[bool] = Field(
        None,
        description="If true, the signature type is set as preferred.\r\nOnly one signature type may be marked.",
    )
    StampImprintConfiguration: Optional[EnvelopeSendDrawToSignStampImprint] = Field(
        None, description="The configuration of the stamp imprint of the signature."
    )


class EnvelopeSendClickToSignSignatureType(BaseModel):
    UseExternalSignatureImage: Optional[UseExternalSignatureImage] = Field(
        None, description="The external signature image mode."
    )
    Preferred: Optional[bool] = Field(
        None,
        description="If true, the signature type is set as preferred.\r\nOnly one signature type may be marked.",
    )
    StampImprintConfiguration: Optional[EnvelopeSendClickToSignStampImprint] = Field(
        None, description="The configuration of the stamp imprint of the signature."
    )


class EnvelopeSendDisposableCertificateSignatureData(BaseModel):
    DocumentIssuingCountry: Optional[str] = Field(
        None,
        description="The issuing country of the document.\r\nWill be used as country of residence, if lean is disabled.",
    )
    IdentificationIssuingCountry: Optional[str] = Field(
        None, description="The issuing country of the identification."
    )
    IdentificationType: Optional[IdentificationType] = Field(
        None, description="The type of identification in use."
    )
    PhoneNumber: Optional[str] = Field(
        None, description="The phone number registered for identification."
    )
    DocumentType: Optional[DocumentType] = Field(
        None, description="The type of document used for the identification."
    )
    DocumentIssuedBy: Optional[str] = Field(
        None, description="The authority that issued the document."
    )
    DocumentIssuedOn: Optional[datetime] = Field(
        None,
        description="The date when the document has been issued.\r\nA date in the format RFC 3339, section 5.6, 'full-date' (e.g. 2017-07-21).",
    )
    DocumentExpiryDate: Optional[datetime] = Field(
        None,
        description="The expiration date of the document.\r\nA date in the format RFC 3339, section 5.6, 'full-date' (e.g. 2017-07-21).",
    )
    SerialNumber: Optional[str] = Field(
        None, description="The serial number of the certificate."
    )
    DocumentNumber: Optional[str] = Field(
        None, description="The identifier of the document."
    )


class EnvelopeSendReadDocumentConfirmation(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    Required: Optional[bool] = Field(
        None, description="If true, the element is required."
    )
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    DisplayName: Optional[str] = Field(None, description="The displayed name.")
    GuidingOrder: Optional[int] = Field(None, description="The order of the element.")


class EnvelopeSendReadPagesConfirmation(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    Required: Optional[bool] = Field(
        None, description="If true, the element is required."
    )
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    DisplayName: Optional[str] = Field(None, description="The displayed name.")
    PageNumber: Optional[int] = Field(
        None,
        description="The number of the page that needs to be read. Starting with 1.",
    )
    GuidingOrder: Optional[int] = Field(None, description="The order of the element.")


class EnvelopeSendReadAreaConfirmation(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    Required: Optional[bool] = Field(
        None, description="If true, the element is required."
    )
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    DisplayName: Optional[str] = Field(None, description="The displayed name.")
    GuidingOrder: Optional[int] = Field(None, description="The order of the element.")
    Definition: Optional[EnvelopeSendReadingAreaDefinition] = Field(
        None,
        description="The definition of the area.\r\nWhen adding a new element, it has to be specified .\r\nWhen the field already exists, it must not be specified.",
    )


class EnvelopeSendAttachment(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    Required: Optional[bool] = Field(
        None, description="If true, the element is required."
    )
    DisplayName: Optional[str] = Field(None, description="The displayed name.")
    DisplayIconType: Optional[DisplayIconType] = Field(
        None,
        description="The type of the displayed icon. If no icon is provided Paperclip will be used.",
    )
    GuidingOrder: Optional[int] = Field(None, description="The order of the element.")
    FieldDefinition: Optional[EnvelopeSendAttachmentDefinition] = Field(
        None,
        description="The definition of the attachment element.\r\nIt must be specified when the attachment element is added.\r\nIt must not be specified when the attachment element already exists.",
    )


class EnvelopeSendEmailAppLinks(BaseModel):
    Android: Optional[bool] = Field(
        None, description="If true, an Android app link is added to the email message."
    )
    iOS: Optional[bool] = Field(
        None, description="If true, an iOS app link is added to the email message."
    )
    Windows: Optional[bool] = Field(
        None, description="If true, a Windows app link is added to the email message."
    )


class EnvelopeSendContactInformation(BaseModel):
    Email: str = Field(..., description="The email address of the recipient.")
    GivenName: str = Field(..., description="The given name of the recipient.")
    Surname: str = Field(..., description="The surname of the recipient.")
    PhoneNumber: Optional[str] = Field(
        None, description="The phone number of the recipient."
    )
    LanguageCode: Optional[LanguageCode] = Field(
        None, description="The language of the recipient."
    )


class EnvelopeSendGeneralPoliciesForP7MAction(BaseModel):
    AllowSaveDocument: Optional[bool] = Field(
        None,
        description="If true, the client is allowed to save the workstep document.",
    )
    AllowSaveAuditTrail: Optional[bool] = Field(
        None,
        description="If true, the client is allowed to save the audittrail document.",
    )
    AllowPrintDocument: Optional[bool] = Field(
        None,
        description="If true, the client is allowed to print the workstep document.",
    )
    AllowAdhocPdfAttachments: Optional[bool] = Field(
        None, description="If true, the client is allowed to append adhoc documents."
    )
    AllowRejectWorkstep: Optional[bool] = Field(
        None, description="If true, the client is allowed to reject the workstep."
    )
    AllowUndoLastAction: Optional[bool] = Field(
        None, description="If true, the client is allowed to undo actions."
    )
    AllowDownloadOfSignedP7MFiles: Optional[bool] = Field(
        None, description="If true, the client is allowed to download signed p7m files."
    )


class EnvelopeSendGeneralPoliciesForViewAction(BaseModel):
    AllowSaveDocument: Optional[bool] = Field(
        None,
        description="If true, the client is allowed to save the workstep document.",
    )
    AllowSaveAuditTrail: Optional[bool] = Field(
        None,
        description="If true, the client is allowed to save the audittrail document.",
    )
    AllowPrintDocument: Optional[bool] = Field(
        None,
        description="If true, the client is allowed to print the workstep document.",
    )


class EnvelopeSendGeneralPoliciesForSignAction(BaseModel):
    AllowSaveDocument: Optional[bool] = Field(
        None,
        description="If true, the client is allowed to save the workstep document.",
    )
    AllowSaveAuditTrail: Optional[bool] = Field(
        None,
        description="If true, the client is allowed to save the audittrail document.",
    )
    AllowPrintDocument: Optional[bool] = Field(
        None,
        description="If true, the client is allowed to print the workstep document.",
    )
    AllowAdhocPdfAttachments: Optional[bool] = Field(
        None, description="If true, the client is allowed to append adhoc documents."
    )
    AllowRejectWorkstep: Optional[bool] = Field(
        None, description="If true, the client is allowed to reject the workstep."
    )
    AllowUndoLastAction: Optional[bool] = Field(
        None, description="If true, the client is allowed to undo actions."
    )


class EnvelopeSendVisibleSignature(BaseModel):
    DocumentNumber: int = Field(
        ...,
        description="The reference number of the containing document. It starts with 1.",
    )
    UseExternalTimestampServer: Optional[bool] = Field(
        None,
        description="If true, a timestamp from an external server is embedded into the signature.",
    )
    FieldDefinition: EnvelopeSendSignatureFieldDefinition = Field(
        ...,
        description="The definition of the signature field.\r\nIt must be specified when the signature field is added.\r\nIt must not be specified when the signature field already exists.",
    )


class EnvelopeSendBasicRecipientConfiguration(BaseModel):
    ContactInformation: EnvelopeSendContactInformation = Field(
        ..., description="The contact information of the recipient."
    )
    PersonalMessage: Optional[str] = Field(
        None, description="The personal message for the recipient."
    )
    NotificationChannel: Optional[NotificationChannel] = Field(
        None,
        description="Which channel is used for sending notifications to the recipient.\r\nDefault Email if not specified.",
    )


class EnvelopeSendRadioButtonItemDefinition(BaseModel):
    ExportValue: Optional[str] = Field(
        None, description="The value of the element when the radio button is checked."
    )
    IsChecked: Optional[bool] = Field(
        None, description="If true, the radio button is checked by default."
    )
    ReadOnly: Optional[bool] = Field(
        None, description="If true, the element is readonly."
    )
    Position: EnvelopeSendPosition = Field(
        ..., description="The position of the element within the document."
    )
    Size: EnvelopeSendSize = Field(..., description="The size of the element.")


class EnvelopeSendTextFormat(BaseModel):
    TextColor: Optional[str] = Field(
        None,
        description="The color of the text. The default color is black.\r\nSix digit hexadecimal color that starts with # in #RRGGBB format according to CSS Color Module Level 4, paragraph 5.2.",
    )
    FontSizeInPt: Optional[float] = Field(
        None, description="The size of the font in points."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    Bold: Optional[bool] = Field(None, description="If true, the bold font is used.")
    Italic: Optional[bool] = Field(
        None, description="If true, the italic font is used."
    )
    TextAlign: Optional[TextAlign] = Field(
        None, description="The alignment of the text. The default alignment is left."
    )


class Type9(Enum):
    International = "International"
    InternationalLeadingZeros = "InternationalLeadingZeros"
    InternationalLeadingPlus = "InternationalLeadingPlus"


class EnvelopeSendPhoneValidationConfiguration(BaseModel):
    Type: Optional[Type9] = Field(None, description="The format of the phone numbers.")


class EnvelopeSendNumberValidationConfiguration(BaseModel):
    DecimalDigits: Optional[int] = Field(
        None, description="The expected amount of decimal digits."
    )
    Symbol: Optional[str] = Field(None, description="The expected symbol.")
    SymbolLocation: Optional[SymbolLocation] = Field(
        None, description="The defined symbol location."
    )
    GroupSeparator: Optional[GroupSeparator] = Field(
        None, description="The expected thousands separator."
    )
    DecimalSeparator: Optional[DecimalSeparator] = Field(
        None, description="The expected decimal separator."
    )
    Range: Optional[EnvelopeSendFieldValidationRange] = Field(
        None, description="The range of the values."
    )


class EnvelopeSendActionCallbackSelection(BaseModel):
    ConfirmTransactionCode: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when a transaction code was sent. This is only used for legacy disposable certificates, after user accepted issuance of disposable certificate.",
    )
    AgreementAccepted: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when the user accepted the agreement.",
    )
    AgreementRejected: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when the user rejected the agreement.",
    )
    PrepareAuthenticationSuccess: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when the preparation of the authentication process succeeded.",
    )
    AuthenticationFailed: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when the user failed to authenticate.",
    )
    AuthenticationSuccess: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when the user succeeded to authenticate.",
    )
    AuditTrailRequested: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when the audit trail was requested.",
    )
    AuditTrailXmlRequested: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when the audit trail XML was requested.",
    )
    CalledPage: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when the SignAnyWhere Viewer was requested.",
    )
    DocumentDownloaded: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when the document download was requested.",
    )
    FlattenedDocumentDownloaded: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when the flattened document download was requested.",
    )
    AddedAnnotation: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when an annotation was added.",
    )
    AddedAttachment: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when an attachment was added.",
    )
    AppendedDocument: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when a document was appended.",
    )
    FormsFilled: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when a form field was filled.",
    )
    ConfirmReading: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when a reading task was completed.",
    )
    SendTransactionCode: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when a transaction code for a signature with type TransactionCode was sent using the TransactionCodeSenderPlugin.",
    )
    PrepareSignWorkstepDocument: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when a signature was prepared for signing.",
    )
    SignWorkstepDocument: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when a signature was applied.",
    )
    UndoAction: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when an action was undone.",
    )
    WorkstepCreated: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when a workstep was created.",
    )
    WorkstepFinished: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when a workstep was finished.",
    )
    WorkstepRejected: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when a workstep was rejected.",
    )
    DisablePolicyAndValidityChecks: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when policy and validity checks were disabled.",
    )
    EnablePolicyAndValidityChecks: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when policy and validity checks were enabled.",
    )
    AppendFileToWorkstep: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when a file was appended to the workstep.",
    )
    AppendTasksToWorkstep: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when a task was added to the workstep.",
    )
    SetOptionalDocumentState: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when an optional document became either active or inactive.",
    )
    PreparePayloadForBatch: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when the payload was prepared for batch signing.",
    )


class EnvelopeSendSignAutomatic(BaseModel):
    ProfileId: str = Field(
        ..., description="The identifier of the profile for the automatic signatures."
    )
    RenderingLanguageCode: Optional[RenderingLanguageCode] = Field(
        None, description="The rendering language for the automatic signatures."
    )
    VisibleSignatures: Optional[List[EnvelopeSendVisibleSignature]] = Field(
        None,
        description="The visible signatures define the optional visual representations for automatic signatures.\r\nIf none are defined, the automatic signatures are applied to the documents without a visual element.",
        max_items=50,
    )


class EnvelopeSendListBoxDefinition(BaseModel):
    TextFormat: Optional[EnvelopeSendTextFormat] = Field(
        None, description="The configuration of the text format."
    )
    Items: List[EnvelopeSendChoiceItem] = Field(
        ...,
        description="A list of items that can be selected for the element.",
        max_items=50,
        min_items=1,
    )
    IsMultiSelect: Optional[bool] = Field(
        None, description="If true, multiple values of the list box can be selected."
    )
    ReadOnly: Optional[bool] = Field(
        None, description="If true, the element is readonly."
    )
    Position: EnvelopeSendPosition = Field(
        ..., description="The position of the element within the document."
    )
    Size: EnvelopeSendSize = Field(..., description="The size of the element.")


class EnvelopeSendRadioButtonGroupDefinition(BaseModel):
    IsSelectUnison: Optional[bool] = Field(
        None,
        description="If true, radiobuttons with the same <code>ExportValue</code> are checked and unchecked together.",
    )
    Items: Optional[List[EnvelopeSendRadioButtonItemDefinition]] = Field(
        None,
        description="The list of radio buttons that belong to the same group.",
        max_items=50,
    )


class EnvelopeSendComboBoxDefinition(BaseModel):
    TextFormat: Optional[EnvelopeSendTextFormat] = Field(
        None, description="The configuration of the text format."
    )
    Items: List[EnvelopeSendChoiceItem] = Field(
        ...,
        description="A list of items that can be selected for the element.",
        max_items=50,
    )
    IsEditable: Optional[bool] = Field(
        None, description="If true, the combo box is editable."
    )
    ReadOnly: Optional[bool] = Field(
        None, description="If true, the element is readonly."
    )
    Position: EnvelopeSendPosition = Field(
        ..., description="The position of the element within the document."
    )
    Size: EnvelopeSendSize = Field(..., description="The size of the element.")


class EnvelopeSendCheckBoxDefinition(BaseModel):
    ExportValue: Optional[str] = Field(
        None, description="The value of the check box when it is checked."
    )
    Position: EnvelopeSendPosition = Field(
        ..., description="The position of the element within the document."
    )
    Size: EnvelopeSendSize = Field(..., description="The size of the element.")
    ReadOnly: Optional[bool] = Field(
        None, description="If true, the element is readonly."
    )


class EnvelopeSendTextBoxDefinition(BaseModel):
    ReadOnly: Optional[bool] = Field(
        None, description="If true, the element is readonly."
    )
    MaxLength: Optional[int] = Field(
        None, description="The maximum length of the text."
    )
    IsMultiline: Optional[bool] = Field(
        None, description="If true, the text box can have multiple lines."
    )
    IsPassword: Optional[bool] = Field(
        None,
        description="If true, the text box behaves like a password input field and does not show the actually entered characters.",
    )
    TextFormat: Optional[EnvelopeSendTextFormat] = Field(
        None, description="The configuration of the text format."
    )
    Position: EnvelopeSendPosition = Field(
        ..., description="The position of the element within the document."
    )
    Size: EnvelopeSendSize = Field(..., description="The size of the element.")


class EnvelopeSendListBox(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    Required: Optional[bool] = Field(
        None, description="If true, the element is required."
    )
    PreSelectedItems: Optional[List[PreSelectedItem]] = Field(
        None,
        description="The export values of the items which should be initially selected.",
        max_items=50,
    )
    GuidingOrder: Optional[int] = Field(None, description="The order of the element.")
    FieldDefinition: Optional[EnvelopeSendListBoxDefinition] = Field(
        None,
        description="The definition of the list box field.\r\nIt must be specified when the list box is added.\r\nIt must not be specified when the list box already exists.",
    )


class EnvelopeSendRadioButtonGroup(BaseModel):
    GroupName: Optional[str] = Field(
        None, description="The name of the radio button group."
    )
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    Required: Optional[bool] = Field(
        None, description="If true, the element is required."
    )
    SelectedItem: Optional[str] = Field(
        None,
        description="The export value of the selected item of the radio button group.",
    )
    GuidingOrder: Optional[int] = Field(None, description="The order of the element.")
    FieldDefinition: Optional[EnvelopeSendRadioButtonGroupDefinition] = Field(
        None,
        description="The definition of the radio button group.\r\nIt must be specified when the radio button group is added.\r\nIt must not be specified when the radio button group already exists.",
    )


class EnvelopeSendComboBox(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    Required: Optional[bool] = Field(
        None, description="If true, the element is required."
    )
    Value: Optional[str] = Field(
        None, description="The selected value of the combo box."
    )
    GuidingOrder: Optional[int] = Field(None, description="The order of the element.")
    FieldDefinition: Optional[EnvelopeSendComboBoxDefinition] = Field(
        None,
        description="The definition of the combo box.\r\nIt must be specified when the combo box is added.\r\nIt must not be specified when the combo box already exists.",
    )


class EnvelopeSendCheckBox(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    Required: Optional[bool] = Field(
        None, description="If true, the element is required."
    )
    IsChecked: Optional[bool] = Field(
        None, description="If true, the check box is checked."
    )
    GuidingOrder: Optional[int] = Field(None, description="The order of the element.")
    FieldDefinition: Optional[EnvelopeSendCheckBoxDefinition] = Field(
        None,
        description="The definition of the check box.\r\nIt must be specified when the check box is added.\r\nIt must not be specified when the check box already exists.",
    )


class EnvelopeSendExpirationConfiguration(BaseModel):
    ExpirationInSecondsAfterSending: Optional[int] = Field(
        None,
        description="The relative expiration in seconds after sending the envelope.\r\nMust be a positive number between 600 and the maximum envelope validity located in the system configuration [Configuration key: maxEnvelopeValidityInDays, Default: 2419200 seconds (28 days)].\r\nMust not be defined when property <code>ExpirationDate</code> is specified.",
    )
    ExpirationDate: Optional[datetime] = Field(
        None,
        description="The absolute expiration date of the envelope.\r\nMust not be in the past.\r\nMust not be defined when property <code>ExpirationInSecondsAfterSending</code> is specified.\r\nA datetime in the format RFC 3339, section 5.6, 'date-Time' (e.g. 2017-07-21T17:32:28Z).",
    )


class EnvelopeSendReminderConfiguration(BaseModel):
    Enabled: Optional[bool] = Field(None, description="If true, reminders are sent.")
    FirstReminderInDays: Optional[int] = Field(
        None,
        description="The amount of days until a reminder is sent to a signer or a viewer after the initial notification.",
    )
    ReminderResendIntervalInDays: Optional[int] = Field(
        None,
        description="The amount of days until a reminder is sent again to a signer or a viewer.",
    )
    BeforeExpirationInDays: Optional[int] = Field(
        None,
        description="The amount of days before the envelope expires and a reminder should be sent.",
    )


class EnvelopeCancelRequest(BaseModel):
    EnvelopeId: str = Field(..., description="The identifier of the envelope.")


class EnvelopeDeleteRequest(BaseModel):
    EnvelopeId: str = Field(..., description="The identifier of the envelope.")


class EnvelopeRemindRequest(BaseModel):
    EnvelopeId: str = Field(..., description="The identifier of the envelope.")


class EnvelopeRemindResponse(BaseModel):
    TotalSentReminders: Optional[int] = Field(
        None, description="The amount of reminder notifications which were sent out."
    )
    TotalBlockedByRateLimit: Optional[int] = Field(
        None,
        description="The amount of skipped reminder notifications due to rate limit.",
    )
    TotalBlockedByDisabledEmail: Optional[int] = Field(
        None,
        description="The amount of skipped reminder notifications due to disabled notification sending for the recipient.",
    )
    TotalBlockedByNotificationSetting: Optional[int] = Field(
        None,
        description="The amount of skipped reminder notifications due to disabled notifications by the user.",
    )


class EnvelopeUnlockRequest(BaseModel):
    EnvelopeId: str = Field(..., description="The identifier of the envelope.")


class EnvelopeRestartExpiredRequest(BaseModel):
    EnvelopeId: str = Field(..., description="The identifier of the envelope.")
    ExpirationInSecondsAfterSending: Optional[int] = Field(
        None,
        description="The relative expiration in seconds after sending the envelope.\r\nMust be a positive number between 600 and the maximum envelope validity located in the system configuration [Configuration key: maxEnvelopeValidityInDays, Default: 2419200 seconds (28 days)].\r\nMust not be defined when property <code>ExpirationDate</code> is specified.",
    )
    ExpirationDate: Optional[datetime] = Field(
        None,
        description="The absolute expiration date of the envelope.\r\nMust not be in the past.\r\nMust not be defined when property <code>ExpirationInSecondsAfterSending</code> is specified.\r\nA datetime in the format RFC 3339, section 5.6, 'date-Time' (e.g. 2017-07-21T17:32:28Z).",
    )


class EnvelopeActivityDeleteRequest(BaseModel):
    ActivityId: str = Field(..., description="The identifier of the activity.")


class EnvelopeActivityReplaceVisibilityOption(BaseModel):
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    IsHidden: Optional[bool] = Field(
        None, description="If true, the referenced document is hidden for the activity."
    )


class EnvelopeActivityReplaceBatchConfiguration(BaseModel):
    Mode: Optional[Mode] = Field(
        None, description="The mode, that will be used for batch signing."
    )
    RequireScrollingOverAllSignaturesBeforeSigning: Optional[bool] = Field(
        None,
        description="If true, the user has to review all signatures in the batch signing dialog before signing.\r\nThis is only applicable when the <code>Mode</code> is set to <code>OptIn</code> or <code>OptOut</code>.",
    )


class EnvelopeActivityReplaceClientFinishAction(BaseModel):
    RedirectUri: Optional[str] = Field(None, description="The redirect uri.")


class EnvelopeActivityReplaceAppFinishAction(BaseModel):
    RemoveDocumentFromRecentDocumentList: Optional[bool] = Field(
        None,
        description="If true, the document will be removed from the recent document list.",
    )
    CallClientActionOnlyAfterSuccessfulSync: Optional[bool] = Field(
        None,
        description="If true, the client action will be called only after a successful sync.",
    )
    CloseApp: Optional[bool] = Field(
        None, description="If true, the app will be closed."
    )
    RedirectUri: Optional[str] = Field(None, description="The redirect uri.")


class EnvelopeActivityReplaceKioskFinishAction(BaseModel):
    RedirectUri: Optional[str] = Field(None, description="The redirect uri.")


class EnvelopeActivityReplaceRemoteCertificateSignatureData(BaseModel):
    UserId: Optional[str] = Field(None, description="The identifier of the user.")
    DeviceId: Optional[str] = Field(None, description="The identifier of the device.")


class EnvelopeActivityReplaceSwissComOnDemandSignatureData(BaseModel):
    PhoneNumber: Optional[str] = Field(None, description="The phone number.")
    CommonName: Optional[str] = Field(
        None, description="The name of the certificate that is created or checked."
    )
    Country: Optional[str] = Field(None, description="The country.")
    Locality: Optional[str] = Field(None, description="The locality.")
    OrganizationUnits: Optional[List[OrganizationUnit]] = Field(
        None, description="The organizational units.", max_items=228
    )
    Organization: Optional[str] = Field(None, description="The organization.")
    SerialNumber: Optional[str] = Field(None, description="The serial number.")
    StateOrProvince: Optional[str] = Field(None, description="The state or province.")
    Pseudonym: Optional[str] = Field(
        None, description="A name or key that uniquely identifies the user."
    )


class EnvelopeActivityReplaceSmsOneTimePasswordSignatureData(BaseModel):
    PhoneNumber: Optional[str] = Field(
        None,
        description="The phone number to which the one time password will be sent.",
    )


class EnvelopeActivityReplaceATrustCertificateSignatureData(BaseModel):
    PhoneNumber: Optional[str] = Field(
        None, description="The phone number of the recipient."
    )


class EnvelopeActivityReplaceSwedishBankIdSignatureData(BaseModel):
    PersonalNumber: Optional[str] = Field(
        None, description="The personal number for signing."
    )
    AllowAnyPersonalNumber: Optional[bool] = Field(
        None,
        description="If true, the personal number can be edited by the recipient.\r\nIf the personal number is empty and can be edited, a QR code for scanning is provided.",
    )


class EnvelopeActivityReplacePosition(BaseModel):
    PageNumber: Optional[int] = Field(
        None,
        description="The number of the page where the element is located. It starts with 1.",
    )
    X: float = Field(
        ..., description="The X coordinate in points. It starts from the left."
    )
    Y: float = Field(
        ..., description="The Y coordinate in points. It starts from the bottom."
    )


class EnvelopeActivityReplaceSize(BaseModel):
    Width: float = Field(..., description="The width of the element in points.")
    Height: float = Field(..., description="The height of the element in points.")


class EnvelopeActivityReplaceAccessCodeAuthentication(BaseModel):
    Code: Optional[str] = Field(
        None, description="The code for authenticating the recipient."
    )


class EnvelopeActivityReplaceSmsOneTimePasswordAuthentication(BaseModel):
    PhoneNumber: Optional[str] = Field(
        None,
        description="The phone number to which the one time password will be sent.",
    )


class EnvelopeActivityReplaceSwedishBankIdAuthentication(BaseModel):
    PersonalNumber: Optional[str] = Field(
        None, description="The personal number for the authentication."
    )
    AllowAnyPersonalNumber: Optional[bool] = Field(
        None,
        description="If true, the personal number can be edited by the recipient.\r\nIf the personal number is empty and can be edited, a QR code for scanning is provided.",
    )


class Type10(Enum):
    None_ = "None"
    Date = "Date"
    Email = "Email"
    Number = "Number"
    Phone = "Phone"
    Time = "Time"


class EnvelopeActivityReplaceAttachmentDefinition(BaseModel):
    Position: EnvelopeActivityReplacePosition = Field(
        ..., description="The position of the element within the document."
    )
    Size: EnvelopeActivityReplaceSize = Field(
        ..., description="The size of the element."
    )


class EnvelopeActivityReplaceReadingAreaDefinition(BaseModel):
    Position: EnvelopeActivityReplacePosition = Field(
        ..., description="The position of the element within the document."
    )
    Size: EnvelopeActivityReplaceSize = Field(
        ..., description="The size of the element."
    )


class EnvelopeActivityReplaceSignaturePluginParameter(BaseModel):
    Key: Optional[str] = Field(None, description="The identifier of the parameter.")
    Value: Optional[str] = Field(None, description="The value of the parameter.")


class EnvelopeActivityReplaceAuthenticationValidation(BaseModel):
    FieldReferenceId: Optional[str] = Field(
        None, description="The identifier of the field."
    )
    ExpectedValue: Optional[str] = Field(
        None, description="The expected value of the field."
    )


class EnvelopeActivityReplaceLinkDefinition(BaseModel):
    Position: EnvelopeActivityReplacePosition = Field(
        ..., description="The position of the element within the document."
    )
    Size: EnvelopeActivityReplaceSize = Field(
        ..., description="The size of the element."
    )


class EnvelopeActivityReplaceFieldValidationRange(BaseModel):
    From: Optional[str] = Field(None, description="The lower boundary of the range.")
    To: Optional[str] = Field(None, description="The upper boundary of the range.")


class EnvelopeActivityReplaceTextFormat(BaseModel):
    TextColor: Optional[str] = Field(
        None,
        description="The color of the text. The default color is black.\r\nSix digit hexadecimal color that starts with # in #RRGGBB format according to CSS Color Module Level 4, paragraph 5.2.",
    )
    FontSizeInPt: Optional[float] = Field(
        None, description="The size of the font in points."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    Bold: Optional[bool] = Field(None, description="If true, the bold font is used.")
    Italic: Optional[bool] = Field(
        None, description="If true, the italic font is used."
    )
    TextAlign: Optional[TextAlign] = Field(
        None, description="The alignment of the text. The default alignment is left."
    )


class EnvelopeActivityReplacePluginStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayEmail: Optional[bool] = Field(
        None, description="If true, the email address of the signer is displayed."
    )
    DisplayIp: Optional[bool] = Field(
        None, description="If true, the IP address of the signer is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class EnvelopeActivityReplaceSwedishBankIdStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayTransactionId: Optional[bool] = Field(
        None, description="If true, the transaction identifier is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class EnvelopeActivityReplaceOneTimePasswordStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayTransactionId: Optional[bool] = Field(
        None, description="If true, the transaction identifier is displayed."
    )
    DisplayTransactionToken: Optional[bool] = Field(
        None, description="If true, the transaction token is displayed."
    )
    DisplayPhoneNumber: Optional[bool] = Field(
        None, description="If true, the phone number of the signer is displayed."
    )
    DisplayIp: Optional[bool] = Field(
        None, description="If true, the IP address of the signer is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class EnvelopeActivityReplaceRemoteCertificateStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayIp: Optional[bool] = Field(
        None, description="If true, the IP address of the signer is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class EnvelopeActivityReplaceSwissComOnDemandStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayIp: Optional[bool] = Field(
        None, description="If true, the IP address of the signer is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class EnvelopeActivityReplaceDisposableCertificateStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayIp: Optional[bool] = Field(
        None, description="If true, the IP address of the signer is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class EnvelopeActivityReplaceLocalCertificateStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayIp: Optional[bool] = Field(
        None, description="If true, the IP address of the signer is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class EnvelopeActivityReplaceTypeToSignStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayEmail: Optional[bool] = Field(
        None, description="If true, the email address of the signer is displayed."
    )
    DisplayIp: Optional[bool] = Field(
        None, description="If true, the IP address of the signer is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class EnvelopeActivityReplaceDrawToSignStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayEmail: Optional[bool] = Field(
        None, description="If true, the email address of the signer is displayed."
    )
    DisplayIp: Optional[bool] = Field(
        None, description="If true, the IP address of the signer is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class EnvelopeActivityReplaceClickToSignStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayEmail: Optional[bool] = Field(
        None, description="If true, the email address of the signer is displayed."
    )
    DisplayIp: Optional[bool] = Field(
        None, description="If true, the IP address of the signer is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class EnvelopeActivityReplaceStampImprintDateConfiguration(BaseModel):
    UseLocalTimezone: Optional[bool] = Field(
        None, description="If true, the local timezone is used."
    )
    DateTimeFormat: Optional[str] = Field(
        None, description="The format of the timestamp."
    )


class EnvelopeActivityReplaceSignaturePluginSignatureType(BaseModel):
    PluginId: Optional[str] = Field(None, description="The identifier of the plugin.")
    Preferred: Optional[bool] = Field(
        None,
        description="If true, the signature type is set as preferred.\r\nOnly one signature type may be marked.",
    )
    StampImprintConfiguration: Optional[EnvelopeActivityReplacePluginStampImprint] = (
        Field(
            None, description="The configuration of the stamp imprint of the signature."
        )
    )


class EnvelopeActivityReplaceSwedishBankIdSignatureType(BaseModel):
    Preferred: Optional[bool] = Field(
        None,
        description="If true, the signature type is set as preferred.\r\nOnly one signature type may be marked.",
    )
    StampImprintConfiguration: Optional[
        EnvelopeActivityReplaceSwedishBankIdStampImprint
    ] = Field(
        None, description="The configuration of the stamp imprint of the signature."
    )


class EnvelopeActivityReplaceOneTimePasswordSignatureType(BaseModel):
    ValidityInSeconds: Optional[int] = Field(
        None, description="The validity of the password in seconds."
    )
    UseExternalSignatureImage: Optional[UseExternalSignatureImage] = Field(
        None, description="The external signature image mode."
    )
    Preferred: Optional[bool] = Field(
        None,
        description="If true, the signature type is set as preferred.\r\nOnly one signature type may be marked.",
    )
    StampImprintConfiguration: Optional[
        EnvelopeActivityReplaceOneTimePasswordStampImprint
    ] = Field(
        None, description="The configuration of the stamp imprint of the signature."
    )


class EnvelopeActivityReplaceRemoteCertificateSignatureType(BaseModel):
    ValidityInSeconds: Optional[int] = Field(
        None, description="The validity of the certificate in seconds."
    )
    UseExternalSignatureImage: Optional[UseExternalSignatureImage] = Field(
        None, description="The external signature image mode."
    )
    Preferred: Optional[bool] = Field(
        None,
        description="If true, the signature type is set as preferred.\r\nOnly one signature type may be marked.",
    )
    StampImprintConfiguration: Optional[
        EnvelopeActivityReplaceRemoteCertificateStampImprint
    ] = Field(
        None, description="The configuration of the stamp imprint of the signature."
    )


class EnvelopeActivityReplaceBiometricSignatureType(BaseModel):
    BiometricVerification: Optional[bool] = Field(
        None, description="If true, a biometric verification is performed."
    )
    AllowBiometricStoringOnly: Optional[bool] = Field(
        None,
        description="If true, the biometric signature might be stored without verification.",
    )
    StoreSignedResponseWithoutBioData: Optional[bool] = Field(
        None,
        description="If true, the signed response is stored without biometric data.",
    )
    BiometricServerUserId: Optional[str] = Field(
        None, description="The identifier of the user on the biometric server."
    )
    SignaturePositioning: Optional[SignaturePositioning] = Field(
        None, description="The allowed positioning of the biometric signature."
    )
    Preferred: Optional[bool] = Field(
        None,
        description="If true, the signature type is set as preferred.\r\nOnly one signature type may be marked.",
    )


class EnvelopeActivityReplaceATrustCertificateSignatureType(BaseModel):
    TemplateId: Optional[str] = Field(
        None, description="The identifier of the A-Trust template."
    )
    Preferred: Optional[bool] = Field(
        None,
        description="If true, the signature type is set as preferred.\r\nOnly one signature type may be marked.",
    )


class EnvelopeActivityReplaceSwissComOnDemandSignatureType(BaseModel):
    ValidityInSeconds: Optional[int] = Field(
        None, description="The validity of the certificate in seconds."
    )
    Preferred: Optional[bool] = Field(
        None,
        description="If true, the signature type is set as preferred.\r\nOnly one signature type may be marked.",
    )
    StampImprintConfiguration: Optional[
        EnvelopeActivityReplaceSwissComOnDemandStampImprint
    ] = Field(
        None, description="The configuration of the stamp imprint of the signature."
    )


class EnvelopeActivityReplaceDisposableCertificateSignatureType(BaseModel):
    IsLongLived: Optional[bool] = Field(
        None, description="If true, the disposable certificate is long lived."
    )
    ValidityInSeconds: Optional[int] = Field(
        None, description="The validity of the certificate in seconds."
    )
    UseExternalSignatureImage: Optional[UseExternalSignatureImage] = Field(
        None, description="The external signature image mode."
    )
    Preferred: Optional[bool] = Field(
        None,
        description="If true, the signature type is set as preferred.\r\nOnly one signature type may be marked.",
    )
    StampImprintConfiguration: Optional[
        EnvelopeActivityReplaceDisposableCertificateStampImprint
    ] = Field(
        None, description="The configuration of the stamp imprint of the signature."
    )


class EnvelopeActivityReplaceLocalCertificateSignatureType(BaseModel):
    EnforcePreferredHashAlgorithm: Optional[bool] = Field(
        None,
        description="If true, the usage of the preferred hash algorithm is enforced.",
    )
    PreferredHashAlgorithm: Optional[PreferredHashAlgorithm] = Field(
        None, description="The preferred hash algorithm."
    )
    UseExternalSignatureImage: Optional[UseExternalSignatureImage] = Field(
        None, description="The external signature image mode."
    )
    Preferred: Optional[bool] = Field(
        None,
        description="If true, the signature type is set as preferred.\r\nOnly one signature type may be marked.",
    )
    StampImprintConfiguration: Optional[
        EnvelopeActivityReplaceLocalCertificateStampImprint
    ] = Field(
        None, description="The configuration of the stamp imprint of the signature."
    )


class EnvelopeActivityReplaceTypeToSignSignatureType(BaseModel):
    UseExternalSignatureImage: Optional[UseExternalSignatureImage] = Field(
        None, description="The external signature image mode."
    )
    Preferred: Optional[bool] = Field(
        None,
        description="If true, the signature type is set as preferred.\r\nOnly one signature type may be marked.",
    )
    StampImprintConfiguration: Optional[
        EnvelopeActivityReplaceTypeToSignStampImprint
    ] = Field(
        None, description="The configuration of the stamp imprint of the signature."
    )


class EnvelopeActivityReplaceDrawToSignSignatureType(BaseModel):
    UseExternalSignatureImage: Optional[UseExternalSignatureImage] = Field(
        None, description="The external signature image mode."
    )
    Preferred: Optional[bool] = Field(
        None,
        description="If true, the signature type is set as preferred.\r\nOnly one signature type may be marked.",
    )
    StampImprintConfiguration: Optional[
        EnvelopeActivityReplaceDrawToSignStampImprint
    ] = Field(
        None, description="The configuration of the stamp imprint of the signature."
    )


class EnvelopeActivityReplaceClickToSignSignatureType(BaseModel):
    UseExternalSignatureImage: Optional[UseExternalSignatureImage] = Field(
        None, description="The external signature image mode."
    )
    Preferred: Optional[bool] = Field(
        None,
        description="If true, the signature type is set as preferred.\r\nOnly one signature type may be marked.",
    )
    StampImprintConfiguration: Optional[
        EnvelopeActivityReplaceClickToSignStampImprint
    ] = Field(
        None, description="The configuration of the stamp imprint of the signature."
    )


class Type11(Enum):
    International = "International"
    InternationalLeadingZeros = "InternationalLeadingZeros"
    InternationalLeadingPlus = "InternationalLeadingPlus"


class EnvelopeActivityReplacePhoneValidationConfiguration(BaseModel):
    Type: Optional[Type11] = Field(None, description="The format of the phone numbers.")


class EnvelopeActivityReplaceNumberValidationConfiguration(BaseModel):
    DecimalDigits: Optional[int] = Field(
        None, description="The expected amount of decimal digits."
    )
    Symbol: Optional[str] = Field(None, description="The expected symbol.")
    SymbolLocation: Optional[SymbolLocation] = Field(
        None, description="The defined symbol location."
    )
    GroupSeparator: Optional[GroupSeparator] = Field(
        None, description="The expected thousands separator."
    )
    DecimalSeparator: Optional[DecimalSeparator] = Field(
        None, description="The expected decimal separator."
    )
    Range: Optional[EnvelopeActivityReplaceFieldValidationRange] = Field(
        None, description="The range of the values."
    )


class EnvelopeActivityReplaceDisposableCertificateSignatureData(BaseModel):
    DocumentIssuingCountry: Optional[str] = Field(
        None,
        description="The issuing country of the document.\r\nWill be used as country of residence, if lean is disabled.",
    )
    IdentificationIssuingCountry: Optional[str] = Field(
        None, description="The issuing country of the identification."
    )
    IdentificationType: Optional[IdentificationType] = Field(
        None, description="The type of identification in use."
    )
    PhoneNumber: Optional[str] = Field(
        None, description="The phone number registered for identification."
    )
    DocumentType: Optional[DocumentType] = Field(
        None, description="The type of document used for the identification."
    )
    DocumentIssuedBy: Optional[str] = Field(
        None, description="The authority that issued the document."
    )
    DocumentIssuedOn: Optional[datetime] = Field(
        None,
        description="The date when the document has been issued.\r\nA date in the format RFC 3339, section 5.6, 'full-date' (e.g. 2017-07-21).",
    )
    DocumentExpiryDate: Optional[datetime] = Field(
        None,
        description="The expiration date of the document.\r\nA date in the format RFC 3339, section 5.6, 'full-date' (e.g. 2017-07-21).",
    )
    SerialNumber: Optional[str] = Field(
        None, description="The serial number of the certificate."
    )
    DocumentNumber: Optional[str] = Field(
        None, description="The identifier of the document."
    )


class EnvelopeActivityReplaceReadDocumentConfirmation(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    Required: Optional[bool] = Field(
        None, description="If true, the element is required."
    )
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    DisplayName: Optional[str] = Field(None, description="The displayed name.")
    GuidingOrder: Optional[int] = Field(None, description="The order of the element.")


class EnvelopeActivityReplaceReadPagesConfirmation(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    Required: Optional[bool] = Field(
        None, description="If true, the element is required."
    )
    DocumentNumber: int = Field(
        ...,
        description="The reference number of the containing document. It starts with 1.",
    )
    DisplayName: Optional[str] = Field(None, description="The displayed name.")
    PageNumber: Optional[int] = Field(
        None,
        description="The number of the page that needs to be read. Starting with 1.",
    )
    GuidingOrder: Optional[int] = Field(None, description="The order of the element.")


class EnvelopeActivityReplaceReadAreaConfirmation(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    Required: Optional[bool] = Field(
        None, description="If true, the element is required."
    )
    DocumentNumber: int = Field(
        ...,
        description="The reference number of the containing document. It starts with 1.",
    )
    DisplayName: Optional[str] = Field(None, description="The displayed name.")
    GuidingOrder: Optional[int] = Field(None, description="The order of the element.")
    Definition: Optional[EnvelopeActivityReplaceReadingAreaDefinition] = Field(
        None,
        description="The definition of the area.\r\nWhen adding a new element, it has to be specified .\r\nWhen the field already exists, it must not be specified.",
    )


class EnvelopeActivityReplaceAttachment(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    DocumentNumber: int = Field(
        ...,
        description="The reference number of the containing document. It starts with 1.",
    )
    Required: Optional[bool] = Field(
        None, description="If true, the element is required."
    )
    DisplayName: Optional[str] = Field(None, description="The displayed name.")
    DisplayIconType: Optional[DisplayIconType] = Field(
        None,
        description="The type of the displayed icon. If no icon is provided Paperclip will be used.",
    )
    GuidingOrder: Optional[int] = Field(None, description="The order of the element.")
    FieldDefinition: Optional[EnvelopeActivityReplaceAttachmentDefinition] = Field(
        None,
        description="The definition of the attachment element.\r\nIt must be specified when the attachment element is added.\r\nIt must not be specified when the attachment element already exists.",
    )


class EnvelopeActivityReplaceListBox(BaseModel):
    ElementId: str = Field(..., description="The identifier of the element.")
    Required: Optional[bool] = Field(
        None, description="If true, the element is required."
    )
    PreSelectedItems: Optional[List[PreSelectedItem]] = Field(
        None,
        description="The export values of the items which should be initially selected.",
        max_items=50,
    )
    DocumentNumber: int = Field(
        ...,
        description="The reference number of the containing document. It starts with 1.",
    )
    GuidingOrder: Optional[int] = Field(None, description="The order of the element.")


class EnvelopeActivityReplaceRadioButtonGroup(BaseModel):
    GroupName: Optional[str] = Field(
        None, description="The name of the radio button group."
    )
    Required: Optional[bool] = Field(
        None, description="If true, the element is required."
    )
    SelectedItem: str = Field(
        ...,
        description="The export value of the selected item of the radio button group.",
    )
    DocumentNumber: int = Field(
        ...,
        description="The reference number of the containing document. It starts with 1.",
    )
    GuidingOrder: Optional[int] = Field(None, description="The order of the element.")


class EnvelopeActivityReplaceComboBox(BaseModel):
    ElementId: str = Field(..., description="The identifier of the element.")
    Required: Optional[bool] = Field(
        None, description="If true, the element is required."
    )
    Value: Optional[str] = Field(
        None, description="The selected value of the combo box."
    )
    DocumentNumber: int = Field(
        ...,
        description="The reference number of the containing document. It starts with 1.",
    )
    GuidingOrder: Optional[int] = Field(None, description="The order of the element.")


class EnvelopeActivityReplaceCheckBox(BaseModel):
    ElementId: str = Field(..., description="The identifier of the element.")
    Required: Optional[bool] = Field(
        None, description="If true, the element is required."
    )
    IsChecked: Optional[bool] = Field(
        None, description="If true, the check box is checked."
    )
    DocumentNumber: int = Field(
        ...,
        description="The reference number of the containing document. It starts with 1.",
    )
    GuidingOrder: Optional[int] = Field(None, description="The order of the element.")


class EnvelopeActivityReplaceEmailAppLinks(BaseModel):
    Android: Optional[bool] = Field(
        None, description="If true, an Android app link is added to the email message."
    )
    iOS: Optional[bool] = Field(
        None, description="If true, an iOS app link is added to the email message."
    )
    Windows: Optional[bool] = Field(
        None, description="If true, a Windows app link is added to the email message."
    )


class EnvelopeActivityReplaceContactInformation(BaseModel):
    Email: str = Field(..., description="The email address of the recipient.")
    GivenName: str = Field(..., description="The given name of the recipient.")
    Surname: str = Field(..., description="The surname of the recipient.")
    PhoneNumber: Optional[str] = Field(
        None, description="The phone number of the recipient."
    )
    LanguageCode: Optional[LanguageCode] = Field(
        None, description="The language of the recipient."
    )


class EnvelopeActivityReplaceGeneralPoliciesForP7MAction(BaseModel):
    AllowSaveDocument: Optional[bool] = Field(
        None,
        description="If true, the client is allowed to save the workstep document.",
    )
    AllowSaveAuditTrail: Optional[bool] = Field(
        None,
        description="If true, the client is allowed to save the audittrail document.",
    )
    AllowPrintDocument: Optional[bool] = Field(
        None,
        description="If true, the client is allowed to print the workstep document.",
    )
    AllowAdhocPdfAttachments: Optional[bool] = Field(
        None, description="If true, the client is allowed to append adhoc documents."
    )
    AllowRejectWorkstep: Optional[bool] = Field(
        None, description="If true, the client is allowed to reject the workstep."
    )
    AllowUndoLastAction: Optional[bool] = Field(
        None, description="If true, the client is allowed to undo actions."
    )
    AllowDownloadOfSignedP7MFiles: Optional[bool] = Field(
        None, description="If true, the client is allowed to download signed p7m files."
    )


class EnvelopeActivityReplaceGeneralPoliciesForViewAction(BaseModel):
    AllowSaveDocument: Optional[bool] = Field(
        None,
        description="If true, the client is allowed to save the workstep document.",
    )
    AllowSaveAuditTrail: Optional[bool] = Field(
        None,
        description="If true, the client is allowed to save the audittrail document.",
    )
    AllowPrintDocument: Optional[bool] = Field(
        None,
        description="If true, the client is allowed to print the workstep document.",
    )


class EnvelopeActivityReplaceGeneralPoliciesForSignAction(BaseModel):
    AllowSaveDocument: Optional[bool] = Field(
        None,
        description="If true, the client is allowed to save the workstep document.",
    )
    AllowSaveAuditTrail: Optional[bool] = Field(
        None,
        description="If true, the client is allowed to save the audittrail document.",
    )
    AllowPrintDocument: Optional[bool] = Field(
        None,
        description="If true, the client is allowed to print the workstep document.",
    )
    AllowAdhocPdfAttachments: Optional[bool] = Field(
        None, description="If true, the client is allowed to append adhoc documents."
    )
    AllowRejectWorkstep: Optional[bool] = Field(
        None, description="If true, the client is allowed to reject the workstep."
    )
    AllowUndoLastAction: Optional[bool] = Field(
        None, description="If true, the client is allowed to undo actions."
    )


class EnvelopeActivityReplaceBasicRecipientConfiguration(BaseModel):
    ContactInformation: Optional[EnvelopeActivityReplaceContactInformation] = Field(
        None, description="The contact information of the recipient."
    )
    PersonalMessage: Optional[str] = Field(
        None, description="The personal message for the recipient."
    )
    NotificationChannel: Optional[NotificationChannel] = Field(
        None,
        description="Which channel is used for sending notifications to the recipient.\r\nDefault Email if not specified.",
    )


class BulkStatus(Enum):
    Active = "Active"
    PartlyCompleted = "PartlyCompleted"
    Completed = "Completed"


class EnvelopeBulkGetChildEnvelope(BaseModel):
    EnvelopeId: Optional[str] = Field(
        None, description="The identifier of the child envelope."
    )
    SentDate: Optional[datetime] = Field(
        None, description="Date when the envelope was sent."
    )
    Status: Optional[Status2] = Field(None, description="The status of the envelope.")
    Email: Optional[str] = Field(
        None,
        description="The email address of the bulk recipient for which this child envelope was created.",
    )


class EnvelopeBulkFindRequest(BaseModel):
    SenderEmail: Optional[str] = Field(
        None,
        description="If set, envelopes sent by the user with the given email address are matched.",
    )
    CompletedByRecipientWithEmail: Optional[str] = Field(
        None,
        description="If set, envelopes containing a completed activity, belonging to a recipient with the given email address, are matched.",
    )
    WaitingForRecipientWithEmail: Optional[str] = Field(
        None,
        description="If set, envelopes waiting for the recipient with the given email address are matched.",
    )
    EnvelopeBulkChildId: Optional[str] = Field(
        None,
        description="If set, it matches only the BulkParent which contains a child envelope with the given identifier.",
    )
    StartDate: Optional[datetime] = Field(
        None,
        description="If set, filter for envelopes which were sent after the start date.\r\nA datetime in the format RFC 3339, section 5.6, 'date-Time' (e.g. 2017-07-21T17:32:28Z).",
    )
    EndDate: Optional[datetime] = Field(
        None,
        description="If set, filter for envelopes which were sent before the end date.\r\nA datetime in the format RFC 3339, section 5.6, 'date-Time' (e.g. 2017-07-21T17:32:28Z).",
    )
    SearchText: Optional[str] = Field(
        None,
        description="If set, the given text is searched in following fields:\r\nenvelope name and description\r\nnotification subject and message \r\nsender email address, given name and surname  \r\nrecipient email address, given name and surname\r\nNote: Using this search option is very resource intensive! It might take very long.",
    )
    RecipientEmail: Optional[str] = Field(
        None,
        description="If set, envelopes containing a recipient with the given email address are matched.",
    )


class EnvelopeBulkFindParentEnvelope(BaseModel):
    Id: Optional[str] = Field(None, description="The identifier of the envelope.")
    Name: Optional[str] = Field(None, description="The name of the envelope.")
    MetaData: Optional[str] = Field(None, description="The metadata of the envelope.")


class EnvelopeBulkSendDocument(BaseModel):
    FileId: Optional[str] = Field(None, description="The identifier of the file.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The document number.\r\nIf the document number is 0 for all documents, the order of the documents is used as number.\r\nThe document number must not be duplicated.\r\nThe document number must be set for all documents or none.",
    )


class EnvelopeBulkSendEmailConfiguration(BaseModel):
    Subject: Optional[str] = Field(
        None, description="The subject of the sign notifications."
    )
    Message: Optional[str] = Field(
        None, description="The message of the sign notifications."
    )
    SenderDisplayName: Optional[str] = Field(
        None, description="The displayed name of the sender in the notifications."
    )


class EnvelopeBulkSendSealingConfiguration(BaseModel):
    CertificateId: Optional[str] = Field(
        None, description="Custom Sealing certificate identifier."
    )


class EnvelopeBulkSendVisibilityOption(BaseModel):
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    IsHidden: Optional[bool] = Field(
        None, description="If true, the referenced document is hidden for the activity."
    )


class EnvelopeBulkSendAgreementTranslation(BaseModel):
    LanguageCode: LanguageCode = Field(
        ..., description="The language of the translated agreement."
    )
    Text: str = Field(..., description="The translated agreement.")
    Header: Optional[str] = Field(
        None, description="The header for the translated agreement."
    )
    IsDefault: Optional[bool] = Field(
        None, description="If true, this translation is used as default."
    )


class Type12(Enum):
    None_ = "None"
    Date = "Date"
    Email = "Email"
    Number = "Number"
    Phone = "Phone"
    Time = "Time"


class EnvelopeBulkSendPosition(BaseModel):
    PageNumber: Optional[int] = Field(
        None,
        description="The number of the page where the element is located. It starts with 1.",
    )
    X: float = Field(
        ..., description="The X coordinate in points. It starts from the left."
    )
    Y: float = Field(
        ..., description="The Y coordinate in points. It starts from the bottom."
    )


class EnvelopeBulkSendSize(BaseModel):
    Width: float = Field(..., description="The width of the element in points.")
    Height: float = Field(..., description="The height of the element in points.")


class EnvelopeBulkSendChoiceItem(BaseModel):
    ExportValue: Optional[str] = Field(
        None, description="The value of the element when the choice item is selected."
    )
    DisplayValue: str = Field(
        ..., description="The displayed value of the choice item."
    )


class EnvelopeBulkSendBatchConfiguration(BaseModel):
    Mode: Optional[Mode] = Field(
        None, description="The mode, that will be used for batch signing."
    )
    RequireScrollingOverAllSignaturesBeforeSigning: Optional[bool] = Field(
        None,
        description="If true, the user has to review all signatures in the batch signing dialog before signing.\r\nThis is only applicable when the <code>Mode</code> is set to <code>OptIn</code> or <code>OptOut</code>.",
    )


class EnvelopeBulkSendFieldValidationRange(BaseModel):
    From: Optional[str] = Field(None, description="The lower boundary of the range.")
    To: Optional[str] = Field(None, description="The upper boundary of the range.")


class EnvelopeBulkSendSignatureFieldDefinition(BaseModel):
    Position: EnvelopeBulkSendPosition = Field(
        ..., description="The position of the element within the document."
    )
    Size: EnvelopeBulkSendSize = Field(..., description="The size of the element.")


class EnvelopeBulkSendClientFinishAction(BaseModel):
    RedirectUri: Optional[str] = Field(None, description="The redirect uri.")


class EnvelopeBulkSendAppFinishAction(BaseModel):
    RemoveDocumentFromRecentDocumentList: Optional[bool] = Field(
        None,
        description="If true, the document will be removed from the recent document list.",
    )
    CallClientActionOnlyAfterSuccessfulSync: Optional[bool] = Field(
        None,
        description="If true, the client action will be called only after a successful sync.",
    )
    CloseApp: Optional[bool] = Field(
        None, description="If true, the app will be closed."
    )
    RedirectUri: Optional[str] = Field(None, description="The redirect uri.")


class EnvelopeBulkSendKioskFinishAction(BaseModel):
    RedirectUri: Optional[str] = Field(None, description="The redirect uri.")


class EnvelopeBulkSendRemoteCertificateSignatureData(BaseModel):
    UserId: Optional[str] = Field(None, description="The identifier of the user.")
    DeviceId: Optional[str] = Field(None, description="The identifier of the device.")


class EnvelopeBulkSendSwissComOnDemandSignatureData(BaseModel):
    PhoneNumber: Optional[str] = Field(None, description="The phone number.")
    CommonName: Optional[str] = Field(
        None, description="The name of the certificate that is created or checked."
    )
    Country: Optional[str] = Field(None, description="The country.")
    Locality: Optional[str] = Field(None, description="The locality.")
    OrganizationUnits: Optional[List[OrganizationUnit]] = Field(
        None, description="The organizational units.", max_items=228
    )
    Organization: Optional[str] = Field(None, description="The organization.")
    SerialNumber: Optional[str] = Field(None, description="The serial number.")
    StateOrProvince: Optional[str] = Field(None, description="The state or province.")
    Pseudonym: Optional[str] = Field(
        None, description="A name or key that uniquely identifies the user."
    )


class EnvelopeBulkSendSmsOneTimePasswordSignatureData(BaseModel):
    PhoneNumber: Optional[str] = Field(
        None,
        description="The phone number to which the one time password will be sent.",
    )


class EnvelopeBulkSendATrustCertificateSignatureData(BaseModel):
    PhoneNumber: Optional[str] = Field(
        None, description="The phone number of the recipient."
    )


class EnvelopeBulkSendSwedishBankIdSignatureData(BaseModel):
    PersonalNumber: Optional[str] = Field(
        None, description="The personal number for signing."
    )
    AllowAnyPersonalNumber: Optional[bool] = Field(
        None,
        description="If true, the personal number can be edited by the recipient.\r\nIf the personal number is empty and can be edited, a QR code for scanning is provided.",
    )


class EnvelopeBulkSendAccessCodeAuthentication(BaseModel):
    Code: Optional[str] = Field(
        None, description="The code for authenticating the recipient."
    )


class EnvelopeBulkSendSmsOneTimePasswordAuthentication(BaseModel):
    PhoneNumber: Optional[str] = Field(
        None,
        description="The phone number to which the one time password will be sent.",
    )


class EnvelopeBulkSendSwedishBankIdAuthentication(BaseModel):
    PersonalNumber: Optional[str] = Field(
        None, description="The personal number for the authentication."
    )
    AllowAnyPersonalNumber: Optional[bool] = Field(
        None,
        description="If true, the personal number can be edited by the recipient.\r\nIf the personal number is empty and can be edited, a QR code for scanning is provided.",
    )


class EnvelopeBulkSendAttachmentDefinition(BaseModel):
    Position: EnvelopeBulkSendPosition = Field(
        ..., description="The position of the element within the document."
    )
    Size: EnvelopeBulkSendSize = Field(..., description="The size of the element.")


class EnvelopeBulkSendReadingAreaDefinition(BaseModel):
    Position: EnvelopeBulkSendPosition = Field(
        ..., description="The position of the element within the document."
    )
    Size: EnvelopeBulkSendSize = Field(..., description="The size of the element.")


class EnvelopeBulkSendSignaturePluginParameter(BaseModel):
    Key: Optional[str] = Field(None, description="The identifier of the parameter.")
    Value: Optional[str] = Field(None, description="The value of the parameter.")


class EnvelopeBulkSendAuthenticationValidation(BaseModel):
    FieldReferenceId: Optional[str] = Field(
        None, description="The identifier of the field."
    )
    ExpectedValue: Optional[str] = Field(
        None, description="The expected value of the field."
    )


class EnvelopeBulkSendLinkDefinition(BaseModel):
    Position: EnvelopeBulkSendPosition = Field(
        ..., description="The position of the element within the document."
    )
    Size: EnvelopeBulkSendSize = Field(..., description="The size of the element.")


class EnvelopeBulkSendPluginStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayEmail: Optional[bool] = Field(
        None, description="If true, the email address of the signer is displayed."
    )
    DisplayIp: Optional[bool] = Field(
        None, description="If true, the IP address of the signer is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class EnvelopeBulkSendSwedishBankIdStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayTransactionId: Optional[bool] = Field(
        None, description="If true, the transaction identifier is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class EnvelopeBulkSendOneTimePasswordStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayTransactionId: Optional[bool] = Field(
        None, description="If true, the transaction identifier is displayed."
    )
    DisplayTransactionToken: Optional[bool] = Field(
        None, description="If true, the transaction token is displayed."
    )
    DisplayPhoneNumber: Optional[bool] = Field(
        None, description="If true, the phone number of the signer is displayed."
    )
    DisplayIp: Optional[bool] = Field(
        None, description="If true, the IP address of the signer is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class EnvelopeBulkSendRemoteCertificateStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayIp: Optional[bool] = Field(
        None, description="If true, the IP address of the signer is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class EnvelopeBulkSendSwissComOnDemandStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayIp: Optional[bool] = Field(
        None, description="If true, the IP address of the signer is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class EnvelopeBulkSendDisposableCertificateStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayIp: Optional[bool] = Field(
        None, description="If true, the IP address of the signer is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class EnvelopeBulkSendLocalCertificateStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayIp: Optional[bool] = Field(
        None, description="If true, the IP address of the signer is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class EnvelopeBulkSendTypeToSignStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayEmail: Optional[bool] = Field(
        None, description="If true, the email address of the signer is displayed."
    )
    DisplayIp: Optional[bool] = Field(
        None, description="If true, the IP address of the signer is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class EnvelopeBulkSendDrawToSignStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayEmail: Optional[bool] = Field(
        None, description="If true, the email address of the signer is displayed."
    )
    DisplayIp: Optional[bool] = Field(
        None, description="If true, the IP address of the signer is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class EnvelopeBulkSendClickToSignStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayEmail: Optional[bool] = Field(
        None, description="If true, the email address of the signer is displayed."
    )
    DisplayIp: Optional[bool] = Field(
        None, description="If true, the IP address of the signer is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class EnvelopeBulkSendStampImprintDateConfiguration(BaseModel):
    UseLocalTimezone: Optional[bool] = Field(
        None, description="If true, the local timezone is used."
    )
    DateTimeFormat: Optional[str] = Field(
        None, description="The format of the timestamp."
    )


class EnvelopeBulkSendSignaturePluginSignatureType(BaseModel):
    PluginId: Optional[str] = Field(None, description="The identifier of the plugin.")
    Preferred: Optional[bool] = Field(
        None,
        description="If true, the signature type is set as preferred.\r\nOnly one signature type may be marked.",
    )
    StampImprintConfiguration: Optional[EnvelopeBulkSendPluginStampImprint] = Field(
        None, description="The configuration of the stamp imprint of the signature."
    )


class EnvelopeBulkSendSwedishBankIdSignatureType(BaseModel):
    Preferred: Optional[bool] = Field(
        None,
        description="If true, the signature type is set as preferred.\r\nOnly one signature type may be marked.",
    )
    StampImprintConfiguration: Optional[EnvelopeBulkSendSwedishBankIdStampImprint] = (
        Field(
            None, description="The configuration of the stamp imprint of the signature."
        )
    )


class EnvelopeBulkSendOneTimePasswordSignatureType(BaseModel):
    ValidityInSeconds: Optional[int] = Field(
        None, description="The validity of the password in seconds."
    )
    UseExternalSignatureImage: Optional[UseExternalSignatureImage] = Field(
        None, description="The external signature image mode."
    )
    Preferred: Optional[bool] = Field(
        None,
        description="If true, the signature type is set as preferred.\r\nOnly one signature type may be marked.",
    )
    StampImprintConfiguration: Optional[EnvelopeBulkSendOneTimePasswordStampImprint] = (
        Field(
            None, description="The configuration of the stamp imprint of the signature."
        )
    )


class EnvelopeBulkSendRemoteCertificateSignatureType(BaseModel):
    ValidityInSeconds: Optional[int] = Field(
        None, description="The validity of the certificate in seconds."
    )
    UseExternalSignatureImage: Optional[UseExternalSignatureImage] = Field(
        None, description="The external signature image mode."
    )
    Preferred: Optional[bool] = Field(
        None,
        description="If true, the signature type is set as preferred.\r\nOnly one signature type may be marked.",
    )
    StampImprintConfiguration: Optional[
        EnvelopeBulkSendRemoteCertificateStampImprint
    ] = Field(
        None, description="The configuration of the stamp imprint of the signature."
    )


class EnvelopeBulkSendBiometricSignatureType(BaseModel):
    BiometricVerification: Optional[bool] = Field(
        None, description="If true, a biometric verification is performed."
    )
    AllowBiometricStoringOnly: Optional[bool] = Field(
        None,
        description="If true, the biometric signature might be stored without verification.",
    )
    StoreSignedResponseWithoutBioData: Optional[bool] = Field(
        None,
        description="If true, the signed response is stored without biometric data.",
    )
    BiometricServerUserId: Optional[str] = Field(
        None, description="The identifier of the user on the biometric server."
    )
    SignaturePositioning: Optional[SignaturePositioning] = Field(
        None, description="The allowed positioning of the biometric signature."
    )
    Preferred: Optional[bool] = Field(
        None,
        description="If true, the signature type is set as preferred.\r\nOnly one signature type may be marked.",
    )


class EnvelopeBulkSendATrustCertificateSignatureType(BaseModel):
    TemplateId: Optional[str] = Field(
        None, description="The identifier of the A-Trust template."
    )
    Preferred: Optional[bool] = Field(
        None,
        description="If true, the signature type is set as preferred.\r\nOnly one signature type may be marked.",
    )


class EnvelopeBulkSendSwissComOnDemandSignatureType(BaseModel):
    ValidityInSeconds: Optional[int] = Field(
        None, description="The validity of the certificate in seconds."
    )
    Preferred: Optional[bool] = Field(
        None,
        description="If true, the signature type is set as preferred.\r\nOnly one signature type may be marked.",
    )
    StampImprintConfiguration: Optional[
        EnvelopeBulkSendSwissComOnDemandStampImprint
    ] = Field(
        None, description="The configuration of the stamp imprint of the signature."
    )


class EnvelopeBulkSendDisposableCertificateSignatureType(BaseModel):
    IsLongLived: Optional[bool] = Field(
        None, description="If true, the disposable certificate is long lived."
    )
    ValidityInSeconds: Optional[int] = Field(
        None, description="The validity of the certificate in seconds."
    )
    UseExternalSignatureImage: Optional[UseExternalSignatureImage] = Field(
        None, description="The external signature image mode."
    )
    Preferred: Optional[bool] = Field(
        None,
        description="If true, the signature type is set as preferred.\r\nOnly one signature type may be marked.",
    )
    StampImprintConfiguration: Optional[
        EnvelopeBulkSendDisposableCertificateStampImprint
    ] = Field(
        None, description="The configuration of the stamp imprint of the signature."
    )


class EnvelopeBulkSendLocalCertificateSignatureType(BaseModel):
    EnforcePreferredHashAlgorithm: Optional[bool] = Field(
        None,
        description="If true, the usage of the preferred hash algorithm is enforced.",
    )
    PreferredHashAlgorithm: Optional[PreferredHashAlgorithm] = Field(
        None, description="The preferred hash algorithm."
    )
    UseExternalSignatureImage: Optional[UseExternalSignatureImage] = Field(
        None, description="The external signature image mode."
    )
    Preferred: Optional[bool] = Field(
        None,
        description="If true, the signature type is set as preferred.\r\nOnly one signature type may be marked.",
    )
    StampImprintConfiguration: Optional[
        EnvelopeBulkSendLocalCertificateStampImprint
    ] = Field(
        None, description="The configuration of the stamp imprint of the signature."
    )


class EnvelopeBulkSendTypeToSignSignatureType(BaseModel):
    UseExternalSignatureImage: Optional[UseExternalSignatureImage] = Field(
        None, description="The external signature image mode."
    )
    Preferred: Optional[bool] = Field(
        None,
        description="If true, the signature type is set as preferred.\r\nOnly one signature type may be marked.",
    )
    StampImprintConfiguration: Optional[EnvelopeBulkSendTypeToSignStampImprint] = Field(
        None, description="The configuration of the stamp imprint of the signature."
    )


class EnvelopeBulkSendDrawToSignSignatureType(BaseModel):
    UseExternalSignatureImage: Optional[UseExternalSignatureImage] = Field(
        None, description="The external signature image mode."
    )
    Preferred: Optional[bool] = Field(
        None,
        description="If true, the signature type is set as preferred.\r\nOnly one signature type may be marked.",
    )
    StampImprintConfiguration: Optional[EnvelopeBulkSendDrawToSignStampImprint] = Field(
        None, description="The configuration of the stamp imprint of the signature."
    )


class EnvelopeBulkSendClickToSignSignatureType(BaseModel):
    UseExternalSignatureImage: Optional[UseExternalSignatureImage] = Field(
        None, description="The external signature image mode."
    )
    Preferred: Optional[bool] = Field(
        None,
        description="If true, the signature type is set as preferred.\r\nOnly one signature type may be marked.",
    )
    StampImprintConfiguration: Optional[EnvelopeBulkSendClickToSignStampImprint] = (
        Field(
            None, description="The configuration of the stamp imprint of the signature."
        )
    )


class EnvelopeBulkSendDisposableCertificateSignatureData(BaseModel):
    DocumentIssuingCountry: Optional[str] = Field(
        None,
        description="The issuing country of the document.\r\nWill be used as country of residence, if lean is disabled.",
    )
    IdentificationIssuingCountry: Optional[str] = Field(
        None, description="The issuing country of the identification."
    )
    IdentificationType: Optional[IdentificationType] = Field(
        None, description="The type of identification in use."
    )
    PhoneNumber: Optional[str] = Field(
        None, description="The phone number registered for identification."
    )
    DocumentType: Optional[DocumentType] = Field(
        None, description="The type of document used for the identification."
    )
    DocumentIssuedBy: Optional[str] = Field(
        None, description="The authority that issued the document."
    )
    DocumentIssuedOn: Optional[datetime] = Field(
        None,
        description="The date when the document has been issued.\r\nA date in the format RFC 3339, section 5.6, 'full-date' (e.g. 2017-07-21).",
    )
    DocumentExpiryDate: Optional[datetime] = Field(
        None,
        description="The expiration date of the document.\r\nA date in the format RFC 3339, section 5.6, 'full-date' (e.g. 2017-07-21).",
    )
    SerialNumber: Optional[str] = Field(
        None, description="The serial number of the certificate."
    )
    DocumentNumber: Optional[str] = Field(
        None, description="The identifier of the document."
    )


class EnvelopeBulkSendReadDocumentConfirmation(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    Required: Optional[bool] = Field(
        None, description="If true, the element is required."
    )
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    DisplayName: Optional[str] = Field(None, description="The displayed name.")
    GuidingOrder: Optional[int] = Field(None, description="The order of the element.")


class EnvelopeBulkSendReadPagesConfirmation(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    Required: Optional[bool] = Field(
        None, description="If true, the element is required."
    )
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    DisplayName: Optional[str] = Field(None, description="The displayed name.")
    PageNumber: Optional[int] = Field(
        None,
        description="The number of the page that needs to be read. Starting with 1.",
    )
    GuidingOrder: Optional[int] = Field(None, description="The order of the element.")


class EnvelopeBulkSendReadAreaConfirmation(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    Required: Optional[bool] = Field(
        None, description="If true, the element is required."
    )
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    DisplayName: Optional[str] = Field(None, description="The displayed name.")
    GuidingOrder: Optional[int] = Field(None, description="The order of the element.")
    Definition: Optional[EnvelopeBulkSendReadingAreaDefinition] = Field(
        None,
        description="The definition of the area.\r\nWhen adding a new element, it has to be specified .\r\nWhen the field already exists, it must not be specified.",
    )


class EnvelopeBulkSendAttachment(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    Required: Optional[bool] = Field(
        None, description="If true, the element is required."
    )
    DisplayName: Optional[str] = Field(None, description="The displayed name.")
    DisplayIconType: Optional[DisplayIconType] = Field(
        None,
        description="The type of the displayed icon. If no icon is provided Paperclip will be used.",
    )
    GuidingOrder: Optional[int] = Field(None, description="The order of the element.")
    FieldDefinition: Optional[EnvelopeBulkSendAttachmentDefinition] = Field(
        None,
        description="The definition of the attachment element.\r\nIt must be specified when the attachment element is added.\r\nIt must not be specified when the attachment element already exists.",
    )


class EnvelopeBulkSendEmailAppLinks(BaseModel):
    Android: Optional[bool] = Field(
        None, description="If true, an Android app link is added to the email message."
    )
    iOS: Optional[bool] = Field(
        None, description="If true, an iOS app link is added to the email message."
    )
    Windows: Optional[bool] = Field(
        None, description="If true, a Windows app link is added to the email message."
    )


class EnvelopeBulkSendContactInformation(BaseModel):
    Email: str = Field(..., description="The email address of the recipient.")
    GivenName: str = Field(..., description="The given name of the recipient.")
    Surname: str = Field(..., description="The surname of the recipient.")
    PhoneNumber: Optional[str] = Field(
        None, description="The phone number of the recipient."
    )
    LanguageCode: Optional[LanguageCode] = Field(
        None, description="The language of the recipient."
    )


class EnvelopeBulkSendGeneralPoliciesForP7MAction(BaseModel):
    AllowSaveDocument: Optional[bool] = Field(
        None,
        description="If true, the client is allowed to save the workstep document.",
    )
    AllowSaveAuditTrail: Optional[bool] = Field(
        None,
        description="If true, the client is allowed to save the audittrail document.",
    )
    AllowPrintDocument: Optional[bool] = Field(
        None,
        description="If true, the client is allowed to print the workstep document.",
    )
    AllowAdhocPdfAttachments: Optional[bool] = Field(
        None, description="If true, the client is allowed to append adhoc documents."
    )
    AllowRejectWorkstep: Optional[bool] = Field(
        None, description="If true, the client is allowed to reject the workstep."
    )
    AllowUndoLastAction: Optional[bool] = Field(
        None, description="If true, the client is allowed to undo actions."
    )
    AllowDownloadOfSignedP7MFiles: Optional[bool] = Field(
        None, description="If true, the client is allowed to download signed p7m files."
    )


class EnvelopeBulkSendGeneralPoliciesForViewAction(BaseModel):
    AllowSaveDocument: Optional[bool] = Field(
        None,
        description="If true, the client is allowed to save the workstep document.",
    )
    AllowSaveAuditTrail: Optional[bool] = Field(
        None,
        description="If true, the client is allowed to save the audittrail document.",
    )
    AllowPrintDocument: Optional[bool] = Field(
        None,
        description="If true, the client is allowed to print the workstep document.",
    )


class EnvelopeBulkSendGeneralPoliciesForSignAction(BaseModel):
    AllowSaveDocument: Optional[bool] = Field(
        None,
        description="If true, the client is allowed to save the workstep document.",
    )
    AllowSaveAuditTrail: Optional[bool] = Field(
        None,
        description="If true, the client is allowed to save the audittrail document.",
    )
    AllowPrintDocument: Optional[bool] = Field(
        None,
        description="If true, the client is allowed to print the workstep document.",
    )
    AllowAdhocPdfAttachments: Optional[bool] = Field(
        None, description="If true, the client is allowed to append adhoc documents."
    )
    AllowRejectWorkstep: Optional[bool] = Field(
        None, description="If true, the client is allowed to reject the workstep."
    )
    AllowUndoLastAction: Optional[bool] = Field(
        None, description="If true, the client is allowed to undo actions."
    )


class EnvelopeBulkSendVisibleSignature(BaseModel):
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    UseExternalTimestampServer: Optional[bool] = Field(
        None,
        description="If true, a timestamp from an external server is embedded into the signature.",
    )
    FieldDefinition: EnvelopeBulkSendSignatureFieldDefinition = Field(
        ...,
        description="The definition of the signature field.\r\nIt must be specified when the signature field is added.\r\nIt must not be specified when the signature field already exists.",
    )


class EnvelopeBulkSendBasicRecipientConfiguration(BaseModel):
    ContactInformation: EnvelopeBulkSendContactInformation = Field(
        ..., description="The contact information of the recipient."
    )
    PersonalMessage: Optional[str] = Field(
        None, description="The personal message for the recipient."
    )
    NotificationChannel: Optional[NotificationChannel] = Field(
        None,
        description="Which channel is used for sending notifications to the recipient.\r\nDefault Email if not specified.",
    )


class EnvelopeBulkSendRadioButtonItemDefinition(BaseModel):
    ExportValue: Optional[str] = Field(
        None, description="The value of the element when the radio button is checked."
    )
    IsChecked: Optional[bool] = Field(
        None, description="If true, the radio button is checked by default."
    )
    ReadOnly: Optional[bool] = Field(
        None, description="If true, the element is readonly."
    )
    Position: EnvelopeBulkSendPosition = Field(
        ..., description="The position of the element within the document."
    )
    Size: EnvelopeBulkSendSize = Field(..., description="The size of the element.")


class EnvelopeBulkSendTextFormat(BaseModel):
    TextColor: Optional[str] = Field(
        None,
        description="The color of the text. The default color is black.\r\nSix digit hexadecimal color that starts with # in #RRGGBB format according to CSS Color Module Level 4, paragraph 5.2.",
    )
    FontSizeInPt: float = Field(..., description="The size of the font in points.")
    FontName: str = Field(
        ...,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    Bold: Optional[bool] = Field(None, description="If true, the bold font is used.")
    Italic: Optional[bool] = Field(
        None, description="If true, the italic font is used."
    )
    TextAlign: Optional[TextAlign] = Field(
        None, description="The alignment of the text. The default alignment is left."
    )


class Type13(Enum):
    International = "International"
    InternationalLeadingZeros = "InternationalLeadingZeros"
    InternationalLeadingPlus = "InternationalLeadingPlus"


class EnvelopeBulkSendPhoneValidationConfiguration(BaseModel):
    Type: Optional[Type13] = Field(None, description="The format of the phone numbers.")


class EnvelopeBulkSendNumberValidationConfiguration(BaseModel):
    DecimalDigits: Optional[int] = Field(
        None, description="The expected amount of decimal digits."
    )
    Symbol: Optional[str] = Field(None, description="The expected symbol.")
    SymbolLocation: Optional[SymbolLocation] = Field(
        None, description="The defined symbol location."
    )
    GroupSeparator: Optional[GroupSeparator] = Field(
        None, description="The expected thousands separator."
    )
    DecimalSeparator: Optional[DecimalSeparator] = Field(
        None, description="The expected decimal separator."
    )
    Range: Optional[EnvelopeBulkSendFieldValidationRange] = Field(
        None, description="The range of the values."
    )


class EnvelopeBulkSendActionCallbackSelection(BaseModel):
    ConfirmTransactionCode: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when a transaction code was sent. This is only used for legacy disposable certificates, after user accepted issuance of disposable certificate.",
    )
    AgreementAccepted: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when the user accepted the agreement.",
    )
    AgreementRejected: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when the user rejected the agreement.",
    )
    PrepareAuthenticationSuccess: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when the preparation of the authentication process succeeded.",
    )
    AuthenticationFailed: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when the user failed to authenticate.",
    )
    AuthenticationSuccess: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when the user succeeded to authenticate.",
    )
    AuditTrailRequested: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when the audit trail was requested.",
    )
    AuditTrailXmlRequested: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when the audit trail XML was requested.",
    )
    CalledPage: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when the SignAnyWhere Viewer was requested.",
    )
    DocumentDownloaded: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when the document download was requested.",
    )
    FlattenedDocumentDownloaded: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when the flattened document download was requested.",
    )
    AddedAnnotation: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when an annotation was added.",
    )
    AddedAttachment: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when an attachment was added.",
    )
    AppendedDocument: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when a document was appended.",
    )
    FormsFilled: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when a form field was filled.",
    )
    ConfirmReading: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when a reading task was completed.",
    )
    SendTransactionCode: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when a transaction code for a signature with type TransactionCode was sent using the TransactionCodeSenderPlugin.",
    )
    PrepareSignWorkstepDocument: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when a signature was prepared for signing.",
    )
    SignWorkstepDocument: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when a signature was applied.",
    )
    UndoAction: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when an action was undone.",
    )
    WorkstepCreated: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when a workstep was created.",
    )
    WorkstepFinished: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when a workstep was finished.",
    )
    WorkstepRejected: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when a workstep was rejected.",
    )
    DisablePolicyAndValidityChecks: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when policy and validity checks were disabled.",
    )
    EnablePolicyAndValidityChecks: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when policy and validity checks were enabled.",
    )
    AppendFileToWorkstep: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when a file was appended to the workstep.",
    )
    AppendTasksToWorkstep: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when a task was added to the workstep.",
    )
    SetOptionalDocumentState: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when an optional document became either active or inactive.",
    )
    PreparePayloadForBatch: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when the payload was prepared for batch signing.",
    )


class EnvelopeBulkSendSignAutomatic(BaseModel):
    ProfileId: str = Field(
        ..., description="The identifier of the profile for the automatic signatures."
    )
    RenderingLanguageCode: Optional[RenderingLanguageCode] = Field(
        None, description="The rendering language for the automatic signatures."
    )
    VisibleSignatures: Optional[List[EnvelopeBulkSendVisibleSignature]] = Field(
        None,
        description="The visible signatures define the optional visual representations for automatic signatures.\r\nIf none are defined, the automatic signatures are applied to the documents without a visual element.",
        max_items=50,
    )


class EnvelopeBulkSendListBoxDefinition(BaseModel):
    TextFormat: Optional[EnvelopeBulkSendTextFormat] = Field(
        None, description="The configuration of the text format."
    )
    Items: List[EnvelopeBulkSendChoiceItem] = Field(
        ...,
        description="A list of items that can be selected for the element.",
        max_items=50,
        min_items=1,
    )
    IsMultiSelect: Optional[bool] = Field(
        None, description="If true, multiple values of the list box can be selected."
    )
    ReadOnly: Optional[bool] = Field(
        None, description="If true, the element is readonly."
    )
    Position: EnvelopeBulkSendPosition = Field(
        ..., description="The position of the element within the document."
    )
    Size: EnvelopeBulkSendSize = Field(..., description="The size of the element.")


class EnvelopeBulkSendRadioButtonGroupDefinition(BaseModel):
    IsSelectUnison: Optional[bool] = Field(
        None,
        description="If true, radiobuttons with the same <code>ExportValue</code> are checked and unchecked together.",
    )
    Items: Optional[List[EnvelopeBulkSendRadioButtonItemDefinition]] = Field(
        None,
        description="The list of radio buttons that belong to the same group.",
        max_items=50,
    )


class EnvelopeBulkSendComboBoxDefinition(BaseModel):
    TextFormat: Optional[EnvelopeBulkSendTextFormat] = Field(
        None, description="The configuration of the text format."
    )
    Items: List[EnvelopeBulkSendChoiceItem] = Field(
        ...,
        description="A list of items that can be selected for the element.",
        max_items=50,
    )
    IsEditable: Optional[bool] = Field(
        None, description="If true, the combo box is editable."
    )
    ReadOnly: Optional[bool] = Field(
        None, description="If true, the element is readonly."
    )
    Position: EnvelopeBulkSendPosition = Field(
        ..., description="The position of the element within the document."
    )
    Size: EnvelopeBulkSendSize = Field(..., description="The size of the element.")


class EnvelopeBulkSendCheckBoxDefinition(BaseModel):
    ExportValue: Optional[str] = Field(
        None, description="The value of the check box when it is checked."
    )
    Position: EnvelopeBulkSendPosition = Field(
        ..., description="The position of the element within the document."
    )
    Size: EnvelopeBulkSendSize = Field(..., description="The size of the element.")
    ReadOnly: Optional[bool] = Field(
        None, description="If true, the element is readonly."
    )


class EnvelopeBulkSendTextBoxDefinition(BaseModel):
    ReadOnly: Optional[bool] = Field(
        None, description="If true, the element is readonly."
    )
    MaxLength: Optional[int] = Field(
        None, description="The maximum length of the text."
    )
    IsMultiline: Optional[bool] = Field(
        None, description="If true, the text box can have multiple lines."
    )
    IsPassword: Optional[bool] = Field(
        None,
        description="If true, the text box behaves like a password input field and does not show the actually entered characters.",
    )
    TextFormat: Optional[EnvelopeBulkSendTextFormat] = Field(
        None, description="The configuration of the text format."
    )
    Position: EnvelopeBulkSendPosition = Field(
        ..., description="The position of the element within the document."
    )
    Size: EnvelopeBulkSendSize = Field(..., description="The size of the element.")


class EnvelopeBulkSendListBox(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    Required: Optional[bool] = Field(
        None, description="If true, the element is required."
    )
    PreSelectedItems: Optional[List[PreSelectedItem]] = Field(
        None,
        description="The export values of the items which should be initially selected.",
        max_items=50,
    )
    GuidingOrder: Optional[int] = Field(None, description="The order of the element.")
    FieldDefinition: Optional[EnvelopeBulkSendListBoxDefinition] = Field(
        None,
        description="The definition of the list box field.\r\nIt must be specified when the list box is added.\r\nIt must not be specified when the list box already exists.",
    )


class EnvelopeBulkSendRadioButtonGroup(BaseModel):
    GroupName: Optional[str] = Field(
        None, description="The name of the radio button group."
    )
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    Required: Optional[bool] = Field(
        None, description="If true, the element is required."
    )
    SelectedItem: Optional[str] = Field(
        None,
        description="The export value of the selected item of the radio button group.",
    )
    GuidingOrder: Optional[int] = Field(None, description="The order of the element.")
    FieldDefinition: Optional[EnvelopeBulkSendRadioButtonGroupDefinition] = Field(
        None,
        description="The definition of the radio button group.\r\nIt must be specified when the radio button group is added.\r\nIt must not be specified when the radio button group already exists.",
    )


class EnvelopeBulkSendComboBox(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    Required: Optional[bool] = Field(
        None, description="If true, the element is required."
    )
    Value: Optional[str] = Field(
        None, description="The selected value of the combo box."
    )
    GuidingOrder: Optional[int] = Field(None, description="The order of the element.")
    FieldDefinition: Optional[EnvelopeBulkSendComboBoxDefinition] = Field(
        None,
        description="The definition of the combo box.\r\nIt must be specified when the combo box is added.\r\nIt must not be specified when the combo box already exists.",
    )


class EnvelopeBulkSendCheckBox(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    Required: Optional[bool] = Field(
        None, description="If true, the element is required."
    )
    IsChecked: Optional[bool] = Field(
        None, description="If true, the check box is checked."
    )
    GuidingOrder: Optional[int] = Field(None, description="The order of the element.")
    FieldDefinition: Optional[EnvelopeBulkSendCheckBoxDefinition] = Field(
        None,
        description="The definition of the check box.\r\nIt must be specified when the check box is added.\r\nIt must not be specified when the check box already exists.",
    )


class EnvelopeBulkSendExpirationConfiguration(BaseModel):
    ExpirationInSecondsAfterSending: Optional[int] = Field(
        None,
        description="The relative expiration in seconds after sending the envelope.\r\nMust be a positive number between 600 and the maximum envelope validity located in the system configuration [Configuration key: maxEnvelopeValidityInDays, Default: 2419200 seconds (28 days)].\r\nMust not be defined when property <code>ExpirationDate</code> is specified.",
    )
    ExpirationDate: Optional[datetime] = Field(
        None,
        description="The absolute expiration date of the envelope.\r\nMust not be in the past.\r\nMust not be defined when property <code>ExpirationInSecondsAfterSending</code> is specified.\r\nA datetime in the format RFC 3339, section 5.6, 'date-Time' (e.g. 2017-07-21T17:32:28Z).",
    )


class EnvelopeBulkSendReminderConfiguration(BaseModel):
    Enabled: Optional[bool] = Field(None, description="If true, reminders are sent.")
    FirstReminderInDays: Optional[int] = Field(
        None,
        description="The amount of days until a reminder is sent to a signer or a viewer after the initial notification.",
    )
    ReminderResendIntervalInDays: Optional[int] = Field(
        None,
        description="The amount of days until a reminder is sent again to a signer or a viewer.",
    )
    BeforeExpirationInDays: Optional[int] = Field(
        None,
        description="The amount of days before the envelope expires and a reminder should be sent.",
    )


class EnvelopeBulkCancelRequest(BaseModel):
    EnvelopeBulkId: str = Field(
        ..., description="The identifier of the BulkParent envelope."
    )


class EnvelopeBulkDeleteRequest(BaseModel):
    EnvelopeBulkId: str = Field(
        ..., description="The identifier of the BulkParent envelope."
    )


class EnvelopeBulkRemindRequest(BaseModel):
    EnvelopeBulkId: str = Field(
        ..., description="The identifier of the BulkParent envelope."
    )


class EnvelopeBulkRemindResponse(BaseModel):
    TotalSentReminders: Optional[int] = Field(
        None, description="The amount of reminder notifications which were sent out."
    )
    TotalBlockedByRateLimit: Optional[int] = Field(
        None,
        description="The amount of skipped reminder notifications due to rate limit.",
    )
    TotalBlockedByDisabledEmail: Optional[int] = Field(
        None,
        description="The amount of skipped reminder notifications due to disabled notification sending for the recipient.",
    )
    TotalBlockedByNotificationSetting: Optional[int] = Field(
        None,
        description="The amount of skipped reminder notifications due to disabled notifications by the user.",
    )


class EnvelopeBulkRestartExpiredRequest(BaseModel):
    EnvelopeBulkId: str = Field(
        ..., description="The identifier of the BulkParent envelope."
    )
    ExpirationInSecondsAfterSending: Optional[int] = Field(
        None,
        description="The relative expiration in seconds after sending the envelope.\r\nMust be a positive number between 600 and the maximum envelope validity located in the system configuration [Configuration key: maxEnvelopeValidityInDays, Default: 2419200 seconds (28 days)].\r\nMust not be defined when property <code>ExpirationDate</code> is specified.",
    )
    ExpirationDate: Optional[datetime] = Field(
        None,
        description="The absolute expiration date of the envelope.\r\nMust not be in the past.\r\nMust not be defined when property <code>ExpirationInSecondsAfterSending</code> is specified.\r\nA datetime in the format RFC 3339, section 5.6, 'date-Time' (e.g. 2017-07-21T17:32:28Z).",
    )


class FileDeleteRequest(BaseModel):
    FileId: str = Field(..., description="The identifier of the file.")


class FileUploadResponse(BaseModel):
    FileId: Optional[str] = Field(None, description="The identifier of the file.")


class FileId(BaseModel):
    __root__: str


class FilePrepareSigStringConfiguration(BaseModel):
    StartPattern: str = Field(..., description="Define the start pattern.")
    EndPattern: Optional[str] = Field(None, description="Define the end pattern.")
    ClearSigString: Optional[bool] = Field(
        None, description="If true, the parsed SigString is deleted from the document"
    )
    SearchEntireWordOnly: Optional[bool] = Field(
        None, description="If true, the patterns are only matched as a whole word."
    )


class Type14(Enum):
    None_ = "None"
    Date = "Date"
    Email = "Email"
    Number = "Number"
    Phone = "Phone"
    Time = "Time"


class Type15(Enum):
    International = "International"
    InternationalLeadingZeros = "InternationalLeadingZeros"
    InternationalLeadingPlus = "InternationalLeadingPlus"


class FilePreparePhoneValidationConfiguration(BaseModel):
    Type: Optional[Type15] = Field(None, description="The format of the phone numbers.")


class FilePrepareTextFormat(BaseModel):
    TextColor: Optional[str] = Field(
        None,
        description="The color of the text.\r\nSix digit hexadecimal color starting with # in #RRGGBB format according to CSS Color Module Level 4, paragraph 5.2.",
    )
    FontSizeInPt: Optional[float] = Field(
        None, description="The size of the font in points."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    Bold: Optional[bool] = Field(None, description="If true, the bold font is used.")
    Italic: Optional[bool] = Field(
        None, description="If true, the italic font is used."
    )
    TextAlign: Optional[TextAlign] = Field(
        None, description="The alignment of the text. The default alignment is left."
    )


class FilePreparePosition(BaseModel):
    PageNumber: Optional[int] = Field(
        None,
        description="The number of the page where the element is located. It starts with 1.",
    )
    X: Optional[float] = Field(
        None, description="The X coordinate in points. It starts from the left."
    )
    Y: Optional[float] = Field(
        None, description="The Y coordinate in points. It starts from the bottom."
    )


class FilePrepareSize(BaseModel):
    Width: Optional[float] = Field(
        None, description="The width of the element in points."
    )
    Height: Optional[float] = Field(
        None, description="The height of the element in points."
    )


class FilePrepareChoiceItem(BaseModel):
    ExportValue: Optional[str] = Field(
        None, description="The value of the element when the choice item is selected."
    )
    DisplayValue: Optional[str] = Field(
        None, description="The displayed value of the choice item."
    )


class FilePrepareRadioButtonItemDefinition(BaseModel):
    ExportValue: Optional[str] = Field(
        None, description="The value of the element when the radio button is checked."
    )
    IsChecked: Optional[bool] = Field(
        None, description="If true, the radio button is checked by default."
    )
    ReadOnly: Optional[bool] = Field(
        None, description="If true, the element is readonly."
    )
    Position: Optional[FilePreparePosition] = Field(
        None, description="The position of the  within the document."
    )
    Size: Optional[FilePrepareSize] = Field(
        None, description="The size of the form field."
    )


class FilePrepareATrustCertificateSignatureType(BaseModel):
    TemplateId: Optional[str] = Field(
        None, description="The identifier of the A-Trust template."
    )
    Preferred: Optional[bool] = Field(
        None, description="If true, the signature type is set as preferred."
    )


class FilePrepareBiometricSignatureType(BaseModel):
    BiometricVerification: Optional[bool] = Field(
        None, description="If true, a biometric verification is performed."
    )
    AllowBiometricStoringOnly: Optional[bool] = Field(
        None,
        description="If true, the biometric signature might be stored without verification.",
    )
    StoreSignedResponseWithoutBioData: Optional[bool] = Field(
        None,
        description="If true, the signed response is stored without biometric data.",
    )
    BiometricServerUserId: Optional[str] = Field(
        None, description="The identifier of the user on the biometric server."
    )
    SignaturePositioning: Optional[SignaturePositioning] = Field(
        None, description="The allowed positioning of the biometric signature."
    )
    Preferred: Optional[bool] = Field(
        None, description="If true, the signature type is set as preferred."
    )


class FilePrepareStampImprintDateConfiguration(BaseModel):
    UseLocalTimezone: Optional[bool] = Field(
        None, description="If true, the local timezone is used."
    )
    DateTimeFormat: Optional[str] = Field(
        None, description="The format of the timestamp."
    )


class FilePrepareLinkDefinition(BaseModel):
    Position: Optional[FilePreparePosition] = Field(
        None, description="The position of the  within the document."
    )
    Size: Optional[FilePrepareSize] = Field(
        None, description="The size of the form field."
    )


class FilePrepareFieldValidationRange(BaseModel):
    From: Optional[str] = Field(None, description="The lower boundary of the range.")
    To: Optional[str] = Field(None, description="The upper boundary of the range.")


class FilePrepareClickToSignStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayEmail: Optional[bool] = Field(
        None, description="If true, the email address of the signer is displayed."
    )
    DisplayIp: Optional[bool] = Field(
        None, description="If true, the IP address of the signer is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class FilePrepareDrawToSignStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayEmail: Optional[bool] = Field(
        None, description="If true, the email address of the signer is displayed."
    )
    DisplayIp: Optional[bool] = Field(
        None, description="If true, the IP address of the signer is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class FilePrepareTypeToSignStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayEmail: Optional[bool] = Field(
        None, description="If true, the email address of the signer is displayed."
    )
    DisplayIp: Optional[bool] = Field(
        None, description="If true, the IP address of the signer is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class FilePrepareLocalCertificateStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayIp: Optional[bool] = Field(
        None, description="If true, the IP address of the signer is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class FilePrepareDisposableCertificateStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayIp: Optional[bool] = Field(
        None, description="If true, the IP address of the signer is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class FilePrepareSwissComOnDemandStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayIp: Optional[bool] = Field(
        None, description="If true, the IP address of the signer is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class FilePrepareRemoteCertificateStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayIp: Optional[bool] = Field(
        None, description="If true, the IP address of the signer is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class FilePrepareOneTimePasswordStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayTransactionId: Optional[bool] = Field(
        None, description="If true, the transaction identifier is displayed."
    )
    DisplayTransactionToken: Optional[bool] = Field(
        None, description="If true, the transaction token is displayed."
    )
    DisplayPhoneNumber: Optional[bool] = Field(
        None, description="If true, the phone number of the signer is displayed."
    )
    DisplayIp: Optional[bool] = Field(
        None, description="If true, the IP address of the signer is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class FilePrepareSwedishBankIdStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayTransactionId: Optional[bool] = Field(
        None, description="If true, the transaction identifier is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class FilePreparePluginStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayEmail: Optional[bool] = Field(
        None, description="If true, the email address of the signer is displayed."
    )
    DisplayIp: Optional[bool] = Field(
        None, description="If true, the IP address of the signer is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class LicenseGetAmount(BaseModel):
    Limit: Optional[int] = Field(
        None,
        description="The maximum number of licensable objects.\r\nThe value -1 means unlimited.",
    )
    Count: Optional[int] = Field(
        None, description="The amount of licensable objects in use."
    )


class SealingCertificateGetAllEntry(BaseModel):
    Id: Optional[str] = Field(
        None,
        description="Identifier used to reference the certificate for an envelope.",
    )
    CommonName: Optional[str] = Field(
        None, description="Common name of the certificate."
    )
    ExpirationDate: Optional[datetime] = Field(
        None, description="Expiration date of the certificate."
    )
    Thumbprint: Optional[str] = Field(
        None, description="Thumbprint of the certificate."
    )
    IsDefault: Optional[bool] = Field(
        None, description="Is the certificate the default for all envelopes."
    )


class TeamGetAllTeamMember(BaseModel):
    Email: Optional[str] = Field(
        None,
        description="The email address of the team member.\r\nThis references a user email address.",
    )
    Members: Optional[List[TeamGetAllTeamMember]] = Field(
        None, description="The members of the subteam."
    )


class TeamReplaceTeamMember(BaseModel):
    Email: Optional[str] = Field(
        None,
        description="The email address of the team member.\r\nThis references a user email address.",
    )
    Members: Optional[List[TeamReplaceTeamMember]] = Field(
        None, description="The members of the subteam."
    )


class TemplateGetSignAutomatic(BaseModel):
    ProfileId: Optional[str] = Field(
        None, description="The identifier of the profile for the automatic signatures."
    )
    RenderingLanguageCode: Optional[RenderingLanguageCode] = Field(
        None, description="The rendering language for the automatic signatures."
    )


class TemplateGetSignPlaceholder(BaseModel):
    SigningGroup: Optional[int] = Field(
        None, description="The parallel group for sign actions."
    )
    PlaceholderLabel: Optional[str] = Field(
        None, description="The label of the placeholder."
    )


class TemplateGetContactInformation(BaseModel):
    Email: Optional[str] = Field(
        None, description="The email address of the recipient."
    )
    GivenName: Optional[str] = Field(
        None, description="The given name of the recipient."
    )
    Surname: Optional[str] = Field(None, description="The surname of the recipient.")
    PhoneNumber: Optional[str] = Field(
        None, description="The phone number of the recipient."
    )
    LanguageCode: Optional[LanguageCode] = Field(
        None, description="The language of the recipient."
    )


class TemplateGetAdvancedRecipientConfiguration(BaseModel):
    ContactInformation: Optional[TemplateGetContactInformation] = Field(
        None, description="The contact information of the recipient."
    )


class TemplateGetFilesPage(BaseModel):
    PageNumber: Optional[int] = Field(
        None, description="The number of the page. It starts with 1."
    )
    Width: Optional[float] = Field(None, description="The width of the page in points.")
    Height: Optional[float] = Field(
        None, description="The height of the page in points."
    )


class TemplateGetElementsReadPagesConfirmation(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    Required: Optional[bool] = Field(
        None, description="If true, the element is required."
    )
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    DisplayName: Optional[str] = Field(None, description="The displayed name.")
    PageNumber: Optional[int] = Field(
        None, description="The number of the page that needs to be read."
    )
    GuidingOrder: Optional[int] = Field(None, description="The order of the element.")


class TemplateGetElementsReadDocumentConfirmation(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    Required: Optional[bool] = Field(
        None, description="If true, the element is required."
    )
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    DisplayName: Optional[str] = Field(None, description="The displayed name.")
    GuidingOrder: Optional[int] = Field(None, description="The order of the element.")


class Type16(Enum):
    None_ = "None"
    Date = "Date"
    Email = "Email"
    Number = "Number"
    Phone = "Phone"
    Time = "Time"


class Type17(Enum):
    International = "International"
    InternationalLeadingZeros = "InternationalLeadingZeros"
    InternationalLeadingPlus = "InternationalLeadingPlus"


class TemplateGetElementsPhoneValidationConfiguration(BaseModel):
    Type: Optional[Type17] = Field(None, description="The format of the phone numbers.")


class TemplateGetElementsTextFormat(BaseModel):
    TextColor: Optional[str] = Field(
        None,
        description="The color of the text.\r\nSix digit hexadecimal color starting with # in #RRGGBB format according to CSS Color Module Level 4, paragraph 5.2.",
    )
    FontSizeInPt: Optional[float] = Field(
        None, description="The size of the font in points."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    Bold: Optional[bool] = Field(None, description="If true, the bold font is used.")
    Italic: Optional[bool] = Field(
        None, description="If true, the italic font is used."
    )
    TextAlign: Optional[TextAlign] = Field(
        None, description="The alignment of the text. The default alignment is left."
    )


class TemplateGetElementsPosition(BaseModel):
    PageNumber: Optional[int] = Field(
        None,
        description="The number of the page where the element is located. It starts with 1.",
    )
    X: Optional[float] = Field(
        None, description="The X coordinate in points. It starts from the left."
    )
    Y: Optional[float] = Field(
        None, description="The Y coordinate in points. It starts from the bottom."
    )


class TemplateGetElementsSize(BaseModel):
    Width: Optional[float] = Field(
        None, description="The width of the element in points."
    )
    Height: Optional[float] = Field(
        None, description="The height of the element in points."
    )


class TemplateGetElementsChoiceItem(BaseModel):
    ExportValue: Optional[str] = Field(
        None, description="The value of the element when the choice item is selected."
    )
    DisplayValue: Optional[str] = Field(
        None, description="The displayed value of the choice item."
    )


class TemplateGetElementsRadioButtonItemDefinition(BaseModel):
    ExportValue: Optional[str] = Field(
        None, description="The value of the element when the radio button is checked."
    )
    IsChecked: Optional[bool] = Field(
        None, description="If true, the radio button is checked by default."
    )
    ReadOnly: Optional[bool] = Field(
        None, description="If true, the element is readonly."
    )
    Position: Optional[TemplateGetElementsPosition] = Field(
        None, description="The position of the  within the document."
    )
    Size: Optional[TemplateGetElementsSize] = Field(
        None, description="The size of the form field."
    )


class TemplateGetElementsATrustCertificateSignatureType(BaseModel):
    TemplateId: Optional[str] = Field(
        None, description="The identifier of the A-Trust template."
    )
    Preferred: Optional[bool] = Field(
        None, description="If true, the signature type is set as preferred."
    )


class TemplateGetElementsBiometricSignatureType(BaseModel):
    BiometricVerification: Optional[bool] = Field(
        None, description="If true, a biometric verification is performed."
    )
    AllowBiometricStoringOnly: Optional[bool] = Field(
        None,
        description="If true, the biometric signature might be stored without verification.",
    )
    StoreSignedResponseWithoutBioData: Optional[bool] = Field(
        None,
        description="If true, the signed response is stored without biometric data.",
    )
    BiometricServerUserId: Optional[str] = Field(
        None, description="The identifier of the user on the biometric server."
    )
    SignaturePositioning: Optional[SignaturePositioning] = Field(
        None, description="The allowed positioning of the biometric signature."
    )
    Preferred: Optional[bool] = Field(
        None, description="If true, the signature type is set as preferred."
    )


class TemplateGetElementsStampImprintDateConfiguration(BaseModel):
    UseLocalTimezone: Optional[bool] = Field(
        None, description="If true, the local timezone is used."
    )
    DateTimeFormat: Optional[str] = Field(
        None, description="The format of the timestamp."
    )


class TemplateGetElementsPredefinedElementDefinition(BaseModel):
    TextFormat: Optional[TemplateGetElementsTextFormat] = Field(
        None, description="The configuration of the text format."
    )
    Position: Optional[TemplateGetElementsPosition] = Field(
        None, description="The position of the  within the document."
    )
    Size: Optional[TemplateGetElementsSize] = Field(
        None, description="The size of the form field."
    )


class TemplateGetElementsLinkDefinition(BaseModel):
    Position: Optional[TemplateGetElementsPosition] = Field(
        None, description="The position of the  within the document."
    )
    Size: Optional[TemplateGetElementsSize] = Field(
        None, description="The size of the form field."
    )


class TemplateGetElementsFieldValidationRange(BaseModel):
    From: Optional[str] = Field(None, description="The lower boundary of the range.")
    To: Optional[str] = Field(None, description="The upper boundary of the range.")


class TemplateGetElementsClickToSignStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayEmail: Optional[bool] = Field(
        None, description="If true, the email address of the signer is displayed."
    )
    DisplayIp: Optional[bool] = Field(
        None, description="If true, the IP address of the signer is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class TemplateGetElementsDrawToSignStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayEmail: Optional[bool] = Field(
        None, description="If true, the email address of the signer is displayed."
    )
    DisplayIp: Optional[bool] = Field(
        None, description="If true, the IP address of the signer is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class TemplateGetElementsTypeToSignStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayEmail: Optional[bool] = Field(
        None, description="If true, the email address of the signer is displayed."
    )
    DisplayIp: Optional[bool] = Field(
        None, description="If true, the IP address of the signer is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class TemplateGetElementsLocalCertificateStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayIp: Optional[bool] = Field(
        None, description="If true, the IP address of the signer is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class TemplateGetElementsDisposableCertificateStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayIp: Optional[bool] = Field(
        None, description="If true, the IP address of the signer is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class TemplateGetElementsSwissComOnDemandStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayIp: Optional[bool] = Field(
        None, description="If true, the IP address of the signer is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class TemplateGetElementsRemoteCertificateStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayIp: Optional[bool] = Field(
        None, description="If true, the IP address of the signer is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class TemplateGetElementsOneTimePasswordStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayTransactionId: Optional[bool] = Field(
        None, description="If true, the transaction identifier is displayed."
    )
    DisplayTransactionToken: Optional[bool] = Field(
        None, description="If true, the transaction token is displayed."
    )
    DisplayPhoneNumber: Optional[bool] = Field(
        None, description="If true, the phone number of the signer is displayed."
    )
    DisplayIp: Optional[bool] = Field(
        None, description="If true, the IP address of the signer is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class TemplateGetElementsSwedishBankIdStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayTransactionId: Optional[bool] = Field(
        None, description="If true, the transaction identifier is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class TemplateGetElementsPluginStampImprint(BaseModel):
    DisplayExtraInformation: Optional[bool] = Field(
        None, description="If true, the extra information is displayed."
    )
    FontName: Optional[str] = Field(
        None,
        description="The name of the font. The font needs to be installed on the server. \r\nIf it is not available on the server, a fallback font is used.",
    )
    FontSizeInPt: Optional[int] = Field(
        None, description="The size of the font in points."
    )
    DisplayEmail: Optional[bool] = Field(
        None, description="If true, the email address of the signer is displayed."
    )
    DisplayIp: Optional[bool] = Field(
        None, description="If true, the IP address of the signer is displayed."
    )
    DisplayName: Optional[bool] = Field(
        None, description="If true, the name of the signer is displayed."
    )
    DisplaySignatureDate: Optional[bool] = Field(
        None, description="If true, the timestamp of signing is displayed."
    )


class TemplateGetConfigurationEmailConfiguration(BaseModel):
    Subject: Optional[str] = Field(
        None, description="The subject of the sign notifications."
    )
    Message: Optional[str] = Field(
        None, description="The message of the sign notifications."
    )
    SenderDisplayName: Optional[str] = Field(
        None, description="The displayed name of the sender in the notifications."
    )


class TemplateGetConfigurationReminderConfiguration(BaseModel):
    Enabled: Optional[bool] = Field(None, description="If true, reminders are sent.")
    FirstReminderInDays: Optional[int] = Field(
        None,
        description="The amount of days until a reminder is sent to a signer or a viewer after the initial notification.",
    )
    ReminderResendIntervalInDays: Optional[int] = Field(
        None,
        description="The amount of days until a reminder is sent again to a signer or a viewer.",
    )
    BeforeExpirationInDays: Optional[int] = Field(
        None,
        description="The amount of days before the envelope expires and a reminder should be sent.",
    )


class TemplateGetConfigurationExpirationConfiguration(BaseModel):
    ExpirationInSeconds: Optional[int] = Field(
        None,
        description="The relative expiration in seconds after sending the envelope.",
    )
    ExpirationDate: Optional[datetime] = Field(
        None,
        description="The absolute expiration date of the envelope.\r\nA datetime in the format RFC 3339, section 5.6, 'date-Time' (e.g. 2017-07-21T17:32:28Z).",
    )


class TemplateGetConfigurationAgentRedirectConfiguration(BaseModel):
    Policy: Optional[Policy] = Field(
        None,
        description="Defines the redirect target page which should be opened when the agent mode is active.",
    )
    Allow: Optional[bool] = Field(
        None, description="If true, the agent mode can be used."
    )
    IFrameAllowList: Optional[List[str]] = Field(
        None,
        description="The URLs where the designer interface of eSignAnyWhere may be embedded.",
    )


class TemplateGetConfigurationRedirectConfiguration(BaseModel):
    AfterSendRedirectUrl: Optional[str] = Field(
        None,
        description="The URL to redirect to after the envelope was sent successfully.\r\nThis is only applicable when using the eSAW UI.",
    )
    BeforeSendRedirectUrl: Optional[str] = Field(
        None,
        description="The URL to redirect to before the envelope is sent.\r\nThis is only applicable when using the eSAW UI.",
    )


class TemplateGetConfigurationSealingConfiguration(BaseModel):
    CertificateId: Optional[str] = Field(None, description="Sealing certificate used.")


class TemplateGetConfigurationVisibilityOption(BaseModel):
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    IsHidden: Optional[bool] = Field(
        None, description="If true, the referenced document is hidden for the activity."
    )


class TemplateGetConfigurationAgreementTranslation(BaseModel):
    LanguageCode: Optional[LanguageCode] = Field(
        None, description="The language of the translated agreement."
    )
    Text: Optional[str] = Field(None, description="The translated agreement.")
    Header: Optional[str] = Field(
        None, description="The header for the translated agreement."
    )
    IsDefault: Optional[bool] = Field(
        None, description="If true, this translation is used as default."
    )


class TemplateGetConfigurationDefaultSignature(BaseModel):
    IsDefault: Optional[bool] = Field(
        None,
        description="Indicates if the signature type is the default signature type for draft.",
    )


class TemplateGetConfigurationActionCallbackSelection(BaseModel):
    ConfirmTransactionCode: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when a transaction code was sent. This is only used for legacy disposable certificates, after user accepted issuance of disposable certificate.",
    )
    AgreementAccepted: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when the user accepted the agreement.",
    )
    AgreementRejected: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when the user rejected the agreement.",
    )
    PrepareAuthenticationSuccess: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when the preparation of the authentication process succeeded.",
    )
    AuthenticationFailed: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when the user failed to authenticate.",
    )
    AuthenticationSuccess: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when the user succeeded to authenticate.",
    )
    AuditTrailRequested: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when the audit trail was requested.",
    )
    AuditTrailXmlRequested: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when the audit trail XML was requested.",
    )
    CalledPage: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when the SignAnyWhere Viewer was requested.",
    )
    DocumentDownloaded: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when the document download was requested.",
    )
    FlattenedDocumentDownloaded: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when the flattened document download was requested.",
    )
    AddedAnnotation: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when an annotation was added.",
    )
    AddedAttachment: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when an attachment was added.",
    )
    AppendedDocument: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when a document was appended.",
    )
    FormsFilled: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when a form field was filled.",
    )
    ConfirmReading: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when a reading task was completed.",
    )
    SendTransactionCode: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when a transaction code for a signature with type TransactionCode was sent using the TransactionCodeSenderPlugin.",
    )
    PrepareSignWorkstepDocument: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when a signature was prepared for signing.",
    )
    SignWorkstepDocument: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when a signature was applied.",
    )
    UndoAction: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when an action was undone.",
    )
    WorkstepCreated: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when a workstep was created.",
    )
    WorkstepFinished: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when a workstep was finished.",
    )
    WorkstepRejected: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when a workstep was rejected.",
    )
    DisablePolicyAndValidityChecks: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when policy and validity checks were disabled.",
    )
    EnablePolicyAndValidityChecks: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when policy and validity checks were enabled.",
    )
    AppendFileToWorkstep: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when a file was appended to the workstep.",
    )
    AppendTasksToWorkstep: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when a task was added to the workstep.",
    )
    SetOptionalDocumentState: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when an optional document became either active or inactive.",
    )
    PreparePayloadForBatch: Optional[bool] = Field(
        None,
        description="If true, the callback is triggered when the payload was prepared for batch signing.",
    )


class TemplateGetConfigurationBasicRecipientConfiguration(BaseModel):
    PersonalMessage: Optional[str] = Field(
        None, description="The personal message for the recipient."
    )
    NotificationChannel: Optional[NotificationChannel] = Field(
        None,
        description="Which channel is used for sending notifications to the recipient.",
    )


class TemplateGetConfigurationBatchConfiguration(BaseModel):
    Mode: Optional[Mode] = Field(
        None, description="The mode, that will be used for batch signing."
    )
    RequireScrollingOverAllSignaturesBeforeSigning: Optional[bool] = Field(
        None,
        description="If true, the user has to review all signatures in the batch signing dialog before signing.\r\nThis is only applicable when the <code>Mode</code> is set to <code>OptIn</code> or <code>OptOut</code>.",
    )


class TemplateGetConfigurationGeneralPoliciesForSignAction(BaseModel):
    AllowSaveDocument: Optional[bool] = Field(
        None,
        description="If true, the client is allowed to save the workstep document.",
    )
    AllowSaveAuditTrail: Optional[bool] = Field(
        None,
        description="If true, the client is allowed to save the audittrail document.",
    )
    AllowPrintDocument: Optional[bool] = Field(
        None,
        description="If true, the client is allowed to print the workstep document.",
    )
    AllowAdhocPdfAttachments: Optional[bool] = Field(
        None, description="If true, the client is allowed to append adhoc documents."
    )
    AllowRejectWorkstep: Optional[bool] = Field(
        None, description="If true, the client is allowed to reject the workstep."
    )
    AllowUndoLastAction: Optional[bool] = Field(
        None, description="If true, the client is allowed to undo actions."
    )


class TemplateGetConfigurationGeneralPoliciesForViewAction(BaseModel):
    AllowSaveDocument: Optional[bool] = Field(
        None,
        description="If true, the client is allowed to save the workstep document.",
    )
    AllowSaveAuditTrail: Optional[bool] = Field(
        None,
        description="If true, the client is allowed to save the audittrail document.",
    )
    AllowPrintDocument: Optional[bool] = Field(
        None,
        description="If true, the client is allowed to print the workstep document.",
    )


class TemplateGetConfigurationGeneralPoliciesForP7MAction(BaseModel):
    AllowSaveDocument: Optional[bool] = Field(
        None,
        description="If true, the client is allowed to save the workstep document.",
    )
    AllowSaveAuditTrail: Optional[bool] = Field(
        None,
        description="If true, the client is allowed to save the audittrail document.",
    )
    AllowPrintDocument: Optional[bool] = Field(
        None,
        description="If true, the client is allowed to print the workstep document.",
    )
    AllowAdhocPdfAttachments: Optional[bool] = Field(
        None, description="If true, the client is allowed to append adhoc documents."
    )
    AllowRejectWorkstep: Optional[bool] = Field(
        None, description="If true, the client is allowed to reject the workstep."
    )
    AllowUndoLastAction: Optional[bool] = Field(
        None, description="If true, the client is allowed to undo actions."
    )
    AllowDownloadOfSignedP7MFiles: Optional[bool] = Field(
        None, description="If true, the client is allowed to download signed p7m files."
    )


class TemplateGetConfigurationEmailAppLinks(BaseModel):
    Android: Optional[bool] = Field(
        None, description="If true, an Android app link is added to the email message."
    )
    iOS: Optional[bool] = Field(
        None, description="If true, an iOS app link is added to the email message."
    )
    Windows: Optional[bool] = Field(
        None, description="If true, a Windows app link is added to the email message."
    )


class TemplateGetConfigurationWebFinishAction(BaseModel):
    RedirectUri: Optional[str] = Field(None, description="The redirect uri.")


class TemplateGetConfigurationAppFinishAction(BaseModel):
    RemoveDocumentFromRecentDocumentList: Optional[bool] = Field(
        None,
        description="If true, the document will be removed from the recent document list.",
    )
    CallClientActionOnlyAfterSuccessfulSync: Optional[bool] = Field(
        None,
        description="If true, the client action will be called only after a successful sync.",
    )
    CloseApp: Optional[bool] = Field(
        None, description="If true, the app will be closed."
    )
    RedirectUri: Optional[str] = Field(None, description="The redirect uri.")


class TemplateGetConfigurationKioskFinishAction(BaseModel):
    RedirectUri: Optional[str] = Field(None, description="The redirect uri.")


class TemplateGetConfigurationDisposableCertificateSignatureData(BaseModel):
    DocumentIssuingCountry: Optional[str] = Field(
        None,
        description="The issuing country of the document.\r\nWill be used as country of residence, if lean is disabled.",
    )
    IdentificationIssuingCountry: Optional[str] = Field(
        None, description="The issuing country of the identification."
    )
    IdentificationType: Optional[IdentificationType] = Field(
        None, description="The type of identification in use."
    )
    PhoneNumber: Optional[str] = Field(
        None, description="The phone number registered for identification."
    )
    DocumentType: Optional[DocumentType] = Field(
        None, description="The type of document used for the identification."
    )
    DocumentIssuedBy: Optional[str] = Field(
        None, description="The authority that issued the document."
    )
    DocumentIssuedOn: Optional[datetime] = Field(
        None,
        description="The date when the document has been issued.\r\nA date in the format RFC 3339, section 5.6, 'full-date' (e.g. 2017-07-21).",
    )
    DocumentExpiryDate: Optional[datetime] = Field(
        None,
        description="The expiration date of the document.\r\nA date in the format RFC 3339, section 5.6, 'full-date' (e.g. 2017-07-21).",
    )
    SerialNumber: Optional[str] = Field(
        None, description="The serial number of the certificate."
    )
    DocumentNumber: Optional[str] = Field(
        None, description="The identifier of the document."
    )


class TemplateGetConfigurationRemoteCertificateSignatureData(BaseModel):
    UserId: Optional[str] = Field(None, description="The identifier of the user.")
    DeviceId: Optional[str] = Field(None, description="The identifier of the device.")


class TemplateGetConfigurationSwissComOnDemandSignatureData(BaseModel):
    PhoneNumber: Optional[str] = Field(None, description="The phone number.")
    CommonName: Optional[str] = Field(
        None, description="The name of the certificate that is created or checked."
    )
    Country: Optional[str] = Field(None, description="The country.")
    Locality: Optional[str] = Field(None, description="The locality.")
    OrganizationUnit: Optional[str] = Field(
        None, description="The organizational unit."
    )
    Organization: Optional[str] = Field(None, description="The organization.")
    SerialNumber: Optional[str] = Field(None, description="The serial number.")
    StateOrProvince: Optional[str] = Field(None, description="The state or province.")
    Pseudonym: Optional[str] = Field(
        None, description="A name or key that uniquely identifies the user."
    )


class TemplateGetConfigurationSmsOneTimePasswordSignatureData(BaseModel):
    PhoneNumber: Optional[str] = Field(
        None,
        description="The phone number to which the one time password will be sent.",
    )


class TemplateGetConfigurationATrustCertificateSignatureData(BaseModel):
    PhoneNumber: Optional[str] = Field(
        None, description="The phone number of the recipient."
    )


class TemplateGetConfigurationSwedishBankIdSignatureData(BaseModel):
    PersonalNumber: Optional[str] = Field(
        None, description="The personal number for signing."
    )
    AllowAnyPersonalNumber: Optional[bool] = Field(
        None,
        description="If true, the personal number can be edited by the recipient.\r\nIf the personal number is empty and can be edited, a QR code for scanning is provided.",
    )


class TemplateGetConfigurationAccessCodeAuthentication(BaseModel):
    Code: Optional[str] = Field(
        None, description="The code for authenticating the recipient."
    )


class TemplateGetConfigurationSmsOneTimePasswordAuthentication(BaseModel):
    PhoneNumber: Optional[str] = Field(
        None,
        description="The phone number to which the one time password will be sent.",
    )


class TemplateGetConfigurationSwedishBankIdAuthentication(BaseModel):
    PersonalNumber: Optional[str] = Field(
        None, description="The personal number for the authentication."
    )
    AllowAnyPersonalNumber: Optional[bool] = Field(
        None,
        description="If true, the personal number can be edited by the recipient.\r\nIf the personal number is empty and can be edited, a QR code for scanning is provided.",
    )


class TemplateGetConfigurationSignaturePluginParameter(BaseModel):
    Key: Optional[str] = Field(None, description="The identifier of the parameter.")
    Value: Optional[str] = Field(None, description="The value of the parameter.")


class TemplateGetConfigurationAuthenticationValidation(BaseModel):
    FieldReferenceId: Optional[str] = Field(
        None, description="The identifier of the field."
    )
    ExpectedValue: Optional[str] = Field(
        None, description="The expected value of the field."
    )


class TemplateFindRequest(BaseModel):
    SearchText: Optional[str] = Field(
        None,
        description="If set, the given text is searched in following fields:\r\nenvelope name and description\r\nnotification subject and message \r\nsender email address, given name and surname  \r\nrecipient email address, given name and surname\r\nNote: Using this search option is very resource intensive! It might take very long.",
    )
    RecipientEmail: Optional[str] = Field(
        None,
        description="If set, envelopes containing a recipient with the given email address are matched.",
    )


class TemplateFindTemplate(BaseModel):
    Id: Optional[str] = Field(None, description="The identifier of the envelope.")
    Name: Optional[str] = Field(None, description="The name of the envelope.")
    MetaData: Optional[str] = Field(None, description="The metadata of the envelope.")


class TemplateCreateDraftRequest(BaseModel):
    TemplateId: str = Field(..., description="The identifier of the template.")


class TemplateCreateDraftResponse(BaseModel):
    DraftId: Optional[str] = Field(None, description="The identifier of the draft.")


class AuthorizationWhoAmIResponse(BaseModel):
    UserId: Optional[str] = Field(None, description="The identifier of the user.")
    Email: Optional[str] = Field(None, description="The email address of the user.")
    GivenName: Optional[str] = Field(None, description="The given name of the user.")
    Surname: Optional[str] = Field(None, description="The surname of the user.")
    UserName: Optional[str] = Field(
        None,
        description="The user name for synchronizing with an external user provider.",
    )
    Sid: Optional[str] = Field(
        None,
        description="The security identifier for synchronizing an external user provider.",
    )
    SamlAssignments: Optional[List[AuthorizationWhoAmISamlAssignment]] = Field(
        None, description="The SAML providers available for login."
    )
    OAuthAssignments: Optional[List[str]] = Field(
        None, description="The names of the OAuth providers available for login."
    )
    Roles: Optional[List[str]] = Field(
        None, description="The roles assigned to the user."
    )


class AutomaticProfileGetAllResponse(BaseModel):
    RemoteCertificateProfiles: Optional[List[AutomaticProfileGetAllProfile]] = Field(
        None,
        description="The remote certificate profiles available for automatic signing.",
    )
    SignaturePlugins: Optional[
        List[AutomaticProfileGetAllSignaturePluginDefinition]
    ] = Field(
        None, description="The signature plugins available for automatic signing."
    )


class DraftGetSendCopy(BaseModel):
    ContactInformation: Optional[DraftGetContactInformation] = Field(
        None, description="The contact information of the recipient."
    )
    CopyingGroup: Optional[int] = Field(
        None, description="The parallel group for copy actions."
    )


class DraftGetSignBulk(BaseModel):
    RecipientConfigurations: Optional[List[DraftGetAdvancedRecipientConfiguration]] = (
        Field(None, description="The contact information of the recipients.")
    )


class DraftGetSign(BaseModel):
    ContactInformation: Optional[DraftGetContactInformation] = Field(
        None, description="The contact information of the recipient."
    )
    SigningGroup: Optional[int] = Field(
        None, description="The parallel group for sign actions."
    )


class DraftGetView(BaseModel):
    ContactInformation: Optional[DraftGetContactInformation] = Field(
        None, description="The contact information of the recipient."
    )
    ViewingGroup: Optional[int] = Field(
        None, description="The parallel group for view actions."
    )


class DraftGetSignAsP7M(BaseModel):
    ContactInformation: Optional[DraftGetContactInformation] = Field(
        None, description="The contact information of the recipient."
    )
    SignAsP7MGroup: Optional[int] = Field(
        None, description="The parallel group for P7M actions."
    )


class DraftGetFilesDocument(BaseModel):
    FileName: Optional[str] = Field(None, description="The name of the file.")
    PageCount: Optional[int] = Field(None, description="The number of pages.")
    Pages: Optional[List[DraftGetFilesPage]] = Field(
        None, description="The pages of the document."
    )
    DocumentNumber: Optional[int] = Field(
        None, description="The reference number of the document. It starts with 1."
    )


class DraftGetElementsTextBoxDefinition(BaseModel):
    ReadOnly: Optional[bool] = Field(
        None, description="If true, the element is readonly."
    )
    MaxLength: Optional[int] = Field(
        None, description="The maximum length of the text."
    )
    IsMultiline: Optional[bool] = Field(
        None, description="If true, the text box can have multiple lines."
    )
    IsPassword: Optional[bool] = Field(
        None,
        description="If true, the text box behaves like a password input field and does not show the actually entered characters.",
    )
    TextFormat: Optional[DraftGetElementsTextFormat] = Field(
        None, description="The configuration of the text format."
    )
    Position: Optional[DraftGetElementsPosition] = Field(
        None, description="The position of the  within the document."
    )
    Size: Optional[DraftGetElementsSize] = Field(
        None, description="The size of the form field."
    )


class DraftGetElementsCheckBoxDefinition(BaseModel):
    ExportValue: Optional[str] = Field(
        None, description="The value of the check box when it is checked."
    )
    Position: Optional[DraftGetElementsPosition] = Field(
        None, description="The position of the  within the document."
    )
    Size: Optional[DraftGetElementsSize] = Field(
        None, description="The size of the form field."
    )
    ReadOnly: Optional[bool] = Field(
        None, description="If true, the element is readonly."
    )


class DraftGetElementsComboBoxDefinition(BaseModel):
    TextFormat: Optional[DraftGetElementsTextFormat] = Field(
        None, description="The configuration of the text format."
    )
    Items: Optional[List[DraftGetElementsChoiceItem]] = Field(
        None, description="A list of items that can be selected for the element."
    )
    IsEditable: Optional[bool] = Field(
        None, description="If true, the combo box is editable."
    )
    ReadOnly: Optional[bool] = Field(
        None, description="If true, the element is readonly."
    )
    Position: Optional[DraftGetElementsPosition] = Field(
        None, description="The position of the  within the document."
    )
    Size: Optional[DraftGetElementsSize] = Field(
        None, description="The size of the form field."
    )


class DraftGetElementsRadioButtonDefinition(BaseModel):
    IsSelectUnison: Optional[bool] = Field(
        None,
        description="If true, radio buttons with the same <code>ExportValue</code> are checked and unchecked together.",
    )
    Items: Optional[List[DraftGetElementsRadioButtonItemDefinition]] = Field(
        None, description="The list of radiobuttons that belong to the same group."
    )


class DraftGetElementsListBoxDefinition(BaseModel):
    TextFormat: Optional[DraftGetElementsTextFormat] = Field(
        None, description="The configuration of the text format."
    )
    Items: Optional[List[DraftGetElementsChoiceItem]] = Field(
        None, description="A list of items that can be selected for the element."
    )
    IsMultiSelect: Optional[bool] = Field(
        None, description="If true, multiple values of the list box can be selected."
    )
    ReadOnly: Optional[bool] = Field(
        None, description="If true, the element is readonly."
    )
    Position: Optional[DraftGetElementsPosition] = Field(
        None, description="The position of the  within the document."
    )
    Size: Optional[DraftGetElementsSize] = Field(
        None, description="The size of the form field."
    )


class DraftGetElementsSignatureFieldDefinition(BaseModel):
    Position: Optional[DraftGetElementsPosition] = Field(
        None, description="The position of the  within the document."
    )
    Size: Optional[DraftGetElementsSize] = Field(
        None, description="The size of the form field."
    )


class DraftGetElementsSignatureTaskConfiguration(BaseModel):
    StampImprintDateConfiguration: Optional[
        DraftGetElementsStampImprintDateConfiguration
    ] = Field(None, description="The configuration of the stamp imprint date.")
    BatchGroup: Optional[str] = Field(None, description="The batch group.")


class DraftGetElementsAttachmentDefinition(BaseModel):
    Position: Optional[DraftGetElementsPosition] = Field(
        None, description="The position of the  within the document."
    )
    Size: Optional[DraftGetElementsSize] = Field(
        None, description="The size of the form field."
    )


class DraftGetElementsPredefinedText(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    Value: Optional[str] = Field(None, description="The value of the predefined text.")
    FieldDefinition: Optional[DraftGetElementsPredefinedElementDefinition] = Field(
        None, description="The definition of the predefined element."
    )


class DraftGetElementsEmail(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    FieldDefinition: Optional[DraftGetElementsPredefinedElementDefinition] = Field(
        None, description="The definition of the predefined element."
    )


class DraftGetElementsInitials(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    IncludeMiddleNameInitials: Optional[bool] = Field(
        None,
        description="If true, the initials from the middle names are included as well. \r\nThe initials are read from the given name. Additional names are expected to be separated by a space.",
    )
    FieldDefinition: Optional[DraftGetElementsPredefinedElementDefinition] = Field(
        None, description="The definition of the predefined element."
    )


class DraftGetElementsGivenName(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    FieldDefinition: Optional[DraftGetElementsPredefinedElementDefinition] = Field(
        None, description="The definition of the predefined element."
    )


class DraftGetElementsSurname(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    FieldDefinition: Optional[DraftGetElementsPredefinedElementDefinition] = Field(
        None, description="The definition of the predefined element."
    )


class DraftGetElementsFullName(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    FieldDefinition: Optional[DraftGetElementsPredefinedElementDefinition] = Field(
        None, description="The definition of the predefined element."
    )


class DraftGetElementsDate(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    DateFormat: Optional[str] = Field(None, description="The format of the date.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    FieldDefinition: Optional[DraftGetElementsPredefinedElementDefinition] = Field(
        None, description="The definition of the predefined element."
    )


class DraftGetElementsHyperLink(BaseModel):
    Id: Optional[str] = Field(None, description="The identifier of the hyperlink.")
    Uri: Optional[str] = Field(None, description="The URI of the hyperlink.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    FieldDefinition: Optional[DraftGetElementsLinkDefinition] = Field(
        None, description="The definition of the hyperlink element."
    )


class DraftGetElementsReadingAreaDefinition(BaseModel):
    Position: Optional[DraftGetElementsPosition] = Field(
        None, description="The position of the  within the document."
    )
    Size: Optional[DraftGetElementsSize] = Field(
        None, description="The size of the form field."
    )


class DraftGetElementsDateValidationConfiguration(BaseModel):
    DateFormat: Optional[str] = Field(None, description="The format of the dates.")
    Range: Optional[DraftGetElementsFieldValidationRange] = Field(
        None, description="The range of the values."
    )


class DraftGetElementsNumberValidationConfiguration(BaseModel):
    DecimalDigits: Optional[int] = Field(
        None, description="The expected amount of decimal digits."
    )
    Symbol: Optional[str] = Field(None, description="The expected symbol.")
    SymbolLocation: Optional[SymbolLocation] = Field(
        None, description="The defined symbol location."
    )
    GroupSeparator: Optional[GroupSeparator] = Field(
        None, description="The expected thousands separator."
    )
    DecimalSeparator: Optional[DecimalSeparator] = Field(
        None, description="The expected decimal separator."
    )
    Range: Optional[DraftGetElementsFieldValidationRange] = Field(
        None, description="The range of the values."
    )


class DraftGetElementsTimeValidationConfiguration(BaseModel):
    TimeFormat: Optional[str] = Field(
        None, description="The format of the time values."
    )
    Range: Optional[DraftGetElementsFieldValidationRange] = Field(
        None, description="The range of the values."
    )


class DraftGetElementsClickToSignSignatureType(BaseModel):
    UseExternalSignatureImage: Optional[UseExternalSignatureImage] = Field(
        None, description="The external signature image mode."
    )
    Preferred: Optional[bool] = Field(
        None, description="If true, the signature type is set as preferred."
    )
    StampImprintConfiguration: Optional[DraftGetElementsClickToSignStampImprint] = (
        Field(
            None, description="The configuration of the stamp imprint of the signature."
        )
    )


class DraftGetElementsDrawToSignSignatureType(BaseModel):
    UseExternalSignatureImage: Optional[UseExternalSignatureImage] = Field(
        None, description="The external signature image mode."
    )
    Preferred: Optional[bool] = Field(
        None, description="If true, the signature type is set as preferred."
    )
    StampImprintConfiguration: Optional[DraftGetElementsDrawToSignStampImprint] = Field(
        None, description="The configuration of the stamp imprint of the signature."
    )


class DraftGetElementsTypeToSignSignatureType(BaseModel):
    UseExternalSignatureImage: Optional[UseExternalSignatureImage] = Field(
        None, description="The external signature image mode."
    )
    Preferred: Optional[bool] = Field(
        None, description="If true, the signature type is set as preferred."
    )
    StampImprintConfiguration: Optional[DraftGetElementsTypeToSignStampImprint] = Field(
        None, description="The configuration of the stamp imprint of the signature."
    )


class DraftGetElementsLocalCertificateSignatureType(BaseModel):
    EnforcePreferredHashAlgorithm: Optional[bool] = Field(
        None,
        description="If true, the usage of the preferred hash algorithm is enforced.",
    )
    PreferredHashAlgorithm: Optional[PreferredHashAlgorithm] = Field(
        None, description="The preferred hash algorithm."
    )
    UseExternalSignatureImage: Optional[UseExternalSignatureImage] = Field(
        None, description="The external signature image mode."
    )
    Preferred: Optional[bool] = Field(
        None, description="If true, the signature type is set as preferred."
    )
    StampImprintConfiguration: Optional[
        DraftGetElementsLocalCertificateStampImprint
    ] = Field(
        None, description="The configuration of the stamp imprint of the signature."
    )


class DraftGetElementsDisposableCertificateSignatureType(BaseModel):
    IsLongLived: Optional[bool] = Field(
        None, description="If true, the disposable certificate is long lived."
    )
    ValidityInSeconds: Optional[int] = Field(
        None, description="The validity of the certificate in seconds."
    )
    UseExternalSignatureImage: Optional[UseExternalSignatureImage] = Field(
        None, description="The external signature image mode."
    )
    Preferred: Optional[bool] = Field(
        None, description="If true, the signature type is set as preferred."
    )
    StampImprintConfiguration: Optional[
        DraftGetElementsDisposableCertificateStampImprint
    ] = Field(
        None, description="The configuration of the stamp imprint of the signature."
    )


class DraftGetElementsSwissComOnDemandSignatureType(BaseModel):
    ValidityInSeconds: Optional[int] = Field(
        None, description="The certificate validity in seconds."
    )
    Preferred: Optional[bool] = Field(
        None, description="If true, the signature type is set as preferred."
    )
    StampImprintConfiguration: Optional[
        DraftGetElementsSwissComOnDemandStampImprint
    ] = Field(
        None, description="The configuration of the stamp imprint of the signature."
    )


class DraftGetElementsRemoteCertificateSignatureType(BaseModel):
    ValidityInSeconds: Optional[int] = Field(
        None, description="The validity of the certificate in seconds."
    )
    UseExternalSignatureImage: Optional[UseExternalSignatureImage] = Field(
        None, description="The external signature image mode."
    )
    Preferred: Optional[bool] = Field(
        None, description="If true, the signature type is set as preferred."
    )
    StampImprintConfiguration: Optional[
        DraftGetElementsRemoteCertificateStampImprint
    ] = Field(
        None, description="The configuration of the stamp imprint of the signature."
    )


class DraftGetElementsOneTimePasswordSignatureType(BaseModel):
    ValidityInSeconds: Optional[int] = Field(
        None, description="The validity of the password in seconds."
    )
    UseExternalSignatureImage: Optional[UseExternalSignatureImage] = Field(
        None, description="The external signature image mode."
    )
    Preferred: Optional[bool] = Field(
        None, description="If true, the signature type is set as preferred."
    )
    StampImprintConfiguration: Optional[DraftGetElementsOneTimePasswordStampImprint] = (
        Field(
            None, description="The configuration of the stamp imprint of the signature."
        )
    )


class DraftGetElementsSwedishBankIdSignatureType(BaseModel):
    Preferred: Optional[bool] = Field(
        None, description="If true, the signature type is set as preferred."
    )
    StampImprintConfiguration: Optional[DraftGetElementsSwedishBankIdStampImprint] = (
        Field(
            None, description="The configuration of the stamp imprint of the signature."
        )
    )


class DraftGetElementsSignaturePluginSignatureType(BaseModel):
    PluginId: Optional[str] = Field(None, description="The identifier of the plugin.")
    Preferred: Optional[bool] = Field(
        None, description="If true, the signature type is set as preferred."
    )
    StampImprintConfiguration: Optional[DraftGetElementsPluginStampImprint] = Field(
        None, description="The configuration of the stamp imprint of the signature."
    )


class DraftGetElementsVisibleSignature(BaseModel):
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    Id: Optional[str] = Field(
        None, description="The identifier of the signature field."
    )
    UseExternalTimestampServer: Optional[bool] = Field(
        None,
        description="If true, a timestamp from an external server is embedded into the signature.",
    )
    FieldDefinition: Optional[DraftGetElementsSignatureFieldDefinition] = Field(
        None, description="The definition of the signature field."
    )


class DraftGetConfigurationAgreementConfiguration(BaseModel):
    Translations: Optional[List[DraftGetConfigurationAgreementTranslation]] = Field(
        None,
        description="The agreement and its translations to be used.\r\nIf no custom agreement is specified, the default organization agreement will be used.",
    )


class DraftGetConfigurationDefaultSignatureTypeConfiguration(BaseModel):
    None_: Optional[DraftGetConfigurationDefaultSignature] = Field(
        None, alias="None", description='"None" SignatureType.'
    )
    ClickToSign: Optional[DraftGetConfigurationDefaultSignature] = Field(
        None, description='"click to sign" SignatureType.'
    )
    DrawToSign: Optional[DraftGetConfigurationDefaultSignature] = Field(
        None, description='"draw to sign" SignatureType.'
    )
    TypeToSign: Optional[DraftGetConfigurationDefaultSignature] = Field(
        None, description='"type to sign" SignatureType.'
    )
    LocalCertificate: Optional[DraftGetConfigurationDefaultSignature] = Field(
        None, description='"local certificate" SignatureType.'
    )
    DisposableCertificate: Optional[DraftGetConfigurationDefaultSignature] = Field(
        None, description='"disposable certificate" SignatureType.'
    )
    Biometric: Optional[DraftGetConfigurationDefaultSignature] = Field(
        None, description='"biometric signature" SignatureType.'
    )
    RemoteCertificate: Optional[DraftGetConfigurationDefaultSignature] = Field(
        None, description='"remote certificate" SignatureType.'
    )
    OneTimePassword: Optional[DraftGetConfigurationDefaultSignature] = Field(
        None, description='"one time password (SMS-OTP)" SignatureType.'
    )


class DraftGetConfigurationActivityActionCallbackConfiguration(BaseModel):
    Url: Optional[str] = Field(
        None, description="The callback URL triggered for the selected events."
    )
    ActionCallbackSelection: Optional[DraftGetConfigurationActionCallbackSelection] = (
        Field(None, description="The selection of events which trigger the callback.")
    )


class DraftGetConfigurationSendCopy(BaseModel):
    RecipientConfiguration: Optional[
        DraftGetConfigurationBasicRecipientConfiguration
    ] = Field(None, description="The configuration of the recipient.")
    CopyingGroup: Optional[int] = Field(
        None, description="The parallel group for copy actions."
    )


class DraftGetConfigurationFinishAction(BaseModel):
    SignAnyWhereViewer: Optional[DraftGetConfigurationWebFinishAction] = Field(
        None, description="The actions for the SAW Viewer."
    )
    SignificantClientSignatureCaptureForIos: Optional[
        DraftGetConfigurationAppFinishAction
    ] = Field(
        None,
        description="The actions for the SIGNificant Client Signature Capture App for iOS.",
    )
    SignificantClientSignatureCaptureForAndroid: Optional[
        DraftGetConfigurationAppFinishAction
    ] = Field(
        None,
        description="The actions for the SIGNificant Client Signature Capture App for Android.",
    )
    SignificantClientSignatureCaptureForWindows: Optional[
        DraftGetConfigurationAppFinishAction
    ] = Field(
        None,
        description="The actions for the SIGNificant Client Signature Capture App for Windows.",
    )
    KioskSdk: Optional[DraftGetConfigurationKioskFinishAction] = Field(
        None, description="The actions for the SIGNificant Kiosk SDK."
    )


class DraftGetConfigurationSignaturePluginSignatureData(BaseModel):
    PluginId: Optional[str] = Field(
        None, description="The identifier of the signature plugin."
    )
    Fields: Optional[List[DraftGetConfigurationSignaturePluginParameter]] = Field(
        None,
        description="The plugin parameters referred to as the GSP sender data fields.",
    )


class DraftGetConfigurationOAuthAuthentication(BaseModel):
    ProviderName: Optional[str] = Field(
        None, description="The name of the OAuth provider."
    )
    Validations: Optional[List[DraftGetConfigurationAuthenticationValidation]] = Field(
        None, description="The validation rules for the OAuth response."
    )


class DraftGetConfigurationSamlAuthentication(BaseModel):
    ProviderName: Optional[str] = Field(
        None, description="The name of the SAML provider."
    )
    Validations: Optional[List[DraftGetConfigurationAuthenticationValidation]] = Field(
        None, description="The validation rules for the SAML response."
    )


class DraftFindResponse(BaseModel):
    Drafts: Optional[List[DraftFindDraft]] = Field(
        None, description="The drafts which match the search criteria."
    )


class EnvelopeBulkSendResponse(BaseModel):
    EnvelopeBulkChildren: Optional[List[EnvelopeBulkSendChild]] = Field(
        None, description="The information about the created BulkChild envelopes."
    )
    EnvelopeBulkParentId: Optional[str] = Field(
        None, description="The identifier of the BulkParent envelope."
    )


class DraftCreateAgreementConfiguration(BaseModel):
    Translations: Optional[List[DraftCreateAgreementTranslation]] = Field(
        None,
        description="The agreement and its translations to be used.\r\nIf no custom agreement is specified, the default organization agreement will be used.",
        max_items=228,
    )


class DraftCreateDefaultSignatureTypeConfiguration(BaseModel):
    None_: Optional[DraftCreateDefaultSignature] = Field(
        None, alias="None", description='"None" SignatureType.'
    )
    ClickToSign: Optional[DraftCreateDefaultSignature] = Field(
        None, description='"click to sign" SignatureType.'
    )
    DrawToSign: Optional[DraftCreateDefaultSignature] = Field(
        None, description='"draw to sign" SignatureType.'
    )
    TypeToSign: Optional[DraftCreateDefaultSignature] = Field(
        None, description='"type to sign" SignatureType.'
    )
    LocalCertificate: Optional[DraftCreateDefaultSignature] = Field(
        None, description='"local certificate" SignatureType.'
    )
    DisposableCertificate: Optional[DraftCreateDefaultSignature] = Field(
        None, description='"disposable certificate" SignatureType.'
    )
    Biometric: Optional[DraftCreateDefaultSignature] = Field(
        None, description='"biometric signature" SignatureType.'
    )
    RemoteCertificate: Optional[DraftCreateDefaultSignature] = Field(
        None, description='"remote certificate" SignatureType.'
    )
    OneTimePassword: Optional[DraftCreateDefaultSignature] = Field(
        None, description='"one time password (SMS-OTP)" SignatureType.'
    )


class DraftCreateActivityActionCallbackConfiguration(BaseModel):
    Url: str = Field(
        ..., description="The callback URL triggered for the selected events."
    )
    ActionCallbackSelection: Optional[DraftCreateActionCallbackSelection] = Field(
        None, description="The selection of events which trigger the callback."
    )


class DraftCreateSignatureFieldDefinition(BaseModel):
    Position: DraftCreatePosition = Field(
        ..., description="The position of the element within the document."
    )
    Size: DraftCreateSize = Field(..., description="The size of the element.")


class DraftCreateSignatureTaskConfiguration(BaseModel):
    StampImprintDateConfiguration: Optional[
        DraftCreateStampImprintDateConfiguration
    ] = Field(None, description="The configuration of the stamp imprint date.")
    BatchGroup: Optional[str] = Field(None, description="The batch group.")


class DraftCreateAttachmentDefinition(BaseModel):
    Position: DraftCreatePosition = Field(
        ..., description="The position of the element within the document."
    )
    Size: DraftCreateSize = Field(..., description="The size of the element.")


class DraftCreateHyperLink(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    Uri: Optional[str] = Field(None, description="The URI of the hyperlink.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    FieldDefinition: Optional[DraftCreateLinkDefinition] = Field(
        None,
        description="The definition of the hyperlink element.\r\nIt must be specified when the hyperlink element is added.\r\nIt must not be specified when the hyperlink element already exists.",
    )


class DraftCreateReadingAreaDefinition(BaseModel):
    Position: DraftCreatePosition = Field(
        ..., description="The position of the element within the document."
    )
    Size: DraftCreateSize = Field(..., description="The size of the element.")


class DraftCreateSendCopy(BaseModel):
    RecipientConfiguration: Optional[DraftCreateBasicRecipientConfiguration] = Field(
        None, description="The configuration of the recipient."
    )
    CopyingGroup: Optional[str] = Field(
        None, description="The group for defining parallel copy actions."
    )


class DraftCreateDateValidationConfiguration(BaseModel):
    DateFormat: Optional[str] = Field(None, description="The format of the dates.")
    Range: Optional[DraftCreateFieldValidationRange] = Field(
        None, description="The range of the values."
    )


class DraftCreateTimeValidationConfiguration(BaseModel):
    TimeFormat: Optional[str] = Field(
        None, description="The format of the time values."
    )
    Range: Optional[DraftCreateFieldValidationRange] = Field(
        None, description="The range of the values."
    )


class DraftCreatePredefinedElementDefinition(BaseModel):
    TextFormat: Optional[DraftCreateTextFormat] = Field(
        None, description="The configuration of the text format."
    )
    Position: DraftCreatePosition = Field(
        ..., description="The position of the element within the document."
    )
    Size: DraftCreateSize = Field(..., description="The size of the element.")


class DraftCreateFinishAction(BaseModel):
    SignAnyWhereViewer: Optional[DraftCreateClientFinishAction] = Field(
        None, description="The actions for the SAW Viewer."
    )
    SignificantClientSignatureCaptureForIos: Optional[DraftCreateAppFinishAction] = (
        Field(
            None,
            description="The actions for the SIGNificant Client Signature Capture App for iOS.",
        )
    )
    SignificantClientSignatureCaptureForAndroid: Optional[
        DraftCreateAppFinishAction
    ] = Field(
        None,
        description="The actions for the SIGNificant Client Signature Capture App for Android.",
    )
    SignificantClientSignatureCaptureForWindows: Optional[
        DraftCreateAppFinishAction
    ] = Field(
        None,
        description="The actions for the SIGNificant Client Signature Capture App for Windows.",
    )
    KioskSdk: Optional[DraftCreateKioskFinishAction] = Field(
        None, description="The actions for the SIGNificant Kiosk SDK."
    )


class DraftCreateLocalCertificateSignatureType(BaseModel):
    EnforcePreferredHashAlgorithm: Optional[bool] = Field(
        None,
        description="If true, the usage of the preferred hash algorithm is enforced.",
    )
    PreferredHashAlgorithm: Optional[PreferredHashAlgorithm] = Field(
        None, description="The preferred hash algorithm."
    )
    UseExternalSignatureImage: Optional[UseExternalSignatureImage] = Field(
        None, description="The external signature image mode."
    )
    Preferred: Optional[bool] = Field(
        None,
        description="If true, the signature type is set as preferred.\r\nOnly one signature type may be marked.",
    )
    StampImprintConfiguration: Optional[DraftCreateLocalCertificateStampImprint] = (
        Field(
            None, description="The configuration of the stamp imprint of the signature."
        )
    )


class DraftCreateSignaturePluginSignatureData(BaseModel):
    PluginId: Optional[str] = Field(
        None, description="The identifier of the signature plugin."
    )
    Fields: Optional[List[DraftCreateSignaturePluginParameter]] = Field(
        None,
        description="The plugin parameters referred to as the GSP sender data fields.",
        max_items=50,
    )


class DraftCreateOAuthAuthentication(BaseModel):
    ProviderName: Optional[str] = Field(
        None, description="The name of the OAuth provider."
    )
    Validations: Optional[List[DraftCreateAuthenticationValidation]] = Field(
        None, description="The validation rules for the OAuth response.", max_items=100
    )


class DraftCreateSamlAuthentication(BaseModel):
    ProviderName: Optional[str] = Field(
        None, description="The name of the SAML provider."
    )
    Validations: Optional[List[DraftCreateAuthenticationValidation]] = Field(
        None, description="The validation rules for the SAML response.", max_items=100
    )


class DraftCreateP7MSignatureMethods(BaseModel):
    LocalCertificate: Optional[bool] = Field(
        None, description="If true, a local certificate can be used."
    )
    DisposableCertificate: Optional[DraftCreateDisposableCertificateSignatureData] = (
        Field(
            None, description="The disposable certificate configuration for the action."
        )
    )
    RemoteCertificate: Optional[DraftCreateRemoteCertificateSignatureData] = Field(
        None, description="The remote certificate configuration for the action."
    )
    SignaturePluginData: Optional[List[DraftCreateSignaturePluginSignatureData]] = (
        Field(
            None,
            description="The signature plugin configurations for the action.",
            max_items=20,
        )
    )


class DraftCreateVisibleSignature(BaseModel):
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    UseExternalTimestampServer: Optional[bool] = Field(
        None,
        description="If true, a timestamp from an external server is embedded into the signature.",
    )
    FieldDefinition: DraftCreateSignatureFieldDefinition = Field(
        ...,
        description="The definition of the signature field.\r\nIt must be specified when the signature field is added.\r\nIt must not be specified when the signature field already exists.",
    )


class DraftCreateSignAutomatic(BaseModel):
    ProfileId: Optional[str] = Field(
        None, description="The identifier of the profile for the automatic signatures."
    )
    RenderingLanguageCode: Optional[RenderingLanguageCode] = Field(
        None, description="The rendering language for the automatic signatures."
    )
    VisibleSignatures: Optional[List[DraftCreateVisibleSignature]] = Field(
        None,
        description="The visible signatures define the optional visual representations for automatic signatures.\r\nIf none are defined, the automatic signatures are applied to the documents without a visual element.",
        max_items=50,
    )


class DraftCreateInitials(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    IncludeMiddleNameInitials: Optional[bool] = Field(
        None,
        description="If true, the initials from the middle names are included as well. \r\nThe initials are read from the given name. Additional names are expected to be separated by a space.",
    )
    FieldDefinition: Optional[DraftCreatePredefinedElementDefinition] = Field(
        None,
        description="The definition of the predefined element.\r\nIt must be specified when the predefined element is added.\r\nIt must not be specified when the predefined element already exists.",
    )


class DraftCreateReadAreaConfirmation(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    Required: Optional[bool] = Field(
        None, description="If true, the element is required."
    )
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    DisplayName: Optional[str] = Field(None, description="The displayed name.")
    GuidingOrder: Optional[int] = Field(None, description="The order of the element.")
    Definition: Optional[DraftCreateReadingAreaDefinition] = Field(
        None,
        description="The definition of the area.\r\nWhen adding a new element, it has to be specified .\r\nWhen the field already exists, it must not be specified.",
    )


class DraftCreateCallbackConfiguration(BaseModel):
    CallbackUrl: Optional[str] = Field(
        None,
        description="The callback URL triggered when the envelope has been finished.",
    )
    StatusUpdateCallbackUrl: Optional[str] = Field(
        None,
        description="The callback URL triggered for status updates of an envelope.",
    )
    AfterSendCallbackUrl: Optional[str] = Field(
        None, description="The callback URL triggered after sending the draft."
    )
    ActivityActionCallbackConfiguration: Optional[
        DraftCreateActivityActionCallbackConfiguration
    ] = Field(
        None, description="The configuration of the callback for workstep events."
    )


class DraftUpdateAgreementConfiguration(BaseModel):
    Translations: Optional[List[DraftUpdateAgreementTranslation]] = Field(
        None,
        description="The agreement and its translations to be used.\r\nIf no custom agreement is specified, the default organization agreement will be used.",
        max_items=228,
    )


class DraftUpdateDefaultSignatureTypeConfiguration(BaseModel):
    None_: Optional[DraftUpdateDefaultSignature] = Field(
        None, alias="None", description='"None" SignatureType.'
    )
    ClickToSign: Optional[DraftUpdateDefaultSignature] = Field(
        None, description='"click to sign" SignatureType.'
    )
    DrawToSign: Optional[DraftUpdateDefaultSignature] = Field(
        None, description='"draw to sign" SignatureType.'
    )
    TypeToSign: Optional[DraftUpdateDefaultSignature] = Field(
        None, description='"type to sign" SignatureType.'
    )
    LocalCertificate: Optional[DraftUpdateDefaultSignature] = Field(
        None, description='"local certificate" SignatureType.'
    )
    DisposableCertificate: Optional[DraftUpdateDefaultSignature] = Field(
        None, description='"disposable certificate" SignatureType.'
    )
    Biometric: Optional[DraftUpdateDefaultSignature] = Field(
        None, description='"biometric signature" SignatureType.'
    )
    RemoteCertificate: Optional[DraftUpdateDefaultSignature] = Field(
        None, description='"remote certificate" SignatureType.'
    )
    OneTimePassword: Optional[DraftUpdateDefaultSignature] = Field(
        None, description='"one time password (SMS-OTP)" SignatureType.'
    )


class DraftUpdateActivityActionCallbackConfiguration(BaseModel):
    Url: str = Field(
        ..., description="The callback URL triggered for the selected events."
    )
    ActionCallbackSelection: Optional[DraftUpdateActionCallbackSelection] = Field(
        None, description="The selection of events which trigger the callback."
    )


class DraftUpdateCallbackConfiguration(BaseModel):
    CallbackUrl: Optional[str] = Field(
        None,
        description="The callback URL triggered when the envelope has been finished.",
    )
    StatusUpdateCallbackUrl: Optional[str] = Field(
        None,
        description="The callback URL triggered for status updates of an envelope.",
    )
    AfterSendCallbackUrl: Optional[str] = Field(
        None, description="The callback URL triggered after sending the draft."
    )
    ActivityActionCallbackConfiguration: Optional[
        DraftUpdateActivityActionCallbackConfiguration
    ] = Field(
        None, description="The configuration of the callback for workstep events."
    )


class DraftUpdateRequest(BaseModel):
    DraftId: str = Field(..., description="The identifier of the draft.")
    Name: Optional[str] = Field(None, description="The name of the envelope.")
    MetaData: Optional[str] = Field(None, description="The metadata of the envelope.")
    AddDocumentTimestamp: Optional[bool] = Field(
        None,
        description="If true, a timestamp is added to all documents of the envelope at the end of each signing activity.",
    )
    ShareWithTeam: Optional[bool] = Field(
        None, description="If true, this envelope is shared with your teams."
    )
    LockFormFieldsOnFinish: Optional[bool] = Field(
        None,
        description="If true, form fields are locked after the envelope is finished.",
    )
    SendFinishedDocumentsToAllSignersAndMustView: Optional[bool] = Field(
        None,
        description="If true, every signer and viewer will receive a copy of the finished documents.",
    )
    SealingConfiguration: Optional[DraftUpdateSealingConfiguration] = Field(
        None, description="The configuration for envelope sealing."
    )
    EmailConfiguration: Optional[DraftUpdateEmailConfiguration] = Field(
        None, description="The configuration for notifications."
    )
    ReminderConfiguration: Optional[DraftUpdateReminderConfiguration] = Field(
        None, description="The configuration for reminders."
    )
    ExpirationConfiguration: Optional[DraftUpdateExpirationConfiguration] = Field(
        None, description="The configuration of the expiration for the envelope."
    )
    CallbackConfiguration: Optional[DraftUpdateCallbackConfiguration] = Field(
        None, description="The configuration of the callbacks for a custom integration."
    )
    AgentRedirectConfiguration: Optional[DraftUpdateAgentRedirectConfiguration] = Field(
        None, description="The configuration of the redirects for the agent mode."
    )
    AgreementConfiguration: Optional[DraftUpdateAgreementConfiguration] = Field(
        None,
        description="The configuration of the agreement.\r\nRequires that the organization allows custom agreement settings.",
    )
    RedirectConfiguration: Optional[DraftUpdateRedirectConfiguration] = Field(
        None, description="The configuration of the draft redirect URLs."
    )
    DefaultSignatureTypeConfiguration: Optional[
        DraftUpdateDefaultSignatureTypeConfiguration
    ] = Field(
        None,
        description="A default signature type to be used only for the draft that overwrites the default signature type of the organization.",
    )


class DraftReorderActivitiesAction(BaseModel):
    View: Optional[DraftReorderActivitiesView] = Field(
        None, description="Define groups for parallel view actions."
    )
    Copy: Optional[DraftReorderActivitiesCopy] = Field(
        None, description="Define groups for parallel copy actions."
    )
    Sign: Optional[DraftReorderActivitiesSign] = Field(
        None, description="Define groups for parallel sign actions."
    )
    SignAsP7M: Optional[DraftReorderActivitiesSignAsP7M] = Field(
        None, description="Define groups for parallel P7M sign actions."
    )


class DraftActivityReplaceSendCopy(BaseModel):
    RecipientConfiguration: Optional[
        DraftActivityReplaceBasicRecipientConfiguration
    ] = Field(None, description="The configuration of the recipient.")


class DraftActivityReplaceFinishAction(BaseModel):
    SignAnyWhereViewer: Optional[DraftActivityReplaceClientFinishAction] = Field(
        None, description="The actions for the SAW Viewer."
    )
    SignificantClientSignatureCaptureForIos: Optional[
        DraftActivityReplaceAppFinishAction
    ] = Field(
        None,
        description="The actions for the SIGNificant Client Signature Capture App for iOS.",
    )
    SignificantClientSignatureCaptureForAndroid: Optional[
        DraftActivityReplaceAppFinishAction
    ] = Field(
        None,
        description="The actions for the SIGNificant Client Signature Capture App for Android.",
    )
    SignificantClientSignatureCaptureForWindows: Optional[
        DraftActivityReplaceAppFinishAction
    ] = Field(
        None,
        description="The actions for the SIGNificant Client Signature Capture App for Windows.",
    )
    KioskSdk: Optional[DraftActivityReplaceKioskFinishAction] = Field(
        None, description="The actions for the SIGNificant Kiosk SDK."
    )


class DraftActivityReplaceSignatureFieldDefinition(BaseModel):
    Position: DraftActivityReplacePosition = Field(
        ..., description="The position of the element within the document."
    )
    Size: DraftActivityReplaceSize = Field(..., description="The size of the element.")


class DraftActivityReplaceSignaturePluginSignatureData(BaseModel):
    PluginId: Optional[str] = Field(
        None, description="The identifier of the signature plugin."
    )
    Fields: Optional[List[DraftActivityReplaceSignaturePluginParameter]] = Field(
        None,
        description="The plugin parameters referred to as the GSP sender data fields.",
        max_items=50,
    )


class DraftActivityReplaceOAuthAuthentication(BaseModel):
    ProviderName: Optional[str] = Field(
        None, description="The name of the OAuth provider."
    )
    Validations: Optional[List[DraftActivityReplaceAuthenticationValidation]] = Field(
        None, description="The validation rules for the OAuth response.", max_items=100
    )


class DraftActivityReplaceSamlAuthentication(BaseModel):
    ProviderName: Optional[str] = Field(
        None, description="The name of the SAML provider."
    )
    Validations: Optional[List[DraftActivityReplaceAuthenticationValidation]] = Field(
        None, description="The validation rules for the SAML response.", max_items=100
    )


class DraftActivityReplaceAllowedSignatureTypes(BaseModel):
    ClickToSign: Optional[DraftActivityReplaceClickToSignSignatureType] = Field(
        None, description='Allow signing with "click to sign".'
    )
    DrawToSign: Optional[DraftActivityReplaceDrawToSignSignatureType] = Field(
        None, description='Allow signing with "draw to sign".'
    )
    TypeToSign: Optional[DraftActivityReplaceTypeToSignSignatureType] = Field(
        None, description='Allow signing with "type to sign".'
    )
    LocalCertificate: Optional[DraftActivityReplaceLocalCertificateSignatureType] = (
        Field(None, description="Allow signing with a local certificate.")
    )
    DisposableCertificate: Optional[
        DraftActivityReplaceDisposableCertificateSignatureType
    ] = Field(None, description="Allow signing with a disposable certificate.")
    SwissComOnDemand: Optional[DraftActivityReplaceSwissComOnDemandSignatureType] = (
        Field(None, description="Allow signing with a Swisscom On-Demand certificate.")
    )
    ATrustCertificate: Optional[DraftActivityReplaceATrustCertificateSignatureType] = (
        Field(None, description="Allow signing with an A-Trust certificate.")
    )
    Biometric: Optional[DraftActivityReplaceBiometricSignatureType] = Field(
        None, description="Allow signing with a biometric signature."
    )
    RemoteCertificate: Optional[DraftActivityReplaceRemoteCertificateSignatureType] = (
        Field(None, description="Allow signing with a remote certificate.")
    )
    OneTimePassword: Optional[DraftActivityReplaceOneTimePasswordSignatureType] = Field(
        None, description="Allow signing with a one time password (SMS-OTP)."
    )
    SwedishBankId: Optional[DraftActivityReplaceSwedishBankIdSignatureType] = Field(
        None, description="Allow signing with Swedish BankID."
    )
    SignaturePlugins: Optional[
        List[DraftActivityReplaceSignaturePluginSignatureType]
    ] = Field(None, description="Allow signing with signature plugins.", max_items=20)


class DraftActivityReplaceSignatureTaskConfiguration(BaseModel):
    StampImprintDateConfiguration: Optional[
        DraftActivityReplaceStampImprintDateConfiguration
    ] = Field(None, description="The configuration of the stamp imprint date.")
    BatchGroup: Optional[str] = Field(None, description="The batch group.")


class DraftActivityReplaceHyperLink(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    Uri: Optional[str] = Field(None, description="The URI of the hyperlink.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    FieldDefinition: Optional[DraftActivityReplaceLinkDefinition] = Field(
        None,
        description="The definition of the hyperlink element.\r\nIt must be specified when the hyperlink element is added.\r\nIt must not be specified when the hyperlink element already exists.",
    )


class DraftActivityReplaceDateValidationConfiguration(BaseModel):
    DateFormat: Optional[str] = Field(None, description="The format of the dates.")
    Range: Optional[DraftActivityReplaceFieldValidationRange] = Field(
        None, description="The range of the values."
    )


class DraftActivityReplaceTimeValidationConfiguration(BaseModel):
    TimeFormat: Optional[str] = Field(
        None, description="The format of the time values."
    )
    Range: Optional[DraftActivityReplaceFieldValidationRange] = Field(
        None, description="The range of the values."
    )


class DraftActivityReplacePredefinedElementDefinition(BaseModel):
    TextFormat: Optional[DraftActivityReplaceTextFormat] = Field(
        None, description="The configuration of the text format."
    )
    Position: DraftActivityReplacePosition = Field(
        ..., description="The position of the element within the document."
    )
    Size: DraftActivityReplaceSize = Field(..., description="The size of the element.")


class DraftActivityReplaceInitials(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    IncludeMiddleNameInitials: Optional[bool] = Field(
        None,
        description="If true, the initials from the middle names are included as well. \r\nThe initials are read from the given name. Additional names are expected to be separated by a space.",
    )
    FieldDefinition: Optional[DraftActivityReplacePredefinedElementDefinition] = Field(
        None,
        description="The definition of the predefined element.\r\nIt must be specified when the predefined element is added.\r\nIt must not be specified when the predefined element already exists.",
    )


class DraftActivityReplaceSignatureField(BaseModel):
    ElementId: str = Field(..., description="The identifier of the signature.")
    Required: Optional[bool] = Field(
        None, description="If true, the element is required."
    )
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    DisplayName: Optional[str] = Field(None, description="The displayed name.")
    FieldDescription: Optional[str] = Field(
        None, description="The description of the signature."
    )
    UseExternalTimestampServer: Optional[bool] = Field(
        None,
        description="If true, a timestamp from an external server is embedded into the signature.",
    )
    GuidingOrder: Optional[int] = Field(None, description="The order of the element.")
    AllowedSignatureTypes: Optional[DraftActivityReplaceAllowedSignatureTypes] = Field(
        None, description="The allowed types for the signature."
    )
    FieldDefinition: Optional[DraftActivityReplaceSignatureFieldDefinition] = Field(
        None,
        description="The definition of the signature field.\r\nIt must be specified when the signature field is added.\r\nIt must not be specified when the signature field already exists.",
    )
    TaskConfiguration: Optional[DraftActivityReplaceSignatureTaskConfiguration] = Field(
        None, description="The configuration of the task."
    )


class DraftActivityReplaceP7MSignatureMethods(BaseModel):
    LocalCertificate: Optional[bool] = Field(
        None, description="If true, a local certificate can be used."
    )
    DisposableCertificate: Optional[
        DraftActivityReplaceDisposableCertificateSignatureData
    ] = Field(
        None, description="The disposable certificate configuration for the action."
    )
    RemoteCertificate: Optional[DraftActivityReplaceRemoteCertificateSignatureData] = (
        Field(None, description="The remote certificate configuration for the action.")
    )
    SignaturePluginData: Optional[
        List[DraftActivityReplaceSignaturePluginSignatureData]
    ] = Field(
        None,
        description="The signature plugin configurations for the action.",
        max_items=20,
    )


class DraftActivityReplaceVisibleSignature(BaseModel):
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    UseExternalTimestampServer: Optional[bool] = Field(
        None,
        description="If true, a timestamp from an external server is embedded into the signature.",
    )
    FieldDefinition: DraftActivityReplaceSignatureFieldDefinition = Field(
        ...,
        description="The definition of the signature field.\r\nIt must be specified when the signature field is added.\r\nIt must not be specified when the signature field already exists.",
    )


class DraftActivityReplaceSignAutomatic(BaseModel):
    ProfileId: Optional[str] = Field(
        None, description="The identifier of the profile for the automatic signatures."
    )
    RenderingLanguageCode: Optional[RenderingLanguageCode] = Field(
        None, description="The rendering language for the automatic signatures."
    )
    VisibleSignatures: Optional[List[DraftActivityReplaceVisibleSignature]] = Field(
        None,
        description="The visible signatures define the optional visual representations for automatic signatures.\r\nIf none are defined, the automatic signatures are applied to the documents without a visual element.",
        max_items=50,
    )


class EnvelopeGetSendCopy(BaseModel):
    ContactInformation: Optional[EnvelopeGetContactInformation] = Field(
        None, description="The contact information of the recipient."
    )
    CopyingGroup: Optional[int] = Field(
        None, description="The parallel group for copy actions."
    )


class EnvelopeGetSign(BaseModel):
    ContactInformation: Optional[EnvelopeGetContactInformation] = Field(
        None, description="The contact information of the recipient."
    )
    LongLivedDisposableCertificateWarnings: Optional[
        List[EnvelopeGetLongLivedDisposableCertificateWarning]
    ] = Field(
        None, description="The warnings related to long lived disposable certificates."
    )
    SigningGroup: Optional[int] = Field(
        None, description="The parallel group for sign actions."
    )


class EnvelopeGetView(BaseModel):
    ContactInformation: Optional[EnvelopeGetContactInformation] = Field(
        None, description="The contact information of the recipient."
    )
    ViewingGroup: Optional[int] = Field(
        None, description="The parallel group for view actions."
    )


class EnvelopeGetSignAsP7M(BaseModel):
    ContactInformation: Optional[EnvelopeGetContactInformation] = Field(
        None, description="The contact information of the recipient."
    )
    SignAsP7MGroup: Optional[int] = Field(
        None, description="The parallel group for P7M actions."
    )


class EnvelopeGetFilesDocument(BaseModel):
    FileId: Optional[str] = Field(None, description="The identifier of the file.")
    FileName: Optional[str] = Field(None, description="The name of the file.")
    AuditTrailFileId: Optional[str] = Field(
        None,
        description='The identifier of the audit trail file for this particular document.\r\nOnly available if "generate separate audit trail per document" was enabled for the organization.',
    )
    Attachments: Optional[List[EnvelopeGetFilesDocumentAttachment]] = Field(
        None, description="The attachments contained in the document."
    )
    PageCount: Optional[int] = Field(None, description="The number of pages.")
    DocumentNumber: Optional[int] = Field(
        None, description="The reference number of the document. It starts with 1."
    )


class EnvelopeGetHistoryEvent(BaseModel):
    CreationDate: Optional[datetime] = Field(
        None,
        description="Date of the creation of the event, some events may be fired at a later point after the CreationDate\r\nA datetime in the format RFC 3339, section 5.6, 'date-Time' (e.g. 2017-07-21T17:32:28Z).",
    )
    Type: Optional[str] = Field(None, description="Type of the event")
    AffectedRecipient: Optional[EnvelopeGetHistoryEventRecipient] = Field(
        None,
        description="The recipient affected by this event. \r\nMay be empty if its an envelope related event or the \r\nauthorized user is not allowed to manage the envelope",
    )
    Completed: Optional[bool] = Field(
        None,
        description="Indicates whether or not the event is completed.\r\nAn event can be completed while having an error\r\nif the RemainingAttempts count reaches zero",
    )
    CompletedOn: Optional[datetime] = Field(
        None,
        description="Date of the completion of the event.\r\nMay be null if the event has not fired yet or is in an error state\r\nA datetime in the format RFC 3339, section 5.6, 'date-Time' (e.g. 2017-07-21T17:32:28Z).",
    )
    IsInErrorState: Optional[bool] = Field(
        None,
        description="Indicates whether or not the event has an error.\r\nAn event in an error state may be retried until the RemainingAttempts count reaches zero",
    )
    NextAttemptOn: Optional[datetime] = Field(
        None,
        description="Date when the event will be fired\r\nMay be null if an event is completed or the RemainingAttempts count reaches zero\r\nA datetime in the format RFC 3339, section 5.6, 'date-Time' (e.g. 2017-07-21T17:32:28Z).",
    )
    Attempt: Optional[int] = Field(
        None, description="How often the event has been attempted so far"
    )
    RemainingAttempts: Optional[int] = Field(
        None,
        description="How many attempts are remaining until further attempts are halted.",
    )
    ContextInformation: Optional[str] = Field(
        None,
        description="Information about what the event has been doing or why it is in an error state",
    )
    TraceId: Optional[str] = Field(
        None,
        description="Identifier to find associated logs to this event, if unset the even has not been fired yet",
    )


class EnvelopeGetElementsTextBoxDefinition(BaseModel):
    ReadOnly: Optional[bool] = Field(
        None, description="If true, the element is readonly."
    )
    MaxLength: Optional[int] = Field(
        None, description="The maximum length of the text."
    )
    IsMultiline: Optional[bool] = Field(
        None, description="If true, the text box can have multiple lines."
    )
    IsPassword: Optional[bool] = Field(
        None,
        description="If true, the text box behaves like a password input field and does not show the actually entered characters.",
    )
    TextFormat: Optional[EnvelopeGetElementsTextFormat] = Field(
        None, description="The configuration of the text format."
    )
    Position: Optional[EnvelopeGetElementsPosition] = Field(
        None, description="The position of the  within the document."
    )
    Size: Optional[EnvelopeGetElementsSize] = Field(
        None, description="The size of the form field."
    )


class EnvelopeGetElementsCheckBoxDefinition(BaseModel):
    ExportValue: Optional[str] = Field(
        None, description="The value of the check box when it is checked."
    )
    Position: Optional[EnvelopeGetElementsPosition] = Field(
        None, description="The position of the  within the document."
    )
    Size: Optional[EnvelopeGetElementsSize] = Field(
        None, description="The size of the form field."
    )
    ReadOnly: Optional[bool] = Field(
        None, description="If true, the element is readonly."
    )


class EnvelopeGetElementsComboBoxDefinition(BaseModel):
    TextFormat: Optional[EnvelopeGetElementsTextFormat] = Field(
        None, description="The configuration of the text format."
    )
    Items: Optional[List[EnvelopeGetElementsChoiceItem]] = Field(
        None, description="A list of items that can be selected for the element."
    )
    IsEditable: Optional[bool] = Field(
        None, description="If true, the combo box is editable."
    )
    ReadOnly: Optional[bool] = Field(
        None, description="If true, the element is readonly."
    )
    Position: Optional[EnvelopeGetElementsPosition] = Field(
        None, description="The position of the  within the document."
    )
    Size: Optional[EnvelopeGetElementsSize] = Field(
        None, description="The size of the form field."
    )


class EnvelopeGetElementsRadioButtonDefinition(BaseModel):
    IsSelectUnison: Optional[bool] = Field(
        None,
        description="If true, radio buttons with the same <code>ExportValue</code> are checked and unchecked together.",
    )
    Items: Optional[List[EnvelopeGetElementsRadioButtonItemDefinition]] = Field(
        None, description="The list of radiobuttons that belong to the same group."
    )


class EnvelopeGetElementsListBoxDefinition(BaseModel):
    TextFormat: Optional[EnvelopeGetElementsTextFormat] = Field(
        None, description="The configuration of the text format."
    )
    Items: Optional[List[EnvelopeGetElementsChoiceItem]] = Field(
        None, description="A list of items that can be selected for the element."
    )
    IsMultiSelect: Optional[bool] = Field(
        None, description="If true, multiple values of the list box can be selected."
    )
    ReadOnly: Optional[bool] = Field(
        None, description="If true, the element is readonly."
    )
    Position: Optional[EnvelopeGetElementsPosition] = Field(
        None, description="The position of the  within the document."
    )
    Size: Optional[EnvelopeGetElementsSize] = Field(
        None, description="The size of the form field."
    )


class EnvelopeGetElementsSignatureFieldDefinition(BaseModel):
    Position: Optional[EnvelopeGetElementsPosition] = Field(
        None, description="The position of the  within the document."
    )
    Size: Optional[EnvelopeGetElementsSize] = Field(
        None, description="The size of the form field."
    )


class EnvelopeGetElementsSignatureTaskConfiguration(BaseModel):
    StampImprintDateConfiguration: Optional[
        EnvelopeGetElementsStampImprintDateConfiguration
    ] = Field(None, description="The configuration of the stamp imprint date.")
    BatchGroup: Optional[str] = Field(None, description="The batch group.")


class EnvelopeGetElementsAttachmentDefinition(BaseModel):
    Position: Optional[EnvelopeGetElementsPosition] = Field(
        None, description="The position of the  within the document."
    )
    Size: Optional[EnvelopeGetElementsSize] = Field(
        None, description="The size of the form field."
    )


class EnvelopeGetElementsPredefinedText(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    Value: Optional[str] = Field(None, description="The value of the predefined text.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    FieldDefinition: Optional[EnvelopeGetElementsPredefinedElementDefinition] = Field(
        None, description="The definition of the predefined element."
    )


class EnvelopeGetElementsEmail(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    FieldDefinition: Optional[EnvelopeGetElementsPredefinedElementDefinition] = Field(
        None, description="The definition of the predefined element."
    )


class EnvelopeGetElementsInitials(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    IncludeMiddleNameInitials: Optional[bool] = Field(
        None,
        description="If true, the initials from the middle names are included as well. \r\nThe initials are read from the given name. Additional names are expected to be separated by a space.",
    )
    FieldDefinition: Optional[EnvelopeGetElementsPredefinedElementDefinition] = Field(
        None, description="The definition of the predefined element."
    )


class EnvelopeGetElementsGivenName(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    FieldDefinition: Optional[EnvelopeGetElementsPredefinedElementDefinition] = Field(
        None, description="The definition of the predefined element."
    )


class EnvelopeGetElementsSurname(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    FieldDefinition: Optional[EnvelopeGetElementsPredefinedElementDefinition] = Field(
        None, description="The definition of the predefined element."
    )


class EnvelopeGetElementsFullName(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    FieldDefinition: Optional[EnvelopeGetElementsPredefinedElementDefinition] = Field(
        None, description="The definition of the predefined element."
    )


class EnvelopeGetElementsDate(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    DateFormat: Optional[str] = Field(None, description="The format of the date.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    FieldDefinition: Optional[EnvelopeGetElementsPredefinedElementDefinition] = Field(
        None, description="The definition of the predefined element."
    )


class EnvelopeGetElementsHyperLink(BaseModel):
    Id: Optional[str] = Field(None, description="The identifier of the hyperlink.")
    Uri: Optional[str] = Field(None, description="The URI of the hyperlink.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    FieldDefinition: Optional[EnvelopeGetElementsLinkDefinition] = Field(
        None, description="The definition of the hyperlink element."
    )


class EnvelopeGetElementsReadingAreaDefinition(BaseModel):
    Position: Optional[EnvelopeGetElementsPosition] = Field(
        None, description="The position of the  within the document."
    )
    Size: Optional[EnvelopeGetElementsSize] = Field(
        None, description="The size of the form field."
    )


class EnvelopeGetElementsDateValidationConfiguration(BaseModel):
    DateFormat: Optional[str] = Field(None, description="The format of the dates.")
    Range: Optional[EnvelopeGetElementsFieldValidationRange] = Field(
        None, description="The range of the values."
    )


class EnvelopeGetElementsNumberValidationConfiguration(BaseModel):
    DecimalDigits: Optional[int] = Field(
        None, description="The expected amount of decimal digits."
    )
    Symbol: Optional[str] = Field(None, description="The expected symbol.")
    SymbolLocation: Optional[SymbolLocation] = Field(
        None, description="The defined symbol location."
    )
    GroupSeparator: Optional[GroupSeparator] = Field(
        None, description="The expected thousands separator."
    )
    DecimalSeparator: Optional[DecimalSeparator] = Field(
        None, description="The expected decimal separator."
    )
    Range: Optional[EnvelopeGetElementsFieldValidationRange] = Field(
        None, description="The range of the values."
    )


class EnvelopeGetElementsTimeValidationConfiguration(BaseModel):
    TimeFormat: Optional[str] = Field(
        None, description="The format of the time values."
    )
    Range: Optional[EnvelopeGetElementsFieldValidationRange] = Field(
        None, description="The range of the values."
    )


class EnvelopeGetElementsClickToSignSignatureType(BaseModel):
    UseExternalSignatureImage: Optional[UseExternalSignatureImage] = Field(
        None, description="The external signature image mode."
    )
    Preferred: Optional[bool] = Field(
        None, description="If true, the signature type is set as preferred."
    )
    StampImprintConfiguration: Optional[EnvelopeGetElementsClickToSignStampImprint] = (
        Field(
            None, description="The configuration of the stamp imprint of the signature."
        )
    )


class EnvelopeGetElementsDrawToSignSignatureType(BaseModel):
    UseExternalSignatureImage: Optional[UseExternalSignatureImage] = Field(
        None, description="The external signature image mode."
    )
    Preferred: Optional[bool] = Field(
        None, description="If true, the signature type is set as preferred."
    )
    StampImprintConfiguration: Optional[EnvelopeGetElementsDrawToSignStampImprint] = (
        Field(
            None, description="The configuration of the stamp imprint of the signature."
        )
    )


class EnvelopeGetElementsTypeToSignSignatureType(BaseModel):
    UseExternalSignatureImage: Optional[UseExternalSignatureImage] = Field(
        None, description="The external signature image mode."
    )
    Preferred: Optional[bool] = Field(
        None, description="If true, the signature type is set as preferred."
    )
    StampImprintConfiguration: Optional[EnvelopeGetElementsTypeToSignStampImprint] = (
        Field(
            None, description="The configuration of the stamp imprint of the signature."
        )
    )


class EnvelopeGetElementsLocalCertificateSignatureType(BaseModel):
    EnforcePreferredHashAlgorithm: Optional[bool] = Field(
        None,
        description="If true, the usage of the preferred hash algorithm is enforced.",
    )
    PreferredHashAlgorithm: Optional[PreferredHashAlgorithm] = Field(
        None, description="The preferred hash algorithm."
    )
    UseExternalSignatureImage: Optional[UseExternalSignatureImage] = Field(
        None, description="The external signature image mode."
    )
    Preferred: Optional[bool] = Field(
        None, description="If true, the signature type is set as preferred."
    )
    StampImprintConfiguration: Optional[
        EnvelopeGetElementsLocalCertificateStampImprint
    ] = Field(
        None, description="The configuration of the stamp imprint of the signature."
    )


class EnvelopeGetElementsDisposableCertificateSignatureType(BaseModel):
    IsLongLived: Optional[bool] = Field(
        None, description="If true, the disposable certificate is long lived."
    )
    ValidityInSeconds: Optional[int] = Field(
        None, description="The validity of the certificate in seconds."
    )
    UseExternalSignatureImage: Optional[UseExternalSignatureImage] = Field(
        None, description="The external signature image mode."
    )
    Preferred: Optional[bool] = Field(
        None, description="If true, the signature type is set as preferred."
    )
    StampImprintConfiguration: Optional[
        EnvelopeGetElementsDisposableCertificateStampImprint
    ] = Field(
        None, description="The configuration of the stamp imprint of the signature."
    )


class EnvelopeGetElementsSwissComOnDemandSignatureType(BaseModel):
    ValidityInSeconds: Optional[int] = Field(
        None, description="The certificate validity in seconds."
    )
    Preferred: Optional[bool] = Field(
        None, description="If true, the signature type is set as preferred."
    )
    StampImprintConfiguration: Optional[
        EnvelopeGetElementsSwissComOnDemandStampImprint
    ] = Field(
        None, description="The configuration of the stamp imprint of the signature."
    )


class EnvelopeGetElementsRemoteCertificateSignatureType(BaseModel):
    ValidityInSeconds: Optional[int] = Field(
        None, description="The validity of the certificate in seconds."
    )
    UseExternalSignatureImage: Optional[UseExternalSignatureImage] = Field(
        None, description="The external signature image mode."
    )
    Preferred: Optional[bool] = Field(
        None, description="If true, the signature type is set as preferred."
    )
    StampImprintConfiguration: Optional[
        EnvelopeGetElementsRemoteCertificateStampImprint
    ] = Field(
        None, description="The configuration of the stamp imprint of the signature."
    )


class EnvelopeGetElementsOneTimePasswordSignatureType(BaseModel):
    ValidityInSeconds: Optional[int] = Field(
        None, description="The validity of the password in seconds."
    )
    UseExternalSignatureImage: Optional[UseExternalSignatureImage] = Field(
        None, description="The external signature image mode."
    )
    Preferred: Optional[bool] = Field(
        None, description="If true, the signature type is set as preferred."
    )
    StampImprintConfiguration: Optional[
        EnvelopeGetElementsOneTimePasswordStampImprint
    ] = Field(
        None, description="The configuration of the stamp imprint of the signature."
    )


class EnvelopeGetElementsSwedishBankIdSignatureType(BaseModel):
    Preferred: Optional[bool] = Field(
        None, description="If true, the signature type is set as preferred."
    )
    StampImprintConfiguration: Optional[
        EnvelopeGetElementsSwedishBankIdStampImprint
    ] = Field(
        None, description="The configuration of the stamp imprint of the signature."
    )


class EnvelopeGetElementsSignaturePluginSignatureType(BaseModel):
    PluginId: Optional[str] = Field(None, description="The identifier of the plugin.")
    Preferred: Optional[bool] = Field(
        None, description="If true, the signature type is set as preferred."
    )
    StampImprintConfiguration: Optional[EnvelopeGetElementsPluginStampImprint] = Field(
        None, description="The configuration of the stamp imprint of the signature."
    )


class EnvelopeGetElementsVisibleSignature(BaseModel):
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    Id: Optional[str] = Field(
        None, description="The identifier of the signature field."
    )
    UseExternalTimestampServer: Optional[bool] = Field(
        None,
        description="If true, a timestamp from an external server is embedded into the signature.",
    )
    FieldDefinition: Optional[EnvelopeGetElementsSignatureFieldDefinition] = Field(
        None, description="The definition of the signature field."
    )


class EnvelopeGetViewerLinksResponse(BaseModel):
    ViewerLinks: Optional[List[EnvelopeGetViewerLinksViewerLink]] = Field(
        None,
        description="The links to access the SignAnyWhere Viewer for the active activities of the envelope.",
    )


class EnvelopeGetConfigurationAgreementConfiguration(BaseModel):
    Translations: Optional[List[EnvelopeGetConfigurationAgreementTranslation]] = Field(
        None,
        description="The agreement and its translations to be used.\r\nIf no custom agreement is specified, the default organization agreement will be used.",
    )


class EnvelopeGetConfigurationActivityActionCallbackConfiguration(BaseModel):
    Url: Optional[str] = Field(
        None, description="The callback URL triggered for the selected events."
    )
    ConfigurationActionCallbackSelection: Optional[
        EnvelopeGetConfigurationActionCallbackSelection
    ] = Field(None, description="The selection of events which trigger the callback.")


class EnvelopeGetConfigurationSendCopy(BaseModel):
    RecipientConfiguration: Optional[
        EnvelopeGetConfigurationBasicRecipientConfiguration
    ] = Field(None, description="The configuration of the recipient.")
    CopyingGroup: Optional[int] = Field(
        None, description="The parallel group for copy actions."
    )


class EnvelopeGetConfigurationFinishAction(BaseModel):
    SignAnyWhereViewer: Optional[EnvelopeGetConfigurationWebFinishAction] = Field(
        None, description="The actions for the SAW Viewer."
    )
    SignificantClientSignatureCaptureForIos: Optional[
        EnvelopeGetConfigurationAppFinishAction
    ] = Field(
        None,
        description="The actions for the SIGNificant Client Signature Capture App for iOS.",
    )
    SignificantClientSignatureCaptureForAndroid: Optional[
        EnvelopeGetConfigurationAppFinishAction
    ] = Field(
        None,
        description="The actions for the SIGNificant Client Signature Capture App for Android.",
    )
    SignificantClientSignatureCaptureForWindows: Optional[
        EnvelopeGetConfigurationAppFinishAction
    ] = Field(
        None,
        description="The actions for the SIGNificant Client Signature Capture App for Windows.",
    )
    KioskSdk: Optional[EnvelopeGetConfigurationKioskFinishAction] = Field(
        None, description="The actions for the SIGNificant Kiosk SDK."
    )


class EnvelopeGetConfigurationSignaturePluginSignatureData(BaseModel):
    PluginId: Optional[str] = Field(
        None, description="The identifier of the signature plugin."
    )
    Fields: Optional[List[EnvelopeGetConfigurationSignaturePluginParameter]] = Field(
        None,
        description="The plugin parameters referred to as the GSP sender data fields.",
    )


class EnvelopeGetConfigurationOAuthAuthentication(BaseModel):
    ProviderName: Optional[str] = Field(
        None, description="The name of the OAuth provider."
    )
    Validations: Optional[List[EnvelopeGetConfigurationAuthenticationValidation]] = (
        Field(None, description="The validation rules for the OAuth response.")
    )


class EnvelopeGetConfigurationSamlAuthentication(BaseModel):
    ProviderName: Optional[str] = Field(
        None, description="The name of the SAML provider."
    )
    Validations: Optional[List[EnvelopeGetConfigurationAuthenticationValidation]] = (
        Field(None, description="The validation rules for the SAML response.")
    )


class EnvelopeFindResponse(BaseModel):
    Envelopes: Optional[List[EnvelopeFindEnvelope]] = Field(
        None, description="The envelopes which match the search criteria."
    )


class EnvelopeSendAgreementConfiguration(BaseModel):
    Translations: Optional[List[EnvelopeSendAgreementTranslation]] = Field(
        None,
        description="The agreement and its translations to be used.\r\nIf no custom agreement is specified, the default organization agreement will be used.",
        max_items=228,
    )


class EnvelopeSendActivityActionCallbackConfiguration(BaseModel):
    Url: str = Field(
        ..., description="The callback URL triggered for the selected events."
    )
    ActionCallbackSelection: Optional[EnvelopeSendActionCallbackSelection] = Field(
        None, description="The selection of events which trigger the callback."
    )


class EnvelopeSendSendCopy(BaseModel):
    RecipientConfiguration: EnvelopeSendBasicRecipientConfiguration = Field(
        ..., description="The configuration of the recipient."
    )
    CopyingGroup: Optional[str] = Field(
        None, description="The group for defining parallel copy actions."
    )


class EnvelopeSendDateValidationConfiguration(BaseModel):
    DateFormat: Optional[str] = Field(None, description="The format of the dates.")
    Range: Optional[EnvelopeSendFieldValidationRange] = Field(
        None, description="The range of the values."
    )


class EnvelopeSendTimeValidationConfiguration(BaseModel):
    TimeFormat: Optional[str] = Field(
        None, description="The format of the time values."
    )
    Range: Optional[EnvelopeSendFieldValidationRange] = Field(
        None, description="The range of the values."
    )


class EnvelopeSendFinishAction(BaseModel):
    SignAnyWhereViewer: Optional[EnvelopeSendClientFinishAction] = Field(
        None, description="The actions for the SAW Viewer."
    )
    SignificantClientSignatureCaptureForIos: Optional[EnvelopeSendAppFinishAction] = (
        Field(
            None,
            description="The actions for the SIGNificant Client Signature Capture App for iOS.",
        )
    )
    SignificantClientSignatureCaptureForAndroid: Optional[
        EnvelopeSendAppFinishAction
    ] = Field(
        None,
        description="The actions for the SIGNificant Client Signature Capture App for Android.",
    )
    SignificantClientSignatureCaptureForWindows: Optional[
        EnvelopeSendAppFinishAction
    ] = Field(
        None,
        description="The actions for the SIGNificant Client Signature Capture App for Windows.",
    )
    KioskSdk: Optional[EnvelopeSendKioskFinishAction] = Field(
        None, description="The actions for the SIGNificant Kiosk SDK."
    )


class EnvelopeSendSignaturePluginSignatureData(BaseModel):
    PluginId: Optional[str] = Field(
        None, description="The identifier of the signature plugin."
    )
    Fields: Optional[List[EnvelopeSendSignaturePluginParameter]] = Field(
        None,
        description="The plugin parameters referred to as the GSP sender data fields.",
        max_items=50,
    )


class EnvelopeSendOAuthAuthentication(BaseModel):
    ProviderName: str = Field(..., description="The name of the OAuth provider.")
    Validations: Optional[List[EnvelopeSendAuthenticationValidation]] = Field(
        None, description="The validation rules for the OAuth response.", max_items=100
    )


class EnvelopeSendSamlAuthentication(BaseModel):
    ProviderName: str = Field(..., description="The name of the SAML provider.")
    Validations: Optional[List[EnvelopeSendAuthenticationValidation]] = Field(
        None, description="The validation rules for the SAML response.", max_items=100
    )


class EnvelopeSendAllowedSignatureTypes(BaseModel):
    ClickToSign: Optional[EnvelopeSendClickToSignSignatureType] = Field(
        None, description='Allow signing with "click to sign".'
    )
    DrawToSign: Optional[EnvelopeSendDrawToSignSignatureType] = Field(
        None, description='Allow signing with "draw to sign".'
    )
    TypeToSign: Optional[EnvelopeSendTypeToSignSignatureType] = Field(
        None, description='Allow signing with "type to sign".'
    )
    LocalCertificate: Optional[EnvelopeSendLocalCertificateSignatureType] = Field(
        None, description="Allow signing with a local certificate."
    )
    DisposableCertificate: Optional[EnvelopeSendDisposableCertificateSignatureType] = (
        Field(None, description="Allow signing with a disposable certificate.")
    )
    SwissComOnDemand: Optional[EnvelopeSendSwissComOnDemandSignatureType] = Field(
        None, description="Allow signing with a Swisscom On-Demand certificate."
    )
    ATrustCertificate: Optional[EnvelopeSendATrustCertificateSignatureType] = Field(
        None, description="Allow signing with an A-Trust certificate."
    )
    Biometric: Optional[EnvelopeSendBiometricSignatureType] = Field(
        None, description="Allow signing with a biometric signature."
    )
    RemoteCertificate: Optional[EnvelopeSendRemoteCertificateSignatureType] = Field(
        None, description="Allow signing with a remote certificate."
    )
    OneTimePassword: Optional[EnvelopeSendOneTimePasswordSignatureType] = Field(
        None, description="Allow signing with a one time password (SMS-OTP)."
    )
    SwedishBankId: Optional[EnvelopeSendSwedishBankIdSignatureType] = Field(
        None, description="Allow signing with Swedish BankID."
    )
    SignaturePlugins: Optional[List[EnvelopeSendSignaturePluginSignatureType]] = Field(
        None, description="Allow signing with signature plugins.", max_items=20
    )


class EnvelopeSendSignatureTaskConfiguration(BaseModel):
    StampImprintDateConfiguration: Optional[
        EnvelopeSendStampImprintDateConfiguration
    ] = Field(None, description="The configuration of the stamp imprint date.")
    BatchGroup: Optional[str] = Field(None, description="The batch group.")


class EnvelopeSendHyperLink(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    Uri: Optional[str] = Field(None, description="The URI of the hyperlink.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    FieldDefinition: Optional[EnvelopeSendLinkDefinition] = Field(
        None,
        description="The definition of the hyperlink element.\r\nIt must be specified when the hyperlink element is added.\r\nIt must not be specified when the hyperlink element already exists.",
    )


class EnvelopeSendPredefinedElementDefinition(BaseModel):
    TextFormat: Optional[EnvelopeSendTextFormat] = Field(
        None, description="The configuration of the text format."
    )
    Position: EnvelopeSendPosition = Field(
        ..., description="The position of the element within the document."
    )
    Size: EnvelopeSendSize = Field(..., description="The size of the element.")


class EnvelopeSendInitials(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    IncludeMiddleNameInitials: Optional[bool] = Field(
        None,
        description="If true, the initials from the middle names are included as well. \r\nThe initials are read from the given name. Additional names are expected to be separated by a space.",
    )
    FieldDefinition: Optional[EnvelopeSendPredefinedElementDefinition] = Field(
        None,
        description="The definition of the predefined element.\r\nIt must be specified when the predefined element is added.\r\nIt must not be specified when the predefined element already exists.",
    )


class EnvelopeSendSignatureField(BaseModel):
    ElementId: str = Field(..., description="The identifier of the signature.")
    Required: Optional[bool] = Field(
        None, description="If true, the element is required."
    )
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    DisplayName: Optional[str] = Field(None, description="The displayed name.")
    FieldDescription: Optional[str] = Field(
        None, description="The description of the signature."
    )
    UseExternalTimestampServer: Optional[bool] = Field(
        None,
        description="If true, a timestamp from an external server is embedded into the signature.",
    )
    GuidingOrder: Optional[int] = Field(None, description="The order of the element.")
    AllowedSignatureTypes: EnvelopeSendAllowedSignatureTypes = Field(
        ..., description="The allowed types for the signature."
    )
    FieldDefinition: Optional[EnvelopeSendSignatureFieldDefinition] = Field(
        None,
        description="The definition of the signature field.\r\nIt must be specified when the signature field is added.\r\nIt must not be specified when the signature field already exists.",
    )
    TaskConfiguration: Optional[EnvelopeSendSignatureTaskConfiguration] = Field(
        None, description="The configuration of the task."
    )


class EnvelopeSendP7MSignatureMethods(BaseModel):
    LocalCertificate: Optional[bool] = Field(
        None, description="If true, a local certificate can be used."
    )
    DisposableCertificate: Optional[EnvelopeSendDisposableCertificateSignatureData] = (
        Field(
            None, description="The disposable certificate configuration for the action."
        )
    )
    RemoteCertificate: Optional[EnvelopeSendRemoteCertificateSignatureData] = Field(
        None, description="The remote certificate configuration for the action."
    )
    SignaturePluginData: Optional[List[EnvelopeSendSignaturePluginSignatureData]] = (
        Field(
            None,
            description="The signature plugin configurations for the action.",
            max_items=20,
        )
    )


class EnvelopeSendCallbackConfiguration(BaseModel):
    CallbackUrl: Optional[str] = Field(
        None,
        description="The callback URL triggered when the envelope has been finished.",
    )
    StatusUpdateCallbackUrl: Optional[str] = Field(
        None,
        description="The callback URL triggered for status updates of an envelope.",
    )
    ActivityActionCallbackConfiguration: Optional[
        EnvelopeSendActivityActionCallbackConfiguration
    ] = Field(
        None, description="The configuration of the callback for workstep events."
    )


class EnvelopeActivityReplaceSendCopy(BaseModel):
    RecipientConfiguration: Optional[
        EnvelopeActivityReplaceBasicRecipientConfiguration
    ] = Field(None, description="The configuration of the recipient.")


class EnvelopeActivityReplaceFinishAction(BaseModel):
    SignAnyWhereViewer: Optional[EnvelopeActivityReplaceClientFinishAction] = Field(
        None, description="The actions for the SAW Viewer."
    )
    SignificantClientSignatureCaptureForIos: Optional[
        EnvelopeActivityReplaceAppFinishAction
    ] = Field(
        None,
        description="The actions for the SIGNificant Client Signature Capture App for iOS.",
    )
    SignificantClientSignatureCaptureForAndroid: Optional[
        EnvelopeActivityReplaceAppFinishAction
    ] = Field(
        None,
        description="The actions for the SIGNificant Client Signature Capture App for Android.",
    )
    SignificantClientSignatureCaptureForWindows: Optional[
        EnvelopeActivityReplaceAppFinishAction
    ] = Field(
        None,
        description="The actions for the SIGNificant Client Signature Capture App for Windows.",
    )
    KioskSdk: Optional[EnvelopeActivityReplaceKioskFinishAction] = Field(
        None, description="The actions for the SIGNificant Kiosk SDK."
    )


class EnvelopeActivityReplaceSignatureFieldDefinition(BaseModel):
    Position: EnvelopeActivityReplacePosition = Field(
        ..., description="The position of the element within the document."
    )
    Size: EnvelopeActivityReplaceSize = Field(
        ..., description="The size of the element."
    )


class EnvelopeActivityReplaceSignaturePluginSignatureData(BaseModel):
    PluginId: Optional[str] = Field(
        None, description="The identifier of the signature plugin."
    )
    Fields: Optional[List[EnvelopeActivityReplaceSignaturePluginParameter]] = Field(
        None,
        description="The plugin parameters referred to as the GSP sender data fields.",
        max_items=50,
    )


class EnvelopeActivityReplaceOAuthAuthentication(BaseModel):
    ProviderName: Optional[str] = Field(
        None, description="The name of the OAuth provider."
    )
    Validations: Optional[List[EnvelopeActivityReplaceAuthenticationValidation]] = (
        Field(
            None,
            description="The validation rules for the OAuth response.",
            max_items=100,
        )
    )


class EnvelopeActivityReplaceSamlAuthentication(BaseModel):
    ProviderName: Optional[str] = Field(
        None, description="The name of the SAML provider."
    )
    Validations: Optional[List[EnvelopeActivityReplaceAuthenticationValidation]] = (
        Field(
            None,
            description="The validation rules for the SAML response.",
            max_items=100,
        )
    )


class EnvelopeActivityReplaceAllowedSignatureTypes(BaseModel):
    ClickToSign: Optional[EnvelopeActivityReplaceClickToSignSignatureType] = Field(
        None, description='Allow signing with "click to sign".'
    )
    DrawToSign: Optional[EnvelopeActivityReplaceDrawToSignSignatureType] = Field(
        None, description='Allow signing with "draw to sign".'
    )
    TypeToSign: Optional[EnvelopeActivityReplaceTypeToSignSignatureType] = Field(
        None, description='Allow signing with "type to sign".'
    )
    LocalCertificate: Optional[EnvelopeActivityReplaceLocalCertificateSignatureType] = (
        Field(None, description="Allow signing with a local certificate.")
    )
    DisposableCertificate: Optional[
        EnvelopeActivityReplaceDisposableCertificateSignatureType
    ] = Field(None, description="Allow signing with a disposable certificate.")
    SwissComOnDemand: Optional[EnvelopeActivityReplaceSwissComOnDemandSignatureType] = (
        Field(None, description="Allow signing with a Swisscom On-Demand certificate.")
    )
    ATrustCertificate: Optional[
        EnvelopeActivityReplaceATrustCertificateSignatureType
    ] = Field(None, description="Allow signing with an A-Trust certificate.")
    Biometric: Optional[EnvelopeActivityReplaceBiometricSignatureType] = Field(
        None, description="Allow signing with a biometric signature."
    )
    RemoteCertificate: Optional[
        EnvelopeActivityReplaceRemoteCertificateSignatureType
    ] = Field(None, description="Allow signing with a remote certificate.")
    OneTimePassword: Optional[EnvelopeActivityReplaceOneTimePasswordSignatureType] = (
        Field(None, description="Allow signing with a one time password (SMS-OTP).")
    )
    SwedishBankId: Optional[EnvelopeActivityReplaceSwedishBankIdSignatureType] = Field(
        None, description="Allow signing with Swedish BankID."
    )
    SignaturePlugins: Optional[
        List[EnvelopeActivityReplaceSignaturePluginSignatureType]
    ] = Field(None, description="Allow signing with signature plugins.", max_items=20)


class EnvelopeActivityReplaceSignatureTaskConfiguration(BaseModel):
    StampImprintDateConfiguration: Optional[
        EnvelopeActivityReplaceStampImprintDateConfiguration
    ] = Field(None, description="The configuration of the stamp imprint date.")
    BatchGroup: Optional[str] = Field(None, description="The batch group.")


class EnvelopeActivityReplaceHyperLink(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    Uri: Optional[str] = Field(None, description="The URI of the hyperlink.")
    DocumentNumber: int = Field(
        ...,
        description="The reference number of the containing document. It starts with 1.",
    )
    FieldDefinition: Optional[EnvelopeActivityReplaceLinkDefinition] = Field(
        None,
        description="The definition of the hyperlink element.\r\nIt must be specified when the hyperlink element is added.\r\nIt must not be specified when the hyperlink element already exists.",
    )


class EnvelopeActivityReplaceDateValidationConfiguration(BaseModel):
    DateFormat: Optional[str] = Field(None, description="The format of the dates.")
    Range: Optional[EnvelopeActivityReplaceFieldValidationRange] = Field(
        None, description="The range of the values."
    )


class EnvelopeActivityReplaceTimeValidationConfiguration(BaseModel):
    TimeFormat: Optional[str] = Field(
        None, description="The format of the time values."
    )
    Range: Optional[EnvelopeActivityReplaceFieldValidationRange] = Field(
        None, description="The range of the values."
    )


class EnvelopeActivityReplacePredefinedElementDefinition(BaseModel):
    TextFormat: Optional[EnvelopeActivityReplaceTextFormat] = Field(
        None, description="The configuration of the text format."
    )
    Position: EnvelopeActivityReplacePosition = Field(
        ..., description="The position of the element within the document."
    )
    Size: EnvelopeActivityReplaceSize = Field(
        ..., description="The size of the element."
    )


class EnvelopeActivityReplaceInitials(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    DocumentNumber: int = Field(
        ...,
        description="The reference number of the containing document. It starts with 1.",
    )
    IncludeMiddleNameInitials: Optional[bool] = Field(
        None,
        description="If true, the initials from the middle names are included as well. \r\nThe initials are read from the given name. Additional names are expected to be separated by a space.",
    )
    FieldDefinition: Optional[EnvelopeActivityReplacePredefinedElementDefinition] = (
        Field(
            None,
            description="The definition of the predefined element.\r\nIt must be specified when the predefined element is added.\r\nIt must not be specified when the predefined element already exists.",
        )
    )


class EnvelopeActivityReplaceSignatureField(BaseModel):
    ElementId: str = Field(..., description="The identifier of the signature.")
    Required: Optional[bool] = Field(
        None, description="If true, the element is required."
    )
    DocumentNumber: int = Field(
        ...,
        description="The reference number of the containing document. It starts with 1.",
    )
    DisplayName: Optional[str] = Field(None, description="The displayed name.")
    FieldDescription: Optional[str] = Field(
        None, description="The description of the signature."
    )
    UseExternalTimestampServer: Optional[bool] = Field(
        None,
        description="If true, a timestamp from an external server is embedded into the signature.",
    )
    GuidingOrder: Optional[int] = Field(None, description="The order of the element.")
    AllowedSignatureTypes: Optional[EnvelopeActivityReplaceAllowedSignatureTypes] = (
        Field(None, description="The allowed types for the signature.")
    )
    FieldDefinition: Optional[EnvelopeActivityReplaceSignatureFieldDefinition] = Field(
        None,
        description="The definition of the signature field.\r\nIt must be specified when the signature field is added.\r\nIt must not be specified when the signature field already exists.",
    )
    TaskConfiguration: Optional[EnvelopeActivityReplaceSignatureTaskConfiguration] = (
        Field(None, description="The configuration of the task.")
    )


class EnvelopeActivityReplaceP7MSignatureMethods(BaseModel):
    LocalCertificate: Optional[bool] = Field(
        None, description="If true, a local certificate can be used."
    )
    DisposableCertificate: Optional[
        EnvelopeActivityReplaceDisposableCertificateSignatureData
    ] = Field(
        None, description="The disposable certificate configuration for the action."
    )
    RemoteCertificate: Optional[
        EnvelopeActivityReplaceRemoteCertificateSignatureData
    ] = Field(None, description="The remote certificate configuration for the action.")
    SignaturePluginData: Optional[
        List[EnvelopeActivityReplaceSignaturePluginSignatureData]
    ] = Field(
        None,
        description="The signature plugin configurations for the action.",
        max_items=20,
    )


class EnvelopeActivityReplaceVisibleSignature(BaseModel):
    DocumentNumber: int = Field(
        ...,
        description="The reference number of the containing document. It starts with 1.",
    )
    UseExternalTimestampServer: Optional[bool] = Field(
        None,
        description="If true, a timestamp from an external server is embedded into the signature.",
    )
    FieldDefinition: Optional[EnvelopeActivityReplaceSignatureFieldDefinition] = Field(
        None,
        description="The definition of the signature field.\r\nIt must be specified when the signature field is added.\r\nIt must not be specified when the signature field already exists.",
    )


class EnvelopeActivityReplaceSignAutomatic(BaseModel):
    ProfileId: Optional[str] = Field(
        None, description="The identifier of the profile for the automatic signatures."
    )
    RenderingLanguageCode: Optional[RenderingLanguageCode] = Field(
        None, description="The rendering language for the automatic signatures."
    )
    VisibleSignatures: Optional[List[EnvelopeActivityReplaceVisibleSignature]] = Field(
        None,
        description="The visible signatures define the optional visual representations for automatic signatures.\r\nIf none are defined, the automatic signatures are applied to the documents without a visual element.",
        max_items=50,
    )


class EnvelopeBulkGetResponse(BaseModel):
    BulkStatus: Optional[BulkStatus] = Field(
        None, description="The status of the BulkParent envelope."
    )
    Children: Optional[List[EnvelopeBulkGetChildEnvelope]] = Field(
        None, description="The children of the bulk envelope."
    )


class EnvelopeBulkFindResponse(BaseModel):
    BulkParentEnvelopes: Optional[List[EnvelopeBulkFindParentEnvelope]] = Field(
        None,
        description="The BulkParent envelopes where the child envelopes match the search criteria.",
    )


class EnvelopeBulkSendAgreementConfiguration(BaseModel):
    Translations: Optional[List[EnvelopeBulkSendAgreementTranslation]] = Field(
        None,
        description="The agreement and its translations to be used.\r\nIf no custom agreement is specified, the default organization agreement will be used.",
        max_items=228,
    )


class EnvelopeBulkSendActivityActionCallbackConfiguration(BaseModel):
    Url: str = Field(
        ..., description="The callback URL triggered for the selected events."
    )
    ActionCallbackSelection: Optional[EnvelopeBulkSendActionCallbackSelection] = Field(
        None, description="The selection of events which trigger the callback."
    )


class EnvelopeBulkSendSendCopy(BaseModel):
    RecipientConfiguration: EnvelopeBulkSendBasicRecipientConfiguration = Field(
        ..., description="The configuration of the recipient."
    )
    CopyingGroup: Optional[str] = Field(
        None, description="The group for defining parallel copy actions."
    )


class EnvelopeBulkSendDateValidationConfiguration(BaseModel):
    DateFormat: Optional[str] = Field(None, description="The format of the dates.")
    Range: Optional[EnvelopeBulkSendFieldValidationRange] = Field(
        None, description="The range of the values."
    )


class EnvelopeBulkSendTimeValidationConfiguration(BaseModel):
    TimeFormat: Optional[str] = Field(
        None, description="The format of the time values."
    )
    Range: Optional[EnvelopeBulkSendFieldValidationRange] = Field(
        None, description="The range of the values."
    )


class EnvelopeBulkSendFinishAction(BaseModel):
    SignAnyWhereViewer: Optional[EnvelopeBulkSendClientFinishAction] = Field(
        None, description="The actions for the SAW Viewer."
    )
    SignificantClientSignatureCaptureForIos: Optional[
        EnvelopeBulkSendAppFinishAction
    ] = Field(
        None,
        description="The actions for the SIGNificant Client Signature Capture App for iOS.",
    )
    SignificantClientSignatureCaptureForAndroid: Optional[
        EnvelopeBulkSendAppFinishAction
    ] = Field(
        None,
        description="The actions for the SIGNificant Client Signature Capture App for Android.",
    )
    SignificantClientSignatureCaptureForWindows: Optional[
        EnvelopeBulkSendAppFinishAction
    ] = Field(
        None,
        description="The actions for the SIGNificant Client Signature Capture App for Windows.",
    )
    KioskSdk: Optional[EnvelopeBulkSendKioskFinishAction] = Field(
        None, description="The actions for the SIGNificant Kiosk SDK."
    )


class EnvelopeBulkSendSignaturePluginSignatureData(BaseModel):
    PluginId: Optional[str] = Field(
        None, description="The identifier of the signature plugin."
    )
    Fields: Optional[List[EnvelopeBulkSendSignaturePluginParameter]] = Field(
        None,
        description="The plugin parameters referred to as the GSP sender data fields.",
        max_items=50,
    )


class EnvelopeBulkSendOAuthAuthentication(BaseModel):
    ProviderName: Optional[str] = Field(
        None, description="The name of the OAuth provider."
    )
    Validations: Optional[List[EnvelopeBulkSendAuthenticationValidation]] = Field(
        None, description="The validation rules for the OAuth response.", max_items=100
    )


class EnvelopeBulkSendSamlAuthentication(BaseModel):
    ProviderName: Optional[str] = Field(
        None, description="The name of the SAML provider."
    )
    Validations: Optional[List[EnvelopeBulkSendAuthenticationValidation]] = Field(
        None, description="The validation rules for the SAML response.", max_items=100
    )


class EnvelopeBulkSendAllowedSignatureTypes(BaseModel):
    ClickToSign: Optional[EnvelopeBulkSendClickToSignSignatureType] = Field(
        None, description='Allow signing with "click to sign".'
    )
    DrawToSign: Optional[EnvelopeBulkSendDrawToSignSignatureType] = Field(
        None, description='Allow signing with "draw to sign".'
    )
    TypeToSign: Optional[EnvelopeBulkSendTypeToSignSignatureType] = Field(
        None, description='Allow signing with "type to sign".'
    )
    LocalCertificate: Optional[EnvelopeBulkSendLocalCertificateSignatureType] = Field(
        None, description="Allow signing with a local certificate."
    )
    DisposableCertificate: Optional[
        EnvelopeBulkSendDisposableCertificateSignatureType
    ] = Field(None, description="Allow signing with a disposable certificate.")
    SwissComOnDemand: Optional[EnvelopeBulkSendSwissComOnDemandSignatureType] = Field(
        None, description="Allow signing with a Swisscom On-Demand certificate."
    )
    ATrustCertificate: Optional[EnvelopeBulkSendATrustCertificateSignatureType] = Field(
        None, description="Allow signing with an A-Trust certificate."
    )
    Biometric: Optional[EnvelopeBulkSendBiometricSignatureType] = Field(
        None, description="Allow signing with a biometric signature."
    )
    RemoteCertificate: Optional[EnvelopeBulkSendRemoteCertificateSignatureType] = Field(
        None, description="Allow signing with a remote certificate."
    )
    OneTimePassword: Optional[EnvelopeBulkSendOneTimePasswordSignatureType] = Field(
        None, description="Allow signing with a one time password (SMS-OTP)."
    )
    SwedishBankId: Optional[EnvelopeBulkSendSwedishBankIdSignatureType] = Field(
        None, description="Allow signing with Swedish BankID."
    )
    SignaturePlugins: Optional[List[EnvelopeBulkSendSignaturePluginSignatureType]] = (
        Field(None, description="Allow signing with signature plugins.", max_items=20)
    )


class EnvelopeBulkSendSignatureTaskConfiguration(BaseModel):
    StampImprintDateConfiguration: Optional[
        EnvelopeBulkSendStampImprintDateConfiguration
    ] = Field(None, description="The configuration of the stamp imprint date.")
    BatchGroup: Optional[str] = Field(None, description="The batch group.")


class EnvelopeBulkSendHyperLink(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    Uri: Optional[str] = Field(None, description="The URI of the hyperlink.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    FieldDefinition: Optional[EnvelopeBulkSendLinkDefinition] = Field(
        None,
        description="The definition of the hyperlink element.\r\nIt must be specified when the hyperlink element is added.\r\nIt must not be specified when the hyperlink element already exists.",
    )


class EnvelopeBulkSendPredefinedElementDefinition(BaseModel):
    TextFormat: Optional[EnvelopeBulkSendTextFormat] = Field(
        None, description="The configuration of the text format."
    )
    Position: EnvelopeBulkSendPosition = Field(
        ..., description="The position of the element within the document."
    )
    Size: EnvelopeBulkSendSize = Field(..., description="The size of the element.")


class EnvelopeBulkSendInitials(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    IncludeMiddleNameInitials: Optional[bool] = Field(
        None,
        description="If true, the initials from the middle names are included as well. \r\nThe initials are read from the given name. Additional names are expected to be separated by a space.",
    )
    FieldDefinition: Optional[EnvelopeBulkSendPredefinedElementDefinition] = Field(
        None,
        description="The definition of the predefined element.\r\nIt must be specified when the predefined element is added.\r\nIt must not be specified when the predefined element already exists.",
    )


class EnvelopeBulkSendSignatureField(BaseModel):
    ElementId: str = Field(..., description="The identifier of the signature.")
    Required: Optional[bool] = Field(
        None, description="If true, the element is required."
    )
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    DisplayName: Optional[str] = Field(None, description="The displayed name.")
    FieldDescription: Optional[str] = Field(
        None, description="The description of the signature."
    )
    UseExternalTimestampServer: Optional[bool] = Field(
        None,
        description="If true, a timestamp from an external server is embedded into the signature.",
    )
    GuidingOrder: Optional[int] = Field(None, description="The order of the element.")
    AllowedSignatureTypes: EnvelopeBulkSendAllowedSignatureTypes = Field(
        ..., description="The allowed types for the signature."
    )
    FieldDefinition: Optional[EnvelopeBulkSendSignatureFieldDefinition] = Field(
        None,
        description="The definition of the signature field.\r\nIt must be specified when the signature field is added.\r\nIt must not be specified when the signature field already exists.",
    )
    TaskConfiguration: Optional[EnvelopeBulkSendSignatureTaskConfiguration] = Field(
        None, description="The configuration of the task."
    )


class EnvelopeBulkSendP7MSignatureMethods(BaseModel):
    LocalCertificate: Optional[bool] = Field(
        None, description="If true, a local certificate can be used."
    )
    DisposableCertificate: Optional[
        EnvelopeBulkSendDisposableCertificateSignatureData
    ] = Field(
        None, description="The disposable certificate configuration for the action."
    )
    RemoteCertificate: Optional[EnvelopeBulkSendRemoteCertificateSignatureData] = Field(
        None, description="The remote certificate configuration for the action."
    )
    SignaturePluginData: Optional[
        List[EnvelopeBulkSendSignaturePluginSignatureData]
    ] = Field(
        None,
        description="The signature plugin configurations for the action.",
        max_items=20,
    )


class EnvelopeBulkSendCallbackConfiguration(BaseModel):
    CallbackUrl: Optional[str] = Field(
        None,
        description="The callback URL triggered when the envelope has been finished.",
    )
    StatusUpdateCallbackUrl: Optional[str] = Field(
        None,
        description="The callback URL triggered for status updates of an envelope.",
    )
    ActivityActionCallbackConfiguration: Optional[
        EnvelopeBulkSendActivityActionCallbackConfiguration
    ] = Field(
        None, description="The configuration of the callback for workstep events."
    )


class FilePrepareRequest(BaseModel):
    FileIds: List[FileId] = Field(
        ...,
        description="The identifiers of the uploaded files.",
        max_items=50,
        min_items=1,
    )
    ClearAdvancedDocumentTags: Optional[bool] = Field(
        None,
        description="If true, the parsed advanced document tags are deleted from the document.",
    )
    SigStringConfigurations: Optional[List[FilePrepareSigStringConfiguration]] = Field(
        None,
        description="The configurations for the parsing of SigString. The default [`sig`] is always added.",
        max_items=50,
    )


class FilePrepareTextBoxDefinition(BaseModel):
    ReadOnly: Optional[bool] = Field(
        None, description="If true, the element is readonly."
    )
    MaxLength: Optional[int] = Field(
        None, description="The maximum length of the text."
    )
    IsMultiline: Optional[bool] = Field(
        None, description="If true, the text box can have multiple lines."
    )
    IsPassword: Optional[bool] = Field(
        None,
        description="If true, the text box behaves like a password input field and does not show the actually entered characters.",
    )
    TextFormat: Optional[FilePrepareTextFormat] = Field(
        None, description="The configuration of the text format."
    )
    Position: Optional[FilePreparePosition] = Field(
        None, description="The position of the  within the document."
    )
    Size: Optional[FilePrepareSize] = Field(
        None, description="The size of the form field."
    )


class FilePrepareCheckBoxDefinition(BaseModel):
    ExportValue: Optional[str] = Field(
        None, description="The value of the check box when it is checked."
    )
    Position: Optional[FilePreparePosition] = Field(
        None, description="The position of the  within the document."
    )
    Size: Optional[FilePrepareSize] = Field(
        None, description="The size of the form field."
    )
    ReadOnly: Optional[bool] = Field(
        None, description="If true, the element is readonly."
    )


class FilePrepareComboBoxDefinition(BaseModel):
    TextFormat: Optional[FilePrepareTextFormat] = Field(
        None, description="The configuration of the text format."
    )
    Items: Optional[List[FilePrepareChoiceItem]] = Field(
        None, description="A list of items that can be selected for the element."
    )
    IsEditable: Optional[bool] = Field(
        None, description="If true, the combo box is editable."
    )
    ReadOnly: Optional[bool] = Field(
        None, description="If true, the element is readonly."
    )
    Position: Optional[FilePreparePosition] = Field(
        None, description="The position of the  within the document."
    )
    Size: Optional[FilePrepareSize] = Field(
        None, description="The size of the form field."
    )


class FilePrepareRadioButtonDefinition(BaseModel):
    IsSelectUnison: Optional[bool] = Field(
        None,
        description="If true, radio buttons with the same <code>ExportValue</code> are checked and unchecked together.",
    )
    Items: Optional[List[FilePrepareRadioButtonItemDefinition]] = Field(
        None, description="The list of radiobuttons that belong to the same group."
    )


class FilePrepareListBoxDefinition(BaseModel):
    TextFormat: Optional[FilePrepareTextFormat] = Field(
        None, description="The configuration of the text format."
    )
    Items: Optional[List[FilePrepareChoiceItem]] = Field(
        None, description="A list of items that can be selected for the element."
    )
    IsMultiSelect: Optional[bool] = Field(
        None, description="If true, multiple values of the list box can be selected."
    )
    ReadOnly: Optional[bool] = Field(
        None, description="If true, the element is readonly."
    )
    Position: Optional[FilePreparePosition] = Field(
        None, description="The position of the  within the document."
    )
    Size: Optional[FilePrepareSize] = Field(
        None, description="The size of the form field."
    )


class FilePrepareSignatureFieldDefinition(BaseModel):
    Position: Optional[FilePreparePosition] = Field(
        None, description="The position of the  within the document."
    )
    Size: Optional[FilePrepareSize] = Field(
        None, description="The size of the form field."
    )


class FilePrepareSignatureTaskConfiguration(BaseModel):
    StampImprintDateConfiguration: Optional[
        FilePrepareStampImprintDateConfiguration
    ] = Field(None, description="The configuration of the stamp imprint date.")
    BatchGroup: Optional[str] = Field(None, description="The batch group.")


class FilePrepareAttachmentDefinition(BaseModel):
    Position: Optional[FilePreparePosition] = Field(
        None, description="The position of the  within the document."
    )
    Size: Optional[FilePrepareSize] = Field(
        None, description="The size of the form field."
    )


class FilePrepareHyperLink(BaseModel):
    Id: Optional[str] = Field(None, description="The identifier of the hyperlink.")
    Uri: Optional[str] = Field(None, description="The URI of the hyperlink.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    FieldDefinition: Optional[FilePrepareLinkDefinition] = Field(
        None, description="The definition of the hyperlink element."
    )


class FilePrepareDateValidationConfiguration(BaseModel):
    DateFormat: Optional[str] = Field(None, description="The format of the dates.")
    Range: Optional[FilePrepareFieldValidationRange] = Field(
        None, description="The range of the values."
    )


class FilePrepareNumberValidationConfiguration(BaseModel):
    DecimalDigits: Optional[int] = Field(
        None, description="The expected amount of decimal digits."
    )
    Symbol: Optional[str] = Field(None, description="The expected symbol.")
    SymbolLocation: Optional[SymbolLocation] = Field(
        None, description="The defined symbol location."
    )
    GroupSeparator: Optional[GroupSeparator] = Field(
        None, description="The expected thousands separator."
    )
    DecimalSeparator: Optional[DecimalSeparator] = Field(
        None, description="The expected decimal separator."
    )
    Range: Optional[FilePrepareFieldValidationRange] = Field(
        None, description="The range of the values."
    )


class FilePrepareTimeValidationConfiguration(BaseModel):
    TimeFormat: Optional[str] = Field(
        None, description="The format of the time values."
    )
    Range: Optional[FilePrepareFieldValidationRange] = Field(
        None, description="The range of the values."
    )


class FilePrepareClickToSignSignatureType(BaseModel):
    UseExternalSignatureImage: Optional[UseExternalSignatureImage] = Field(
        None, description="The external signature image mode."
    )
    Preferred: Optional[bool] = Field(
        None, description="If true, the signature type is set as preferred."
    )
    StampImprintConfiguration: Optional[FilePrepareClickToSignStampImprint] = Field(
        None, description="The configuration of the stamp imprint of the signature."
    )


class FilePrepareDrawToSignSignatureType(BaseModel):
    UseExternalSignatureImage: Optional[UseExternalSignatureImage] = Field(
        None, description="The external signature image mode."
    )
    Preferred: Optional[bool] = Field(
        None, description="If true, the signature type is set as preferred."
    )
    StampImprintConfiguration: Optional[FilePrepareDrawToSignStampImprint] = Field(
        None, description="The configuration of the stamp imprint of the signature."
    )


class FilePrepareTypeToSignSignatureType(BaseModel):
    UseExternalSignatureImage: Optional[UseExternalSignatureImage] = Field(
        None, description="The external signature image mode."
    )
    Preferred: Optional[bool] = Field(
        None, description="If true, the signature type is set as preferred."
    )
    StampImprintConfiguration: Optional[FilePrepareTypeToSignStampImprint] = Field(
        None, description="The configuration of the stamp imprint of the signature."
    )


class FilePrepareLocalCertificateSignatureType(BaseModel):
    EnforcePreferredHashAlgorithm: Optional[bool] = Field(
        None,
        description="If true, the usage of the preferred hash algorithm is enforced.",
    )
    PreferredHashAlgorithm: Optional[PreferredHashAlgorithm] = Field(
        None, description="The preferred hash algorithm."
    )
    UseExternalSignatureImage: Optional[UseExternalSignatureImage] = Field(
        None, description="The external signature image mode."
    )
    Preferred: Optional[bool] = Field(
        None, description="If true, the signature type is set as preferred."
    )
    StampImprintConfiguration: Optional[FilePrepareLocalCertificateStampImprint] = (
        Field(
            None, description="The configuration of the stamp imprint of the signature."
        )
    )


class FilePrepareDisposableCertificateSignatureType(BaseModel):
    IsLongLived: Optional[bool] = Field(
        None, description="If true, the disposable certificate is long lived."
    )
    ValidityInSeconds: Optional[int] = Field(
        None, description="The validity of the certificate in seconds."
    )
    UseExternalSignatureImage: Optional[UseExternalSignatureImage] = Field(
        None, description="The external signature image mode."
    )
    Preferred: Optional[bool] = Field(
        None, description="If true, the signature type is set as preferred."
    )
    StampImprintConfiguration: Optional[
        FilePrepareDisposableCertificateStampImprint
    ] = Field(
        None, description="The configuration of the stamp imprint of the signature."
    )


class FilePrepareSwissComOnDemandSignatureType(BaseModel):
    ValidityInSeconds: Optional[int] = Field(
        None, description="The certificate validity in seconds."
    )
    Preferred: Optional[bool] = Field(
        None, description="If true, the signature type is set as preferred."
    )
    StampImprintConfiguration: Optional[FilePrepareSwissComOnDemandStampImprint] = (
        Field(
            None, description="The configuration of the stamp imprint of the signature."
        )
    )


class FilePrepareRemoteCertificateSignatureType(BaseModel):
    ValidityInSeconds: Optional[int] = Field(
        None, description="The validity of the certificate in seconds."
    )
    UseExternalSignatureImage: Optional[UseExternalSignatureImage] = Field(
        None, description="The external signature image mode."
    )
    Preferred: Optional[bool] = Field(
        None, description="If true, the signature type is set as preferred."
    )
    StampImprintConfiguration: Optional[FilePrepareRemoteCertificateStampImprint] = (
        Field(
            None, description="The configuration of the stamp imprint of the signature."
        )
    )


class FilePrepareOneTimePasswordSignatureType(BaseModel):
    ValidityInSeconds: Optional[int] = Field(
        None, description="The validity of the password in seconds."
    )
    UseExternalSignatureImage: Optional[UseExternalSignatureImage] = Field(
        None, description="The external signature image mode."
    )
    Preferred: Optional[bool] = Field(
        None, description="If true, the signature type is set as preferred."
    )
    StampImprintConfiguration: Optional[FilePrepareOneTimePasswordStampImprint] = Field(
        None, description="The configuration of the stamp imprint of the signature."
    )


class FilePrepareSwedishBankIdSignatureType(BaseModel):
    Preferred: Optional[bool] = Field(
        None, description="If true, the signature type is set as preferred."
    )
    StampImprintConfiguration: Optional[FilePrepareSwedishBankIdStampImprint] = Field(
        None, description="The configuration of the stamp imprint of the signature."
    )


class FilePrepareSignaturePluginSignatureType(BaseModel):
    PluginId: Optional[str] = Field(None, description="The identifier of the plugin.")
    Preferred: Optional[bool] = Field(
        None, description="If true, the signature type is set as preferred."
    )
    StampImprintConfiguration: Optional[FilePreparePluginStampImprint] = Field(
        None, description="The configuration of the stamp imprint of the signature."
    )


class FilePrepareVisibleSignature(BaseModel):
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    Id: Optional[str] = Field(
        None, description="The identifier of the signature field."
    )
    UseExternalTimestampServer: Optional[bool] = Field(
        None,
        description="If true, a timestamp from an external server is embedded into the signature.",
    )
    FieldDefinition: Optional[FilePrepareSignatureFieldDefinition] = Field(
        None, description="The definition of the signature field."
    )


class LicenseGetResponse(BaseModel):
    Type: Optional[str] = Field(None, description="The type of the license.")
    ExpirationDate: Optional[datetime] = Field(
        None,
        description="The expiration date of the license.\r\nThe value null indicates that it does not expire.\r\nA datetime in the format RFC 3339, section 5.6, 'date-Time' (e.g. 2017-07-21T17:32:28Z).",
    )
    Envelopes: Optional[LicenseGetAmount] = Field(
        None, description="The license status for the number of envelopes."
    )
    EnvelopeSenderUsers: Optional[LicenseGetAmount] = Field(
        None,
        description="The license status for the number of senders.\r\nIf the license type is <code>Trial</code>, <code>EnvelopeSenderUsers</code> and <code>EnvelopeViewerUsers</code> have a combined limit.",
    )
    EnvelopeViewerUsers: Optional[LicenseGetAmount] = Field(
        None,
        description="The license status for the number of users which are only able to access their received envelopes.\r\nIf the license type is <code>Trial</code>, <code>EnvelopeSenderUsers</code> and <code>EnvelopeViewerUsers</code> have a combined limit.",
    )


class SealingCertificateGetAllResponse(BaseModel):
    SealingCertificates: Optional[List[SealingCertificateGetAllEntry]] = Field(
        None, description="Sealing certificates."
    )


class TeamGetAllTeam(BaseModel):
    Name: Optional[str] = Field(None, description="The name of the team.")
    ShareEnvelopes: Optional[bool] = Field(
        None, description="If true, envelopes are shared with team members."
    )
    ShareTemplates: Optional[bool] = Field(
        None, description="If true, templates are shared with team members."
    )
    Head: Optional[TeamGetAllTeamMember] = Field(
        None, description="The leader of the team."
    )


class TeamReplaceTeam(BaseModel):
    Name: str = Field(..., description="The name of the team.")
    ShareEnvelopes: Optional[bool] = Field(
        None, description="If true, envelopes are shared with team members."
    )
    ShareTemplates: Optional[bool] = Field(
        None, description="If true, templates are shared with team members."
    )
    Head: Optional[TeamReplaceTeamMember] = Field(
        None, description="The leader of the team."
    )


class TemplateGetSendCopy(BaseModel):
    ContactInformation: Optional[TemplateGetContactInformation] = Field(
        None, description="The contact information of the recipient."
    )
    CopyingGroup: Optional[int] = Field(
        None, description="The parallel group for copy actions."
    )


class TemplateGetSignBulk(BaseModel):
    RecipientConfigurations: Optional[
        List[TemplateGetAdvancedRecipientConfiguration]
    ] = Field(None, description="The contact information of the recipients.")


class TemplateGetSign(BaseModel):
    ContactInformation: Optional[TemplateGetContactInformation] = Field(
        None, description="The contact information of the recipient."
    )
    SigningGroup: Optional[int] = Field(
        None, description="The parallel group for sign actions."
    )


class TemplateGetView(BaseModel):
    ContactInformation: Optional[TemplateGetContactInformation] = Field(
        None, description="The contact information of the recipient."
    )
    ViewingGroup: Optional[int] = Field(
        None, description="The parallel group for view actions."
    )


class TemplateGetSignAsP7M(BaseModel):
    ContactInformation: Optional[TemplateGetContactInformation] = Field(
        None, description="The contact information of the recipient."
    )
    SignAsP7MGroup: Optional[int] = Field(
        None, description="The parallel group for P7M actions."
    )


class TemplateGetFilesDocument(BaseModel):
    FileName: Optional[str] = Field(None, description="The name of the file.")
    PageCount: Optional[int] = Field(None, description="The number of pages.")
    Pages: Optional[List[TemplateGetFilesPage]] = Field(
        None, description="The pages of the document."
    )
    DocumentNumber: Optional[int] = Field(
        None, description="The reference number of the document. It starts with 1."
    )


class TemplateGetElementsTextBoxDefinition(BaseModel):
    ReadOnly: Optional[bool] = Field(
        None, description="If true, the element is readonly."
    )
    MaxLength: Optional[int] = Field(
        None, description="The maximum length of the text."
    )
    IsMultiline: Optional[bool] = Field(
        None, description="If true, the text box can have multiple lines."
    )
    IsPassword: Optional[bool] = Field(
        None,
        description="If true, the text box behaves like a password input field and does not show the actually entered characters.",
    )
    TextFormat: Optional[TemplateGetElementsTextFormat] = Field(
        None, description="The configuration of the text format."
    )
    Position: Optional[TemplateGetElementsPosition] = Field(
        None, description="The position of the  within the document."
    )
    Size: Optional[TemplateGetElementsSize] = Field(
        None, description="The size of the form field."
    )


class TemplateGetElementsCheckBoxDefinition(BaseModel):
    ExportValue: Optional[str] = Field(
        None, description="The value of the check box when it is checked."
    )
    Position: Optional[TemplateGetElementsPosition] = Field(
        None, description="The position of the  within the document."
    )
    Size: Optional[TemplateGetElementsSize] = Field(
        None, description="The size of the form field."
    )
    ReadOnly: Optional[bool] = Field(
        None, description="If true, the element is readonly."
    )


class TemplateGetElementsComboBoxDefinition(BaseModel):
    TextFormat: Optional[TemplateGetElementsTextFormat] = Field(
        None, description="The configuration of the text format."
    )
    Items: Optional[List[TemplateGetElementsChoiceItem]] = Field(
        None, description="A list of items that can be selected for the element."
    )
    IsEditable: Optional[bool] = Field(
        None, description="If true, the combo box is editable."
    )
    ReadOnly: Optional[bool] = Field(
        None, description="If true, the element is readonly."
    )
    Position: Optional[TemplateGetElementsPosition] = Field(
        None, description="The position of the  within the document."
    )
    Size: Optional[TemplateGetElementsSize] = Field(
        None, description="The size of the form field."
    )


class TemplateGetElementsRadioButtonDefinition(BaseModel):
    IsSelectUnison: Optional[bool] = Field(
        None,
        description="If true, radio buttons with the same <code>ExportValue</code> are checked and unchecked together.",
    )
    Items: Optional[List[TemplateGetElementsRadioButtonItemDefinition]] = Field(
        None, description="The list of radiobuttons that belong to the same group."
    )


class TemplateGetElementsListBoxDefinition(BaseModel):
    TextFormat: Optional[TemplateGetElementsTextFormat] = Field(
        None, description="The configuration of the text format."
    )
    Items: Optional[List[TemplateGetElementsChoiceItem]] = Field(
        None, description="A list of items that can be selected for the element."
    )
    IsMultiSelect: Optional[bool] = Field(
        None, description="If true, multiple values of the list box can be selected."
    )
    ReadOnly: Optional[bool] = Field(
        None, description="If true, the element is readonly."
    )
    Position: Optional[TemplateGetElementsPosition] = Field(
        None, description="The position of the  within the document."
    )
    Size: Optional[TemplateGetElementsSize] = Field(
        None, description="The size of the form field."
    )


class TemplateGetElementsSignatureFieldDefinition(BaseModel):
    Position: Optional[TemplateGetElementsPosition] = Field(
        None, description="The position of the  within the document."
    )
    Size: Optional[TemplateGetElementsSize] = Field(
        None, description="The size of the form field."
    )


class TemplateGetElementsSignatureTaskConfiguration(BaseModel):
    StampImprintDateConfiguration: Optional[
        TemplateGetElementsStampImprintDateConfiguration
    ] = Field(None, description="The configuration of the stamp imprint date.")
    BatchGroup: Optional[str] = Field(None, description="The batch group.")


class TemplateGetElementsAttachmentDefinition(BaseModel):
    Position: Optional[TemplateGetElementsPosition] = Field(
        None, description="The position of the  within the document."
    )
    Size: Optional[TemplateGetElementsSize] = Field(
        None, description="The size of the form field."
    )


class TemplateGetElementsPredefinedText(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    Value: Optional[str] = Field(None, description="The value of the predefined text.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    FieldDefinition: Optional[TemplateGetElementsPredefinedElementDefinition] = Field(
        None, description="The definition of the predefined element."
    )


class TemplateGetElementsEmail(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    FieldDefinition: Optional[TemplateGetElementsPredefinedElementDefinition] = Field(
        None, description="The definition of the predefined element."
    )


class TemplateGetElementsInitials(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    IncludeMiddleNameInitials: Optional[bool] = Field(
        None,
        description="If true, the initials from the middle names are included as well. \r\nThe initials are read from the given name. Additional names are expected to be separated by a space.",
    )
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    FieldDefinition: Optional[TemplateGetElementsPredefinedElementDefinition] = Field(
        None, description="The definition of the predefined element."
    )


class TemplateGetElementsGivenName(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    FieldDefinition: Optional[TemplateGetElementsPredefinedElementDefinition] = Field(
        None, description="The definition of the predefined element."
    )


class TemplateGetElementsSurname(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    FieldDefinition: Optional[TemplateGetElementsPredefinedElementDefinition] = Field(
        None, description="The definition of the predefined element."
    )


class TemplateGetElementsFullName(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    FieldDefinition: Optional[TemplateGetElementsPredefinedElementDefinition] = Field(
        None, description="The definition of the predefined element."
    )


class TemplateGetElementsDate(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    DateFormat: Optional[str] = Field(None, description="The format of the date.")
    FieldDefinition: Optional[TemplateGetElementsPredefinedElementDefinition] = Field(
        None, description="The definition of the predefined element."
    )


class TemplateGetElementsHyperLink(BaseModel):
    Id: Optional[str] = Field(None, description="The identifier of the hyperlink.")
    Uri: Optional[str] = Field(None, description="The URI of the hyperlink.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    FieldDefinition: Optional[TemplateGetElementsLinkDefinition] = Field(
        None, description="The definition of the hyperlink element."
    )


class TemplateGetElementsReadingAreaDefinition(BaseModel):
    Position: Optional[TemplateGetElementsPosition] = Field(
        None, description="The position of the  within the document."
    )
    Size: Optional[TemplateGetElementsSize] = Field(
        None, description="The size of the form field."
    )


class TemplateGetElementsDateValidationConfiguration(BaseModel):
    DateFormat: Optional[str] = Field(None, description="The format of the dates.")
    Range: Optional[TemplateGetElementsFieldValidationRange] = Field(
        None, description="The range of the values."
    )


class TemplateGetElementsNumberValidationConfiguration(BaseModel):
    DecimalDigits: Optional[int] = Field(
        None, description="The expected amount of decimal digits."
    )
    Symbol: Optional[str] = Field(None, description="The expected symbol.")
    SymbolLocation: Optional[SymbolLocation] = Field(
        None, description="The defined symbol location."
    )
    GroupSeparator: Optional[GroupSeparator] = Field(
        None, description="The expected thousands separator."
    )
    DecimalSeparator: Optional[DecimalSeparator] = Field(
        None, description="The expected decimal separator."
    )
    Range: Optional[TemplateGetElementsFieldValidationRange] = Field(
        None, description="The range of the values."
    )


class TemplateGetElementsTimeValidationConfiguration(BaseModel):
    TimeFormat: Optional[str] = Field(
        None, description="The format of the time values."
    )
    Range: Optional[TemplateGetElementsFieldValidationRange] = Field(
        None, description="The range of the values."
    )


class TemplateGetElementsClickToSignSignatureType(BaseModel):
    UseExternalSignatureImage: Optional[UseExternalSignatureImage] = Field(
        None, description="The external signature image mode."
    )
    Preferred: Optional[bool] = Field(
        None, description="If true, the signature type is set as preferred."
    )
    StampImprintConfiguration: Optional[TemplateGetElementsClickToSignStampImprint] = (
        Field(
            None, description="The configuration of the stamp imprint of the signature."
        )
    )


class TemplateGetElementsDrawToSignSignatureType(BaseModel):
    UseExternalSignatureImage: Optional[UseExternalSignatureImage] = Field(
        None, description="The external signature image mode."
    )
    Preferred: Optional[bool] = Field(
        None, description="If true, the signature type is set as preferred."
    )
    StampImprintConfiguration: Optional[TemplateGetElementsDrawToSignStampImprint] = (
        Field(
            None, description="The configuration of the stamp imprint of the signature."
        )
    )


class TemplateGetElementsTypeToSignSignatureType(BaseModel):
    UseExternalSignatureImage: Optional[UseExternalSignatureImage] = Field(
        None, description="The external signature image mode."
    )
    Preferred: Optional[bool] = Field(
        None, description="If true, the signature type is set as preferred."
    )
    StampImprintConfiguration: Optional[TemplateGetElementsTypeToSignStampImprint] = (
        Field(
            None, description="The configuration of the stamp imprint of the signature."
        )
    )


class TemplateGetElementsLocalCertificateSignatureType(BaseModel):
    EnforcePreferredHashAlgorithm: Optional[bool] = Field(
        None,
        description="If true, the usage of the preferred hash algorithm is enforced.",
    )
    PreferredHashAlgorithm: Optional[PreferredHashAlgorithm] = Field(
        None, description="The preferred hash algorithm."
    )
    UseExternalSignatureImage: Optional[UseExternalSignatureImage] = Field(
        None, description="The external signature image mode."
    )
    Preferred: Optional[bool] = Field(
        None, description="If true, the signature type is set as preferred."
    )
    StampImprintConfiguration: Optional[
        TemplateGetElementsLocalCertificateStampImprint
    ] = Field(
        None, description="The configuration of the stamp imprint of the signature."
    )


class TemplateGetElementsDisposableCertificateSignatureType(BaseModel):
    IsLongLived: Optional[bool] = Field(
        None, description="If true, the disposable certificate is long lived."
    )
    ValidityInSeconds: Optional[int] = Field(
        None, description="The validity of the certificate in seconds."
    )
    UseExternalSignatureImage: Optional[UseExternalSignatureImage] = Field(
        None, description="The external signature image mode."
    )
    Preferred: Optional[bool] = Field(
        None, description="If true, the signature type is set as preferred."
    )
    StampImprintConfiguration: Optional[
        TemplateGetElementsDisposableCertificateStampImprint
    ] = Field(
        None, description="The configuration of the stamp imprint of the signature."
    )


class TemplateGetElementsSwissComOnDemandSignatureType(BaseModel):
    ValidityInSeconds: Optional[int] = Field(
        None, description="The certificate validity in seconds."
    )
    Preferred: Optional[bool] = Field(
        None, description="If true, the signature type is set as preferred."
    )
    StampImprintConfiguration: Optional[
        TemplateGetElementsSwissComOnDemandStampImprint
    ] = Field(
        None, description="The configuration of the stamp imprint of the signature."
    )


class TemplateGetElementsRemoteCertificateSignatureType(BaseModel):
    ValidityInSeconds: Optional[int] = Field(
        None, description="The validity of the certificate in seconds."
    )
    UseExternalSignatureImage: Optional[UseExternalSignatureImage] = Field(
        None, description="The external signature image mode."
    )
    Preferred: Optional[bool] = Field(
        None, description="If true, the signature type is set as preferred."
    )
    StampImprintConfiguration: Optional[
        TemplateGetElementsRemoteCertificateStampImprint
    ] = Field(
        None, description="The configuration of the stamp imprint of the signature."
    )


class TemplateGetElementsOneTimePasswordSignatureType(BaseModel):
    ValidityInSeconds: Optional[int] = Field(
        None, description="The validity of the password in seconds."
    )
    UseExternalSignatureImage: Optional[UseExternalSignatureImage] = Field(
        None, description="The external signature image mode."
    )
    Preferred: Optional[bool] = Field(
        None, description="If true, the signature type is set as preferred."
    )
    StampImprintConfiguration: Optional[
        TemplateGetElementsOneTimePasswordStampImprint
    ] = Field(
        None, description="The configuration of the stamp imprint of the signature."
    )


class TemplateGetElementsSwedishBankIdSignatureType(BaseModel):
    Preferred: Optional[bool] = Field(
        None, description="If true, the signature type is set as preferred."
    )
    StampImprintConfiguration: Optional[
        TemplateGetElementsSwedishBankIdStampImprint
    ] = Field(
        None, description="The configuration of the stamp imprint of the signature."
    )


class TemplateGetElementsSignaturePluginSignatureType(BaseModel):
    PluginId: Optional[str] = Field(None, description="The identifier of the plugin.")
    Preferred: Optional[bool] = Field(
        None, description="If true, the signature type is set as preferred."
    )
    StampImprintConfiguration: Optional[TemplateGetElementsPluginStampImprint] = Field(
        None, description="The configuration of the stamp imprint of the signature."
    )


class TemplateGetElementsVisibleSignature(BaseModel):
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    Id: Optional[str] = Field(
        None, description="The identifier of the signature field."
    )
    UseExternalTimestampServer: Optional[bool] = Field(
        None,
        description="If true, a timestamp from an external server is embedded into the signature.",
    )
    FieldDefinition: Optional[TemplateGetElementsSignatureFieldDefinition] = Field(
        None, description="The definition of the signature field."
    )


class TemplateGetConfigurationAgreementConfiguration(BaseModel):
    Translations: Optional[List[TemplateGetConfigurationAgreementTranslation]] = Field(
        None,
        description="The agreement and its translations to be used.\r\nIf no custom agreement is specified, the default organization agreement will be used.",
    )


class TemplateGetConfigurationDefaultSignatureTypeConfiguration(BaseModel):
    None_: Optional[TemplateGetConfigurationDefaultSignature] = Field(
        None, alias="None", description='"None" SignatureType.'
    )
    ClickToSign: Optional[TemplateGetConfigurationDefaultSignature] = Field(
        None, description='"click to sign" SignatureType.'
    )
    DrawToSign: Optional[TemplateGetConfigurationDefaultSignature] = Field(
        None, description='"draw to sign" SignatureType.'
    )
    TypeToSign: Optional[TemplateGetConfigurationDefaultSignature] = Field(
        None, description='"type to sign" SignatureType.'
    )
    LocalCertificate: Optional[TemplateGetConfigurationDefaultSignature] = Field(
        None, description='"local certificate" SignatureType.'
    )
    DisposableCertificate: Optional[TemplateGetConfigurationDefaultSignature] = Field(
        None, description='"disposable certificate" SignatureType.'
    )
    Biometric: Optional[TemplateGetConfigurationDefaultSignature] = Field(
        None, description='"biometric signature" SignatureType.'
    )
    RemoteCertificate: Optional[TemplateGetConfigurationDefaultSignature] = Field(
        None, description='"remote certificate" SignatureType.'
    )
    OneTimePassword: Optional[TemplateGetConfigurationDefaultSignature] = Field(
        None, description='"one time password (SMS-OTP)" SignatureType.'
    )


class TemplateGetConfigurationActivityActionCallbackConfiguration(BaseModel):
    Url: Optional[str] = Field(
        None, description="The callback URL triggered for the selected events."
    )
    ActionCallbackSelection: Optional[
        TemplateGetConfigurationActionCallbackSelection
    ] = Field(None, description="The selection of events which trigger the callback.")


class TemplateGetConfigurationSendCopy(BaseModel):
    RecipientConfiguration: Optional[
        TemplateGetConfigurationBasicRecipientConfiguration
    ] = Field(None, description="The configuration of the recipient.")
    CopyingGroup: Optional[int] = Field(
        None, description="The parallel group for copy actions."
    )


class TemplateGetConfigurationFinishAction(BaseModel):
    SignAnyWhereViewer: Optional[TemplateGetConfigurationWebFinishAction] = Field(
        None, description="The actions for the SAW Viewer."
    )
    SignificantClientSignatureCaptureForIos: Optional[
        TemplateGetConfigurationAppFinishAction
    ] = Field(
        None,
        description="The actions for the SIGNificant Client Signature Capture App for iOS.",
    )
    SignificantClientSignatureCaptureForAndroid: Optional[
        TemplateGetConfigurationAppFinishAction
    ] = Field(
        None,
        description="The actions for the SIGNificant Client Signature Capture App for Android.",
    )
    SignificantClientSignatureCaptureForWindows: Optional[
        TemplateGetConfigurationAppFinishAction
    ] = Field(
        None,
        description="The actions for the SIGNificant Client Signature Capture App for Windows.",
    )
    KioskSdk: Optional[TemplateGetConfigurationKioskFinishAction] = Field(
        None, description="The actions for the SIGNificant Kiosk SDK."
    )


class TemplateGetConfigurationSignaturePluginSignatureData(BaseModel):
    PluginId: Optional[str] = Field(
        None, description="The identifier of the signature plugin."
    )
    Fields: Optional[List[TemplateGetConfigurationSignaturePluginParameter]] = Field(
        None,
        description="The plugin parameters referred to as the GSP sender data fields.",
    )


class TemplateGetConfigurationOAuthAuthentication(BaseModel):
    ProviderName: Optional[str] = Field(
        None, description="The name of the OAuth provider."
    )
    Validations: Optional[List[TemplateGetConfigurationAuthenticationValidation]] = (
        Field(None, description="The validation rules for the OAuth response.")
    )


class TemplateGetConfigurationSamlAuthentication(BaseModel):
    ProviderName: Optional[str] = Field(
        None, description="The name of the SAML provider."
    )
    Validations: Optional[List[TemplateGetConfigurationAuthenticationValidation]] = (
        Field(None, description="The validation rules for the SAML response.")
    )


class TemplateFindResponse(BaseModel):
    Templates: Optional[List[TemplateFindTemplate]] = Field(
        None, description="The templates matching the search criteria."
    )


class DraftGetAction(BaseModel):
    SendCopy: Optional[DraftGetSendCopy] = Field(
        None, description="The definition of the copy action."
    )
    SignBulk: Optional[DraftGetSignBulk] = Field(
        None, description="The definition of the bulk."
    )
    SignAutomatic: Optional[DraftGetSignAutomatic] = Field(
        None, description="The definition of the automatic sign action."
    )
    Sign: Optional[DraftGetSign] = Field(
        None, description="The definition of the sign action."
    )
    View: Optional[DraftGetView] = Field(
        None, description="The definition of the view action."
    )
    SignAsP7M: Optional[DraftGetSignAsP7M] = Field(
        None, description="The definition of the P7M sign action."
    )


class DraftGetFilesResponse(BaseModel):
    Documents: Optional[List[DraftGetFilesDocument]] = Field(
        None, description="The documents."
    )


class DraftGetElementsCheckBox(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    Required: Optional[bool] = Field(
        None, description="If true, the element is required."
    )
    IsChecked: Optional[bool] = Field(
        None, description="If true, the check box is checked."
    )
    GuidingOrder: Optional[int] = Field(None, description="The order of the element.")
    FieldDefinition: Optional[DraftGetElementsCheckBoxDefinition] = Field(
        None, description="The definition of the check box."
    )


class DraftGetElementsComboBox(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    Required: Optional[bool] = Field(
        None, description="If true, the element is required."
    )
    Value: Optional[str] = Field(
        None, description="The selected value of the combo box."
    )
    GuidingOrder: Optional[int] = Field(None, description="The order of the element.")
    FieldDefinition: Optional[DraftGetElementsComboBoxDefinition] = Field(
        None, description="The definition of the combo box."
    )


class DraftGetElementsRadioButtonGroup(BaseModel):
    GroupName: Optional[str] = Field(
        None, description="The name of the radio button group."
    )
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    Required: Optional[bool] = Field(
        None, description="If true, the element is required."
    )
    SelectedItem: Optional[str] = Field(
        None,
        description="The export value of the selected item of the radio button group.",
    )
    GuidingOrder: Optional[int] = Field(None, description="The order of the element.")
    FieldDefinition: Optional[DraftGetElementsRadioButtonDefinition] = Field(
        None, description="The definition of the radio button group."
    )


class DraftGetElementsListBox(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    Required: Optional[bool] = Field(
        None, description="If true, the element is required."
    )
    PreSelectedItems: Optional[List[str]] = Field(
        None,
        description="The export values of the items which should be initially selected.",
    )
    GuidingOrder: Optional[int] = Field(None, description="The order of the element.")
    FieldDefinition: Optional[DraftGetElementsListBoxDefinition] = Field(
        None, description="The definition of the list box field."
    )


class DraftGetElementsAttachment(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    Required: Optional[bool] = Field(
        None, description="If true, the element is required."
    )
    DisplayName: Optional[str] = Field(None, description="The displayed name.")
    DisplayIconType: Optional[DisplayIconType] = Field(
        None, description="The type of the displayed icon."
    )
    GuidingOrder: Optional[int] = Field(None, description="The order of the element.")
    FieldDefinition: Optional[DraftGetElementsAttachmentDefinition] = Field(
        None, description="The definition of the attachment element."
    )


class DraftGetElementsPredefinedFieldElements(BaseModel):
    TextFields: Optional[List[DraftGetElementsPredefinedText]] = Field(
        None, description="The predefined text fields."
    )
    EmailFields: Optional[List[DraftGetElementsEmail]] = Field(
        None, description="The recipient's email fields."
    )
    InitialsFields: Optional[List[DraftGetElementsInitials]] = Field(
        None, description="The recipient's initials fields."
    )
    GivenNameFields: Optional[List[DraftGetElementsGivenName]] = Field(
        None, description="The recipient's given name fields."
    )
    SurnameFields: Optional[List[DraftGetElementsSurname]] = Field(
        None, description="The recipient's surname fields."
    )
    FullNameFields: Optional[List[DraftGetElementsFullName]] = Field(
        None, description="The recipient's full name fields."
    )
    DateFields: Optional[List[DraftGetElementsDate]] = Field(
        None, description="The current date fields."
    )


class DraftGetElementsLinkConfiguration(BaseModel):
    HyperLinks: Optional[List[DraftGetElementsHyperLink]] = Field(
        None, description="The list of hyperlink elements."
    )


class DraftGetElementsReadAreaConfirmation(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    Required: Optional[bool] = Field(
        None, description="If true, the element is required."
    )
    DocumentNumber: Optional[int] = Field(
        None,
        description="The document reference number of the element (starting with 1).",
    )
    DisplayName: Optional[str] = Field(None, description="The displayed name.")
    GuidingOrder: Optional[int] = Field(None, description="The order of the element.")
    Definition: Optional[DraftGetElementsReadingAreaDefinition] = Field(
        None, description="The definition of the area."
    )


class DraftGetElementsFieldValidation(BaseModel):
    Type: Optional[Type] = Field(None, description="The type of the value.")
    DateValidationConfiguration: Optional[
        DraftGetElementsDateValidationConfiguration
    ] = Field(None, description="The validation rules for dates.")
    NumberValidationConfiguration: Optional[
        DraftGetElementsNumberValidationConfiguration
    ] = Field(None, description="The validation rules for numbers.")
    PhoneValidationConfiguration: Optional[
        DraftGetElementsPhoneValidationConfiguration
    ] = Field(None, description="The validation rules for phone numbers.")
    TimeValidationConfiguration: Optional[
        DraftGetElementsTimeValidationConfiguration
    ] = Field(None, description="The validation rules for time values.")


class DraftGetElementsAllowedSignatureTypes(BaseModel):
    ClickToSign: Optional[DraftGetElementsClickToSignSignatureType] = Field(
        None, description='Allow signing with "click to sign".'
    )
    DrawToSign: Optional[DraftGetElementsDrawToSignSignatureType] = Field(
        None, description='Allow signing with "draw to sign".'
    )
    TypeToSign: Optional[DraftGetElementsTypeToSignSignatureType] = Field(
        None, description='Allow signing with "type to sign".'
    )
    LocalCertificate: Optional[DraftGetElementsLocalCertificateSignatureType] = Field(
        None, description="Allow signing with a local certificate."
    )
    DisposableCertificate: Optional[
        DraftGetElementsDisposableCertificateSignatureType
    ] = Field(None, description="Allow signing with a disposable certificate.")
    SwissComOnDemand: Optional[DraftGetElementsSwissComOnDemandSignatureType] = Field(
        None, description="Allow signing with a Swisscom On-Demand certificate."
    )
    ATrustCertificate: Optional[DraftGetElementsATrustCertificateSignatureType] = Field(
        None, description="Allow signing with an A-Trust certificate."
    )
    Biometric: Optional[DraftGetElementsBiometricSignatureType] = Field(
        None, description="Allow signing with a biometric signature."
    )
    RemoteCertificate: Optional[DraftGetElementsRemoteCertificateSignatureType] = Field(
        None, description="Allow signing with a remote certificate."
    )
    OneTimePassword: Optional[DraftGetElementsOneTimePasswordSignatureType] = Field(
        None, description="Allow signing with a one time password (SMS-OTP)."
    )
    SwedishBankId: Optional[DraftGetElementsSwedishBankIdSignatureType] = Field(
        None, description="Allow signing with Swedish BankID."
    )
    SignaturePlugins: Optional[List[DraftGetElementsSignaturePluginSignatureType]] = (
        Field(None, description="Allow signing with signature plugins.")
    )


class DraftGetElementsSignAutomatic(BaseModel):
    VisibleSignatures: Optional[List[DraftGetElementsVisibleSignature]] = Field(
        None,
        description="The visible signatures define the optional visual representations for automatic signatures.\r\nIf none are defined, the automatic signatures are applied to the documents without a visual element.",
    )


class DraftGetConfigurationCallbackConfiguration(BaseModel):
    CallbackUrl: Optional[str] = Field(
        None,
        description="The callback URL triggered when the envelope has been finished.",
    )
    StatusUpdateCallbackUrl: Optional[str] = Field(
        None,
        description="The callback URL triggered for status updates of an envelope.",
    )
    AfterSendCallbackUrl: Optional[str] = Field(
        None, description="The callback URL triggered after sending the draft."
    )
    ActivityActionCallbackConfiguration: Optional[
        DraftGetConfigurationActivityActionCallbackConfiguration
    ] = Field(
        None, description="The configuration of the callback for workstep events."
    )


class DraftGetConfigurationSignatureDataConfiguration(BaseModel):
    DisposableCertificate: Optional[
        DraftGetConfigurationDisposableCertificateSignatureData
    ] = Field(
        None, description="The disposable certificate configuration for the action."
    )
    RemoteCertificate: Optional[DraftGetConfigurationRemoteCertificateSignatureData] = (
        Field(None, description="The remote certificate configuration for the action.")
    )
    SwissComOnDemand: Optional[DraftGetConfigurationSwissComOnDemandSignatureData] = (
        Field(
            None,
            description="The Swisscom On-Demand certificate configuration for the action.",
        )
    )
    SmsOneTimePassword: Optional[
        DraftGetConfigurationSmsOneTimePasswordSignatureData
    ] = Field(
        None,
        description="The one time password configuration for the action (SMS-OTP).",
    )
    ATrustCertificate: Optional[DraftGetConfigurationATrustCertificateSignatureData] = (
        Field(None, description="The A-Trust certificate configuration for the action.")
    )
    SwedishBankId: Optional[DraftGetConfigurationSwedishBankIdSignatureData] = Field(
        None, description="The Swedish BankID configuration for the action."
    )
    SignaturePluginData: Optional[
        List[DraftGetConfigurationSignaturePluginSignatureData]
    ] = Field(None, description="The signature plugin configurations for the action.")


class DraftGetConfigurationP7MSignatureMethods(BaseModel):
    LocalCertificate: Optional[bool] = Field(
        None, description="If true, a local certificate can be used."
    )
    DisposableCertificate: Optional[
        DraftGetConfigurationDisposableCertificateSignatureData
    ] = Field(
        None, description="The disposable certificate configuration for the action."
    )
    RemoteCertificate: Optional[DraftGetConfigurationRemoteCertificateSignatureData] = (
        Field(None, description="The remote certificate configuration for the action.")
    )
    SignaturePluginData: Optional[
        List[DraftGetConfigurationSignaturePluginSignatureData]
    ] = Field(None, description="The signature plugin configurations for the action.")


class DraftGetConfigurationAuthenticationConfiguration(BaseModel):
    AccessCode: Optional[DraftGetConfigurationAccessCodeAuthentication] = Field(
        None, description="The configuration of the authentication with an access code."
    )
    SmsOneTimePassword: Optional[
        DraftGetConfigurationSmsOneTimePasswordAuthentication
    ] = Field(
        None,
        description="The configuration of the authentication with one time password over SMS.",
    )
    SwedishBankId: Optional[DraftGetConfigurationSwedishBankIdAuthentication] = Field(
        None, description="The configuration of the authentication with Swedish BankID."
    )
    OAuthAuthentications: Optional[List[DraftGetConfigurationOAuthAuthentication]] = (
        Field(None, description="The configurations of the authentication with OAuth.")
    )
    SamlAuthentications: Optional[List[DraftGetConfigurationSamlAuthentication]] = (
        Field(None, description="The configurations of the authentication with SAML.")
    )


class DraftSendResponse(BaseModel):
    Envelope: Optional[EnvelopeSendResponse] = Field(
        None,
        description="The information about the sent envelope. Populated, when the draft did not contain a bulk action.",
    )
    EnvelopeBulk: Optional[EnvelopeBulkSendResponse] = Field(
        None,
        description="The information about the sent bulk envelope. Populated, when the draft contained a bulk action.",
    )


class DraftCreateLinkConfiguration(BaseModel):
    HyperLinks: Optional[List[DraftCreateHyperLink]] = Field(
        None, description="The list of hyperlink elements.", max_items=50
    )


class DraftCreateFieldValidation(BaseModel):
    Type: Optional[Type2] = Field(None, description="The type of the value.")
    DateValidationConfiguration: Optional[DraftCreateDateValidationConfiguration] = (
        Field(None, description="The validation rules for dates.")
    )
    NumberValidationConfiguration: Optional[
        DraftCreateNumberValidationConfiguration
    ] = Field(None, description="The validation rules for numbers.")
    PhoneValidationConfiguration: Optional[DraftCreatePhoneValidationConfiguration] = (
        Field(None, description="The validation rules for phone numbers.")
    )
    TimeValidationConfiguration: Optional[DraftCreateTimeValidationConfiguration] = (
        Field(None, description="The validation rules for time values.")
    )


class DraftCreateAllowedSignatureTypes(BaseModel):
    ClickToSign: Optional[DraftCreateClickToSignSignatureType] = Field(
        None, description='Allow signing with "click to sign".'
    )
    DrawToSign: Optional[DraftCreateDrawToSignSignatureType] = Field(
        None, description='Allow signing with "draw to sign".'
    )
    TypeToSign: Optional[DraftCreateTypeToSignSignatureType] = Field(
        None, description='Allow signing with "type to sign".'
    )
    LocalCertificate: Optional[DraftCreateLocalCertificateSignatureType] = Field(
        None, description="Allow signing with a local certificate."
    )
    DisposableCertificate: Optional[DraftCreateDisposableCertificateSignatureType] = (
        Field(None, description="Allow signing with a disposable certificate.")
    )
    SwissComOnDemand: Optional[DraftCreateSwissComOnDemandSignatureType] = Field(
        None, description="Allow signing with a Swisscom On-Demand certificate."
    )
    ATrustCertificate: Optional[DraftCreateATrustCertificateSignatureType] = Field(
        None, description="Allow signing with an A-Trust certificate."
    )
    Biometric: Optional[DraftCreateBiometricSignatureType] = Field(
        None, description="Allow signing with a biometric signature."
    )
    RemoteCertificate: Optional[DraftCreateRemoteCertificateSignatureType] = Field(
        None, description="Allow signing with a remote certificate."
    )
    OneTimePassword: Optional[DraftCreateOneTimePasswordSignatureType] = Field(
        None, description="Allow signing with a one time password (SMS-OTP)."
    )
    SwedishBankId: Optional[DraftCreateSwedishBankIdSignatureType] = Field(
        None, description="Allow signing with Swedish BankID."
    )
    SignaturePlugins: Optional[List[DraftCreateSignaturePluginSignatureType]] = Field(
        None, description="Allow signing with signature plugins.", max_items=20
    )


class DraftCreateAttachment(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    Required: Optional[bool] = Field(
        None, description="If true, the element is required."
    )
    DisplayName: Optional[str] = Field(None, description="The displayed name.")
    DisplayIconType: Optional[DisplayIconType] = Field(
        None,
        description="The type of the displayed icon. If no icon is provided Paperclip will be used.",
    )
    GuidingOrder: Optional[int] = Field(None, description="The order of the element.")
    FieldDefinition: Optional[DraftCreateAttachmentDefinition] = Field(
        None,
        description="The definition of the attachment element.\r\nIt must be specified when the attachment element is added.\r\nIt must not be specified when the attachment element already exists.",
    )


class DraftCreatePredefinedText(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    Value: Optional[str] = Field(None, description="The value of the predefined text.")
    FieldDefinition: Optional[DraftCreatePredefinedElementDefinition] = Field(
        None,
        description="The definition of the predefined element.\r\nIt must be specified when the predefined element is added.\r\nIt must not be specified when the predefined element already exists.",
    )


class DraftCreateEmail(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    FieldDefinition: Optional[DraftCreatePredefinedElementDefinition] = Field(
        None,
        description="The definition of the predefined element.\r\nIt must be specified when the predefined element is added.\r\nIt must not be specified when the predefined element already exists.",
    )


class DraftCreateGivenName(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    FieldDefinition: Optional[DraftCreatePredefinedElementDefinition] = Field(
        None,
        description="The definition of the predefined element.\r\nIt must be specified when the predefined element is added.\r\nIt must not be specified when the predefined element already exists.",
    )


class DraftCreateSurname(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    FieldDefinition: Optional[DraftCreatePredefinedElementDefinition] = Field(
        None,
        description="The definition of the predefined element.\r\nIt must be specified when the predefined element is added.\r\nIt must not be specified when the predefined element already exists.",
    )


class DraftCreateFullName(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    FieldDefinition: Optional[DraftCreatePredefinedElementDefinition] = Field(
        None,
        description="The definition of the predefined element.\r\nIt must be specified when the predefined element is added.\r\nIt must not be specified when the predefined element already exists.",
    )


class DraftCreateDate(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    DateFormat: Optional[str] = Field(None, description="The format of the date.")
    FieldDefinition: Optional[DraftCreatePredefinedElementDefinition] = Field(
        None,
        description="The definition of the predefined element.\r\nIt must be specified when the predefined element is added.\r\nIt must not be specified when the predefined element already exists.",
    )


class DraftCreateSignatureDataConfiguration(BaseModel):
    DisposableCertificate: Optional[DraftCreateDisposableCertificateSignatureData] = (
        Field(
            None, description="The disposable certificate configuration for the action."
        )
    )
    RemoteCertificate: Optional[DraftCreateRemoteCertificateSignatureData] = Field(
        None, description="The remote certificate configuration for the action."
    )
    SwissComOnDemand: Optional[DraftCreateSwissComOnDemandSignatureData] = Field(
        None,
        description="The Swisscom On-Demand certificate configuration for the action.",
    )
    SmsOneTimePassword: Optional[DraftCreateSmsOneTimePasswordSignatureData] = Field(
        None,
        description="The one time password configuration for the action (SMS-OTP).",
    )
    ATrustCertificate: Optional[DraftCreateATrustCertificateSignatureData] = Field(
        None, description="The A-Trust certificate configuration for the action."
    )
    SwedishBankId: Optional[DraftCreateSwedishBankIdSignatureData] = Field(
        None, description="The Swedish BankID configuration for the action."
    )
    SignaturePluginData: Optional[List[DraftCreateSignaturePluginSignatureData]] = (
        Field(
            None,
            description="The signature plugin configurations for the action.",
            max_items=20,
        )
    )


class DraftCreateAuthenticationConfiguration(BaseModel):
    AccessCode: Optional[DraftCreateAccessCodeAuthentication] = Field(
        None, description="The configuration of the authentication with an access code."
    )
    SmsOneTimePassword: Optional[DraftCreateSmsOneTimePasswordAuthentication] = Field(
        None,
        description="The configuration of the authentication with one time password over SMS.",
    )
    SwedishBankId: Optional[DraftCreateSwedishBankIdAuthentication] = Field(
        None, description="The configuration of the authentication with Swedish BankID."
    )
    OAuthAuthentications: Optional[List[DraftCreateOAuthAuthentication]] = Field(
        None,
        description="The configurations of the authentication with OAuth.",
        max_items=20,
    )
    SamlAuthentications: Optional[List[DraftCreateSamlAuthentication]] = Field(
        None,
        description="The configurations of the authentication with SAML.",
        max_items=20,
    )


class DraftCreateAdvancedRecipientConfiguration(BaseModel):
    ContactInformation: Optional[DraftCreateContactInformation] = Field(
        None, description="The contact information of the recipient."
    )
    PersonalMessage: Optional[str] = Field(
        None, description="The personal message for the recipient."
    )
    AuthenticationConfiguration: Optional[DraftCreateAuthenticationConfiguration] = (
        Field(
            None,
            description="The configuration for the authentication of the recipient.",
        )
    )
    SendEmails: Optional[bool] = Field(
        None,
        description="Obsolete: If true, emails will be sent out for this recipient.\r\nUse NotificationChannel property instead, which also allows sending with other notification channels than Email.\r\nNotificationChannel.None is the equivalent of sending false.\r\nNotificationChannel.Email is the equivalent of sending true.\r\nIf the NotificationChannel property is used/sent this property will be ignored.",
    )
    NotificationChannel: Optional[NotificationChannel] = Field(
        None,
        description="Which channel is used for sending notifications to the recipient.\r\nDefault Email if not specified.",
    )
    AllowAccessAfterFinish: Optional[bool] = Field(
        None,
        description="If true, the recipient is allowed to access the action after it has been finished.\r\nIt is required that the organization has the AllowAccessFinishedWorkstep feature enabled.\r\nThe default value is taken from the OrganizationSettings.",
    )
    RequireViewContentBeforeFormFilling: Optional[bool] = Field(
        None,
        description="If true, the signer has to confirm the reading of all documents as first task.",
    )
    IncludedEmailAppLinks: Optional[DraftCreateEmailAppLinks] = Field(
        None, description="The configuration for mobile app links in email messages."
    )
    AllowDelegation: Optional[bool] = Field(
        None,
        description="If true, the recipient may delegate this activity to another person.",
    )


class DraftCreateSignatureField(BaseModel):
    ElementId: str = Field(..., description="The identifier of the signature.")
    Required: Optional[bool] = Field(
        None, description="If true, the element is required."
    )
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    DisplayName: Optional[str] = Field(None, description="The displayed name.")
    FieldDescription: Optional[str] = Field(
        None, description="The description of the signature."
    )
    UseExternalTimestampServer: Optional[bool] = Field(
        None,
        description="If true, a timestamp from an external server is embedded into the signature.",
    )
    GuidingOrder: Optional[int] = Field(None, description="The order of the element.")
    AllowedSignatureTypes: Optional[DraftCreateAllowedSignatureTypes] = Field(
        None, description="The allowed types for the signature."
    )
    FieldDefinition: Optional[DraftCreateSignatureFieldDefinition] = Field(
        None,
        description="The definition of the signature field.\r\nIt must be specified when the signature field is added.\r\nIt must not be specified when the signature field already exists.",
    )
    TaskConfiguration: Optional[DraftCreateSignatureTaskConfiguration] = Field(
        None, description="The configuration of the task."
    )


class DraftCreateTextBox(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    Required: Optional[bool] = Field(
        None, description="If true, the element is required."
    )
    Value: Optional[str] = Field(None, description="The value of the text box.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    GuidingOrder: Optional[int] = Field(None, description="The order of the element.")
    Validation: Optional[DraftCreateFieldValidation] = Field(
        None,
        description="The configuration of the validation rules for the text box value.",
    )
    FieldDefinition: Optional[DraftCreateTextBoxDefinition] = Field(
        None,
        description="The definition of the text box.\r\nIt must be specified when the check box is added.\r\nIt must not be specified when the check box already exists.",
    )


class DraftReorderActivitiesActivity(BaseModel):
    ActivityId: str = Field(..., description="The identifier of the activity.")
    Action: Optional[DraftReorderActivitiesAction] = Field(
        None, description="Define parallel groups if needed."
    )


class DraftActivityReplaceSignatureDataConfiguration(BaseModel):
    DisposableCertificate: Optional[
        DraftActivityReplaceDisposableCertificateSignatureData
    ] = Field(
        None, description="The disposable certificate configuration for the action."
    )
    RemoteCertificate: Optional[DraftActivityReplaceRemoteCertificateSignatureData] = (
        Field(None, description="The remote certificate configuration for the action.")
    )
    SwissComOnDemand: Optional[DraftActivityReplaceSwissComOnDemandSignatureData] = (
        Field(
            None,
            description="The Swisscom On-Demand certificate configuration for the action.",
        )
    )
    SmsOneTimePassword: Optional[
        DraftActivityReplaceSmsOneTimePasswordSignatureData
    ] = Field(
        None,
        description="The one time password configuration for the action (SMS-OTP).",
    )
    ATrustCertificate: Optional[DraftActivityReplaceATrustCertificateSignatureData] = (
        Field(None, description="The A-Trust certificate configuration for the action.")
    )
    SwedishBankId: Optional[DraftActivityReplaceSwedishBankIdSignatureData] = Field(
        None, description="The Swedish BankID configuration for the action."
    )
    SignaturePluginData: Optional[
        List[DraftActivityReplaceSignaturePluginSignatureData]
    ] = Field(
        None,
        description="The signature plugin configurations for the action.",
        max_items=20,
    )


class DraftActivityReplaceAuthenticationConfiguration(BaseModel):
    AccessCode: Optional[DraftActivityReplaceAccessCodeAuthentication] = Field(
        None, description="The configuration of the authentication with an access code."
    )
    SmsOneTimePassword: Optional[
        DraftActivityReplaceSmsOneTimePasswordAuthentication
    ] = Field(
        None,
        description="The configuration of the authentication with one time password over SMS.",
    )
    SwedishBankId: Optional[DraftActivityReplaceSwedishBankIdAuthentication] = Field(
        None, description="The configuration of the authentication with Swedish BankID."
    )
    OAuthAuthentications: Optional[List[DraftActivityReplaceOAuthAuthentication]] = (
        Field(
            None,
            description="The configurations of the authentication with OAuth.",
            max_items=20,
        )
    )
    SamlAuthentications: Optional[List[DraftActivityReplaceSamlAuthentication]] = Field(
        None,
        description="The configurations of the authentication with SAML.",
        max_items=20,
    )


class DraftActivityReplaceLinkConfiguration(BaseModel):
    HyperLinks: Optional[List[DraftActivityReplaceHyperLink]] = Field(
        None, description="The list of hyperlink elements.", max_items=50
    )


class DraftActivityReplaceFieldValidation(BaseModel):
    Type: Optional[Type4] = Field(None, description="The type of the value.")
    DateValidationConfiguration: Optional[
        DraftActivityReplaceDateValidationConfiguration
    ] = Field(None, description="The validation rules for dates.")
    NumberValidationConfiguration: Optional[
        DraftActivityReplaceNumberValidationConfiguration
    ] = Field(None, description="The validation rules for numbers.")
    PhoneValidationConfiguration: Optional[
        DraftActivityReplacePhoneValidationConfiguration
    ] = Field(None, description="The validation rules for phone numbers.")
    TimeValidationConfiguration: Optional[
        DraftActivityReplaceTimeValidationConfiguration
    ] = Field(None, description="The validation rules for time values.")


class DraftActivityReplacePredefinedText(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    Value: Optional[str] = Field(None, description="The value of the predefined text.")
    FieldDefinition: Optional[DraftActivityReplacePredefinedElementDefinition] = Field(
        None,
        description="The definition of the predefined element.\r\nIt must be specified when the predefined element is added.\r\nIt must not be specified when the predefined element already exists.",
    )


class DraftActivityReplaceEmail(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    FieldDefinition: Optional[DraftActivityReplacePredefinedElementDefinition] = Field(
        None,
        description="The definition of the predefined element.\r\nIt must be specified when the predefined element is added.\r\nIt must not be specified when the predefined element already exists.",
    )


class DraftActivityReplaceGivenName(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    FieldDefinition: Optional[DraftActivityReplacePredefinedElementDefinition] = Field(
        None,
        description="The definition of the predefined element.\r\nIt must be specified when the predefined element is added.\r\nIt must not be specified when the predefined element already exists.",
    )


class DraftActivityReplaceSurname(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    FieldDefinition: Optional[DraftActivityReplacePredefinedElementDefinition] = Field(
        None,
        description="The definition of the predefined element.\r\nIt must be specified when the predefined element is added.\r\nIt must not be specified when the predefined element already exists.",
    )


class DraftActivityReplaceFullName(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    FieldDefinition: Optional[DraftActivityReplacePredefinedElementDefinition] = Field(
        None,
        description="The definition of the predefined element.\r\nIt must be specified when the predefined element is added.\r\nIt must not be specified when the predefined element already exists.",
    )


class DraftActivityReplaceDate(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    DateFormat: Optional[str] = Field(None, description="The format of the date.")
    FieldDefinition: Optional[DraftActivityReplacePredefinedElementDefinition] = Field(
        None,
        description="The definition of the predefined element.\r\nIt must be specified when the predefined element is added.\r\nIt must not be specified when the predefined element already exists.",
    )


class DraftActivityReplaceTextBox(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    Required: Optional[bool] = Field(
        None, description="If true, the element is required."
    )
    Value: Optional[str] = Field(None, description="The value of the text box.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    GuidingOrder: Optional[int] = Field(None, description="The order of the element.")
    Validation: Optional[DraftActivityReplaceFieldValidation] = Field(
        None,
        description="The configuration of the validation rules for the text box value.",
    )
    FieldDefinition: Optional[DraftActivityReplaceTextBoxDefinition] = Field(
        None,
        description="The definition of the text box.\r\nIt must be specified when the check box is added.\r\nIt must not be specified when the check box already exists.",
    )


class DraftActivityReplaceRecipientConfiguration(BaseModel):
    ContactInformation: Optional[DraftActivityReplaceContactInformation] = Field(
        None, description="The contact information of the recipient."
    )
    PersonalMessage: Optional[str] = Field(
        None, description="The personal message for the recipient."
    )
    AuthenticationConfiguration: Optional[
        DraftActivityReplaceAuthenticationConfiguration
    ] = Field(
        None, description="The configuration for the authentication of the recipient."
    )
    SendEmails: Optional[bool] = Field(
        None,
        description="Obsolete: If true, emails will be sent out for this recipient.\r\nUse NotificationChannel property instead, which also allows sending with other notification channels than Email.\r\nNotificationChannel.None is the equivalent of sending false.\r\nNotificationChannel.Email is the equivalent of sending true.\r\nIf the NotificationChannel property is used/sent this property will be ignored.",
    )
    NotificationChannel: Optional[NotificationChannel] = Field(
        None,
        description="Which channel is used for sending notifications to the recipient.\r\nDefault Email if not specified.",
    )
    AllowAccessAfterFinish: Optional[bool] = Field(
        None,
        description="If true, the recipient is allowed to access the action after it has been finished.\r\nIt is required that the organization has the AllowAccessFinishedWorkstep feature enabled.\r\nThe default value is taken from the OrganizationSettings.",
    )


class DraftActivityReplaceAdvancedRecipientConfiguration(BaseModel):
    ContactInformation: Optional[DraftActivityReplaceContactInformation] = Field(
        None, description="The contact information of the recipient."
    )
    PersonalMessage: Optional[str] = Field(
        None, description="The personal message for the recipient."
    )
    AuthenticationConfiguration: Optional[
        DraftActivityReplaceAuthenticationConfiguration
    ] = Field(
        None, description="The configuration for the authentication of the recipient."
    )
    SendEmails: Optional[bool] = Field(
        None,
        description="Obsolete: If true, emails will be sent out for this recipient.\r\nUse NotificationChannel property instead, which also allows sending with other notification channels than Email.\r\nNotificationChannel.None is the equivalent of sending false.\r\nNotificationChannel.Email is the equivalent of sending true.\r\nIf the NotificationChannel property is used/sent this property will be ignored.",
    )
    NotificationChannel: Optional[NotificationChannel] = Field(
        None,
        description="Which channel is used for sending notifications to the recipient.\r\nDefault Email if not specified.",
    )
    AllowAccessAfterFinish: Optional[bool] = Field(
        None,
        description="If true, the recipient is allowed to access the action after it has been finished.\r\nIt is required that the organization has the AllowAccessFinishedWorkstep feature enabled.\r\nThe default value is taken from the OrganizationSettings.",
    )
    IncludedEmailAppLinks: Optional[DraftActivityReplaceEmailAppLinks] = Field(
        None, description="The configuration for mobile app links in email messages."
    )
    AllowDelegation: Optional[bool] = Field(
        None,
        description="If true, the recipient may delegate this activity to another person.",
    )
    RequireViewContentBeforeFormFilling: Optional[bool] = Field(
        None,
        description="If true, the signer has to confirm the reading of all documents as first task.",
    )


class EnvelopeGetAction(BaseModel):
    SendCopy: Optional[EnvelopeGetSendCopy] = Field(
        None, description="The definition of the copy action."
    )
    SignAutomatic: Optional[EnvelopeGetSignAutomatic] = Field(
        None, description="The definition of the automatic sign action."
    )
    Sign: Optional[EnvelopeGetSign] = Field(
        None, description="The definition of the sign action."
    )
    View: Optional[EnvelopeGetView] = Field(
        None, description="The definition of the view action."
    )
    SignAsP7M: Optional[EnvelopeGetSignAsP7M] = Field(
        None, description="The definition of the P7M sign action."
    )


class EnvelopeGetFilesResponse(BaseModel):
    Documents: Optional[List[EnvelopeGetFilesDocument]] = Field(
        None, description="The finished documents of the envelope."
    )
    AuditTrail: Optional[EnvelopeGetFilesAuditTrail] = Field(
        None, description="The references for the audit trail of the envelope."
    )
    LegalDocuments: Optional[List[EnvelopeGetFilesLegalDocument]] = Field(
        None, description="The legal documents of the envelope."
    )


class EnvelopeGetHistoryResponse(BaseModel):
    Events: Optional[List[EnvelopeGetHistoryEvent]] = Field(
        None, description="List of events that have or will occur"
    )
    EnvelopeHasBeenDeleted: Optional[bool] = Field(
        None,
        description="True if the envelope has been deleted, Events will be empty for deleted envelopes",
    )
    EnvelopeDeletionDate: Optional[datetime] = Field(
        None,
        description="The date when the envelope was deleted, if the envelope is not deleted yet its null\r\nA datetime in the format RFC 3339, section 5.6, 'date-Time' (e.g. 2017-07-21T17:32:28Z).",
    )


class EnvelopeGetElementsCheckBox(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    Required: Optional[bool] = Field(
        None, description="If true, the element is required."
    )
    IsChecked: Optional[bool] = Field(
        None, description="If true, the check box is checked."
    )
    GuidingOrder: Optional[int] = Field(None, description="The order of the element.")
    FieldDefinition: Optional[EnvelopeGetElementsCheckBoxDefinition] = Field(
        None, description="The definition of the check box."
    )


class EnvelopeGetElementsComboBox(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    Required: Optional[bool] = Field(
        None, description="If true, the element is required."
    )
    Value: Optional[str] = Field(
        None, description="The selected value of the combo box."
    )
    GuidingOrder: Optional[int] = Field(None, description="The order of the element.")
    FieldDefinition: Optional[EnvelopeGetElementsComboBoxDefinition] = Field(
        None, description="The definition of the combo box."
    )


class EnvelopeGetElementsRadioButtonGroup(BaseModel):
    GroupName: Optional[str] = Field(
        None, description="The name of the radio button group."
    )
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    Required: Optional[bool] = Field(
        None, description="If true, the element is required."
    )
    SelectedItem: Optional[str] = Field(
        None,
        description="The export value of the selected item of the radio button group.",
    )
    GuidingOrder: Optional[int] = Field(None, description="The order of the element.")
    FieldDefinition: Optional[EnvelopeGetElementsRadioButtonDefinition] = Field(
        None, description="The definition of the radio button group."
    )


class EnvelopeGetElementsListBox(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    Required: Optional[bool] = Field(
        None, description="If true, the element is required."
    )
    PreSelectedItems: Optional[List[str]] = Field(
        None,
        description="The export values of the items which should be initially selected.",
    )
    GuidingOrder: Optional[int] = Field(None, description="The order of the element.")
    FieldDefinition: Optional[EnvelopeGetElementsListBoxDefinition] = Field(
        None, description="The definition of the list box field."
    )


class EnvelopeGetElementsAttachment(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    Required: Optional[bool] = Field(
        None, description="If true, the element is required."
    )
    DisplayName: Optional[str] = Field(None, description="The displayed name.")
    DisplayIconType: Optional[DisplayIconType] = Field(
        None, description="The type of the displayed icon."
    )
    GuidingOrder: Optional[int] = Field(None, description="The order of the element.")
    FieldDefinition: Optional[EnvelopeGetElementsAttachmentDefinition] = Field(
        None, description="The definition of the attachment element."
    )


class EnvelopeGetElementsPredefinedFieldElements(BaseModel):
    TextFields: Optional[List[EnvelopeGetElementsPredefinedText]] = Field(
        None, description="The predefined text fields."
    )
    EmailFields: Optional[List[EnvelopeGetElementsEmail]] = Field(
        None, description="The recipient's email fields."
    )
    InitialsFields: Optional[List[EnvelopeGetElementsInitials]] = Field(
        None, description="The recipient's initials fields."
    )
    GivenNameFields: Optional[List[EnvelopeGetElementsGivenName]] = Field(
        None, description="The recipient's given name fields."
    )
    SurnameFields: Optional[List[EnvelopeGetElementsSurname]] = Field(
        None, description="The recipient's surname fields."
    )
    FullNameFields: Optional[List[EnvelopeGetElementsFullName]] = Field(
        None, description="The recipient's full name fields."
    )
    DateFields: Optional[List[EnvelopeGetElementsDate]] = Field(
        None, description="The current date fields."
    )


class EnvelopeGetElementsLinkConfiguration(BaseModel):
    HyperLinks: Optional[List[EnvelopeGetElementsHyperLink]] = Field(
        None, description="The list of hyperlink elements."
    )


class EnvelopeGetElementsReadAreaConfirmation(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    Required: Optional[bool] = Field(
        None, description="If true, the element is required."
    )
    DocumentNumber: Optional[int] = Field(
        None,
        description="The document reference number of the element (starting with 1).",
    )
    DisplayName: Optional[str] = Field(None, description="The displayed name.")
    GuidingOrder: Optional[int] = Field(None, description="The order of the element.")
    Definition: Optional[EnvelopeGetElementsReadingAreaDefinition] = Field(
        None, description="The definition of the area."
    )


class EnvelopeGetElementsFieldValidation(BaseModel):
    Type: Optional[Type6] = Field(None, description="The type of the value.")
    DateValidationConfiguration: Optional[
        EnvelopeGetElementsDateValidationConfiguration
    ] = Field(None, description="The validation rules for dates.")
    NumberValidationConfiguration: Optional[
        EnvelopeGetElementsNumberValidationConfiguration
    ] = Field(None, description="The validation rules for numbers.")
    PhoneValidationConfiguration: Optional[
        EnvelopeGetElementsPhoneValidationConfiguration
    ] = Field(None, description="The validation rules for phone numbers.")
    TimeValidationConfiguration: Optional[
        EnvelopeGetElementsTimeValidationConfiguration
    ] = Field(None, description="The validation rules for time values.")


class EnvelopeGetElementsAllowedSignatureTypes(BaseModel):
    ClickToSign: Optional[EnvelopeGetElementsClickToSignSignatureType] = Field(
        None, description='Allow signing with "click to sign".'
    )
    DrawToSign: Optional[EnvelopeGetElementsDrawToSignSignatureType] = Field(
        None, description='Allow signing with "draw to sign".'
    )
    TypeToSign: Optional[EnvelopeGetElementsTypeToSignSignatureType] = Field(
        None, description='Allow signing with "type to sign".'
    )
    LocalCertificate: Optional[EnvelopeGetElementsLocalCertificateSignatureType] = (
        Field(None, description="Allow signing with a local certificate.")
    )
    DisposableCertificate: Optional[
        EnvelopeGetElementsDisposableCertificateSignatureType
    ] = Field(None, description="Allow signing with a disposable certificate.")
    SwissComOnDemand: Optional[EnvelopeGetElementsSwissComOnDemandSignatureType] = (
        Field(None, description="Allow signing with a Swisscom On-Demand certificate.")
    )
    ATrustCertificate: Optional[EnvelopeGetElementsATrustCertificateSignatureType] = (
        Field(None, description="Allow signing with an A-Trust certificate.")
    )
    Biometric: Optional[EnvelopeGetElementsBiometricSignatureType] = Field(
        None, description="Allow signing with a biometric signature."
    )
    RemoteCertificate: Optional[EnvelopeGetElementsRemoteCertificateSignatureType] = (
        Field(None, description="Allow signing with a remote certificate.")
    )
    OneTimePassword: Optional[EnvelopeGetElementsOneTimePasswordSignatureType] = Field(
        None, description="Allow signing with a one time password (SMS-OTP)."
    )
    SwedishBankId: Optional[EnvelopeGetElementsSwedishBankIdSignatureType] = Field(
        None, description="Allow signing with Swedish BankID."
    )
    SignaturePlugins: Optional[
        List[EnvelopeGetElementsSignaturePluginSignatureType]
    ] = Field(None, description="Allow signing with signature plugins.")


class EnvelopeGetElementsSignAutomatic(BaseModel):
    VisibleSignatures: Optional[List[EnvelopeGetElementsVisibleSignature]] = Field(
        None,
        description="The visible signatures define the optional visual representations for automatic signatures.\r\nIf none are defined, the automatic signatures are applied to the documents without a visual element.",
    )


class EnvelopeGetConfigurationCallbackConfiguration(BaseModel):
    CallbackUrl: Optional[str] = Field(
        None,
        description="The callback URL triggered when the envelope has been finished.",
    )
    StatusUpdateCallbackUrl: Optional[str] = Field(
        None,
        description="The callback URL triggered for status updates of an envelope.",
    )
    ActivityActionCallbackConfiguration: Optional[
        EnvelopeGetConfigurationActivityActionCallbackConfiguration
    ] = Field(
        None, description="The configuration of the callback for workstep events."
    )


class EnvelopeGetConfigurationSignatureDataConfiguration(BaseModel):
    DisposableCertificate: Optional[
        EnvelopeGetConfigurationDisposableCertificateSignatureData
    ] = Field(
        None, description="The disposable certificate configuration for the action."
    )
    RemoteCertificate: Optional[
        EnvelopeGetConfigurationRemoteCertificateSignatureData
    ] = Field(None, description="The remote certificate configuration for the action.")
    SwissComOnDemand: Optional[
        EnvelopeGetConfigurationSwissComOnDemandSignatureData
    ] = Field(
        None,
        description="The Swisscom On-Demand certificate configuration for the action.",
    )
    SmsOneTimePassword: Optional[
        EnvelopeGetConfigurationSmsOneTimePasswordSignatureData
    ] = Field(
        None,
        description="The one time password configuration for the action (SMS-OTP).",
    )
    ATrustCertificate: Optional[
        EnvelopeGetConfigurationATrustCertificateSignatureData
    ] = Field(None, description="The A-Trust certificate configuration for the action.")
    SwedishBankId: Optional[EnvelopeGetConfigurationSwedishBankIdSignatureData] = Field(
        None, description="The Swedish BankID configuration for the action."
    )
    SignaturePluginData: Optional[
        List[EnvelopeGetConfigurationSignaturePluginSignatureData]
    ] = Field(None, description="The signature plugin configurations for the action.")


class EnvelopeGetConfigurationP7MSignatureMethods(BaseModel):
    LocalCertificate: Optional[bool] = Field(
        None, description="If true, a local certificate can be used."
    )
    DisposableCertificate: Optional[
        EnvelopeGetConfigurationDisposableCertificateSignatureData
    ] = Field(
        None, description="The disposable certificate configuration for the action."
    )
    RemoteCertificate: Optional[
        EnvelopeGetConfigurationRemoteCertificateSignatureData
    ] = Field(None, description="The remote certificate configuration for the action.")
    SignaturePluginData: Optional[
        List[EnvelopeGetConfigurationSignaturePluginSignatureData]
    ] = Field(None, description="The signature plugin configurations for the action.")


class EnvelopeGetConfigurationAuthenticationConfiguration(BaseModel):
    AccessCode: Optional[EnvelopeGetConfigurationAccessCodeAuthentication] = Field(
        None, description="The configuration of the authentication with an access code."
    )
    SmsOneTimePassword: Optional[
        EnvelopeGetConfigurationSmsOneTimePasswordAuthentication
    ] = Field(
        None,
        description="The configuration of the authentication with one time password over SMS.",
    )
    SwedishBankId: Optional[EnvelopeGetConfigurationSwedishBankIdAuthentication] = (
        Field(
            None,
            description="The configuration of the authentication with Swedish BankID.",
        )
    )
    OAuthAuthentications: Optional[
        List[EnvelopeGetConfigurationOAuthAuthentication]
    ] = Field(None, description="The configurations of the authentication with OAuth.")
    SamlAuthentications: Optional[List[EnvelopeGetConfigurationSamlAuthentication]] = (
        Field(None, description="The configurations of the authentication with SAML.")
    )


class EnvelopeSendFieldValidation(BaseModel):
    Type: Optional[Type8] = Field(None, description="The type of the value.")
    DateValidationConfiguration: Optional[EnvelopeSendDateValidationConfiguration] = (
        Field(None, description="The validation rules for dates.")
    )
    NumberValidationConfiguration: Optional[
        EnvelopeSendNumberValidationConfiguration
    ] = Field(None, description="The validation rules for numbers.")
    PhoneValidationConfiguration: Optional[EnvelopeSendPhoneValidationConfiguration] = (
        Field(None, description="The validation rules for phone numbers.")
    )
    TimeValidationConfiguration: Optional[EnvelopeSendTimeValidationConfiguration] = (
        Field(None, description="The validation rules for time values.")
    )


class EnvelopeSendSignatureDataConfiguration(BaseModel):
    DisposableCertificate: Optional[EnvelopeSendDisposableCertificateSignatureData] = (
        Field(
            None, description="The disposable certificate configuration for the action."
        )
    )
    RemoteCertificate: Optional[EnvelopeSendRemoteCertificateSignatureData] = Field(
        None, description="The remote certificate configuration for the action."
    )
    SwissComOnDemand: Optional[EnvelopeSendSwissComOnDemandSignatureData] = Field(
        None,
        description="The Swisscom On-Demand certificate configuration for the action.",
    )
    SmsOneTimePassword: Optional[EnvelopeSendSmsOneTimePasswordSignatureData] = Field(
        None,
        description="The one time password configuration for the action (SMS-OTP).",
    )
    ATrustCertificate: Optional[EnvelopeSendATrustCertificateSignatureData] = Field(
        None, description="The A-Trust certificate configuration for the action."
    )
    SwedishBankId: Optional[EnvelopeSendSwedishBankIdSignatureData] = Field(
        None, description="The Swedish BankID configuration for the action."
    )
    SignaturePluginData: Optional[List[EnvelopeSendSignaturePluginSignatureData]] = (
        Field(
            None,
            description="The signature plugin configurations for the action.",
            max_items=20,
        )
    )


class EnvelopeSendAuthenticationConfiguration(BaseModel):
    AccessCode: Optional[EnvelopeSendAccessCodeAuthentication] = Field(
        None, description="The configuration of the authentication with an access code."
    )
    SmsOneTimePassword: Optional[EnvelopeSendSmsOneTimePasswordAuthentication] = Field(
        None,
        description="The configuration of the authentication with one time password over SMS.",
    )
    SwedishBankId: Optional[EnvelopeSendSwedishBankIdAuthentication] = Field(
        None, description="The configuration of the authentication with Swedish BankID."
    )
    OAuthAuthentications: Optional[List[EnvelopeSendOAuthAuthentication]] = Field(
        None,
        description="The configurations of the authentication with OAuth.",
        max_items=20,
    )
    SamlAuthentications: Optional[List[EnvelopeSendSamlAuthentication]] = Field(
        None,
        description="The configurations of the authentication with SAML.",
        max_items=20,
    )


class EnvelopeSendLinkConfiguration(BaseModel):
    HyperLinks: Optional[List[EnvelopeSendHyperLink]] = Field(
        None, description="The list of hyperlink elements.", max_items=50
    )


class EnvelopeSendPredefinedText(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    Value: Optional[str] = Field(None, description="The value of the predefined text.")
    FieldDefinition: Optional[EnvelopeSendPredefinedElementDefinition] = Field(
        None,
        description="The definition of the predefined element.\r\nIt must be specified when the predefined element is added.\r\nIt must not be specified when the predefined element already exists.",
    )


class EnvelopeSendEmail(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    FieldDefinition: Optional[EnvelopeSendPredefinedElementDefinition] = Field(
        None,
        description="The definition of the predefined element.\r\nIt must be specified when the predefined element is added.\r\nIt must not be specified when the predefined element already exists.",
    )


class EnvelopeSendGivenName(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    FieldDefinition: Optional[EnvelopeSendPredefinedElementDefinition] = Field(
        None,
        description="The definition of the predefined element.\r\nIt must be specified when the predefined element is added.\r\nIt must not be specified when the predefined element already exists.",
    )


class EnvelopeSendSurname(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    FieldDefinition: Optional[EnvelopeSendPredefinedElementDefinition] = Field(
        None,
        description="The definition of the predefined element.\r\nIt must be specified when the predefined element is added.\r\nIt must not be specified when the predefined element already exists.",
    )


class EnvelopeSendFullName(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    FieldDefinition: Optional[EnvelopeSendPredefinedElementDefinition] = Field(
        None,
        description="The definition of the predefined element.\r\nIt must be specified when the predefined element is added.\r\nIt must not be specified when the predefined element already exists.",
    )


class EnvelopeSendDate(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    DateFormat: Optional[str] = Field(None, description="The format of the date.")
    FieldDefinition: Optional[EnvelopeSendPredefinedElementDefinition] = Field(
        None,
        description="The definition of the predefined element.\r\nIt must be specified when the predefined element is added.\r\nIt must not be specified when the predefined element already exists.",
    )


class EnvelopeSendRecipientConfiguration(BaseModel):
    ContactInformation: Optional[EnvelopeSendContactInformation] = Field(
        None, description="The contact information of the recipient."
    )
    PersonalMessage: Optional[str] = Field(
        None, description="The personal message for the recipient."
    )
    AuthenticationConfiguration: Optional[EnvelopeSendAuthenticationConfiguration] = (
        Field(
            None,
            description="The configuration for the authentication of the recipient.",
        )
    )
    SendEmails: Optional[bool] = Field(
        None,
        description="Obsolete: If true, emails will be sent out for this recipient.\r\nUse NotificationChannel property instead, which also allows sending with other notification channels than Email.\r\nNotificationChannel.None is the equivalent of sending false.\r\nNotificationChannel.Email is the equivalent of sending true.\r\nIf the NotificationChannel property is used/sent this property will be ignored.",
    )
    NotificationChannel: Optional[NotificationChannel] = Field(
        None,
        description="Which channel is used for sending notifications to the recipient.\r\nDefault Email if not specified.",
    )
    AllowAccessAfterFinish: Optional[bool] = Field(
        None,
        description="If true, the recipient is allowed to access the action after it has been finished.\r\nIt is required that the organization has the AllowAccessFinishedWorkstep feature enabled.\r\nThe default value is taken from the OrganizationSettings.",
    )


class EnvelopeSendAdvancedRecipientConfiguration(BaseModel):
    ContactInformation: EnvelopeSendContactInformation = Field(
        ..., description="The contact information of the recipient."
    )
    PersonalMessage: Optional[str] = Field(
        None, description="The personal message for the recipient."
    )
    AuthenticationConfiguration: Optional[EnvelopeSendAuthenticationConfiguration] = (
        Field(
            None,
            description="The configuration for the authentication of the recipient.",
        )
    )
    SendEmails: Optional[bool] = Field(
        None,
        description="Obsolete: If true, emails will be sent out for this recipient.\r\nUse NotificationChannel property instead, which also allows sending with other notification channels than Email.\r\nNotificationChannel.None is the equivalent of sending false.\r\nNotificationChannel.Email is the equivalent of sending true.\r\nIf the NotificationChannel property is used/sent this property will be ignored.",
    )
    NotificationChannel: Optional[NotificationChannel] = Field(
        None,
        description="Which channel is used for sending notifications to the recipient.\r\nDefault Email if not specified.",
    )
    AllowAccessAfterFinish: Optional[bool] = Field(
        None,
        description="If true, the recipient is allowed to access the action after it has been finished.\r\nIt is required that the organization has the AllowAccessFinishedWorkstep feature enabled.\r\nThe default value is taken from the OrganizationSettings.",
    )
    IncludedEmailAppLinks: Optional[EnvelopeSendEmailAppLinks] = Field(
        None, description="The configuration for mobile app links in email messages."
    )
    AllowDelegation: Optional[bool] = Field(
        None,
        description="If true, the recipient may delegate this activity to another person.",
    )
    RequireViewContentBeforeFormFilling: Optional[bool] = Field(
        None,
        description="If true, the signer has to confirm the reading of all documents as first task.",
    )


class EnvelopeSendTextBox(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    Required: Optional[bool] = Field(
        None, description="If true, the element is required."
    )
    Value: Optional[str] = Field(None, description="The value of the text box.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    GuidingOrder: Optional[int] = Field(None, description="The order of the element.")
    Validation: Optional[EnvelopeSendFieldValidation] = Field(
        None,
        description="The configuration of the validation rules for the text box value.",
    )
    FieldDefinition: Optional[EnvelopeSendTextBoxDefinition] = Field(
        None,
        description="The definition of the text box.\r\nIt must be specified when the check box is added.\r\nIt must not be specified when the check box already exists.",
    )


class EnvelopeActivityReplaceSignatureDataConfiguration(BaseModel):
    DisposableCertificate: Optional[
        EnvelopeActivityReplaceDisposableCertificateSignatureData
    ] = Field(
        None, description="The disposable certificate configuration for the action."
    )
    RemoteCertificate: Optional[
        EnvelopeActivityReplaceRemoteCertificateSignatureData
    ] = Field(None, description="The remote certificate configuration for the action.")
    SwissComOnDemand: Optional[EnvelopeActivityReplaceSwissComOnDemandSignatureData] = (
        Field(
            None,
            description="The Swisscom On-Demand certificate configuration for the action.",
        )
    )
    SmsOneTimePassword: Optional[
        EnvelopeActivityReplaceSmsOneTimePasswordSignatureData
    ] = Field(
        None,
        description="The one time password configuration for the action (SMS-OTP).",
    )
    ATrustCertificate: Optional[
        EnvelopeActivityReplaceATrustCertificateSignatureData
    ] = Field(None, description="The A-Trust certificate configuration for the action.")
    SwedishBankId: Optional[EnvelopeActivityReplaceSwedishBankIdSignatureData] = Field(
        None, description="The Swedish BankID configuration for the action."
    )
    SignaturePluginData: Optional[
        List[EnvelopeActivityReplaceSignaturePluginSignatureData]
    ] = Field(
        None,
        description="The signature plugin configurations for the action.",
        max_items=20,
    )


class EnvelopeActivityReplaceAuthenticationConfiguration(BaseModel):
    AccessCode: Optional[EnvelopeActivityReplaceAccessCodeAuthentication] = Field(
        None, description="The configuration of the authentication with an access code."
    )
    SmsOneTimePassword: Optional[
        EnvelopeActivityReplaceSmsOneTimePasswordAuthentication
    ] = Field(
        None,
        description="The configuration of the authentication with one time password over SMS.",
    )
    SwedishBankId: Optional[EnvelopeActivityReplaceSwedishBankIdAuthentication] = Field(
        None, description="The configuration of the authentication with Swedish BankID."
    )
    OAuthAuthentications: Optional[List[EnvelopeActivityReplaceOAuthAuthentication]] = (
        Field(
            None,
            description="The configurations of the authentication with OAuth.",
            max_items=20,
        )
    )
    SamlAuthentications: Optional[List[EnvelopeActivityReplaceSamlAuthentication]] = (
        Field(
            None,
            description="The configurations of the authentication with SAML.",
            max_items=20,
        )
    )


class EnvelopeActivityReplaceLinkConfiguration(BaseModel):
    HyperLinks: Optional[List[EnvelopeActivityReplaceHyperLink]] = Field(
        None, description="The list of hyperlink elements.", max_items=50
    )


class EnvelopeActivityReplaceFieldValidation(BaseModel):
    Type: Optional[Type10] = Field(None, description="The type of the value.")
    DateValidationConfiguration: Optional[
        EnvelopeActivityReplaceDateValidationConfiguration
    ] = Field(None, description="The validation rules for dates.")
    NumberValidationConfiguration: Optional[
        EnvelopeActivityReplaceNumberValidationConfiguration
    ] = Field(None, description="The validation rules for numbers.")
    PhoneValidationConfiguration: Optional[
        EnvelopeActivityReplacePhoneValidationConfiguration
    ] = Field(None, description="The validation rules for phone numbers.")
    TimeValidationConfiguration: Optional[
        EnvelopeActivityReplaceTimeValidationConfiguration
    ] = Field(None, description="The validation rules for time values.")


class EnvelopeActivityReplacePredefinedText(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    DocumentNumber: int = Field(
        ...,
        description="The reference number of the containing document. It starts with 1.",
    )
    Value: Optional[str] = Field(None, description="The value of the predefined text.")
    FieldDefinition: Optional[EnvelopeActivityReplacePredefinedElementDefinition] = (
        Field(
            None,
            description="The definition of the predefined element.\r\nIt must be specified when the predefined element is added.\r\nIt must not be specified when the predefined element already exists.",
        )
    )


class EnvelopeActivityReplaceEmail(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    DocumentNumber: int = Field(
        ...,
        description="The reference number of the containing document. It starts with 1.",
    )
    FieldDefinition: Optional[EnvelopeActivityReplacePredefinedElementDefinition] = (
        Field(
            None,
            description="The definition of the predefined element.\r\nIt must be specified when the predefined element is added.\r\nIt must not be specified when the predefined element already exists.",
        )
    )


class EnvelopeActivityReplaceGivenName(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    DocumentNumber: int = Field(
        ...,
        description="The reference number of the containing document. It starts with 1.",
    )
    FieldDefinition: Optional[EnvelopeActivityReplacePredefinedElementDefinition] = (
        Field(
            None,
            description="The definition of the predefined element.\r\nIt must be specified when the predefined element is added.\r\nIt must not be specified when the predefined element already exists.",
        )
    )


class EnvelopeActivityReplaceSurname(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    DocumentNumber: int = Field(
        ...,
        description="The reference number of the containing document. It starts with 1.",
    )
    FieldDefinition: Optional[EnvelopeActivityReplacePredefinedElementDefinition] = (
        Field(
            None,
            description="The definition of the predefined element.\r\nIt must be specified when the predefined element is added.\r\nIt must not be specified when the predefined element already exists.",
        )
    )


class EnvelopeActivityReplaceFullName(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    DocumentNumber: int = Field(
        ...,
        description="The reference number of the containing document. It starts with 1.",
    )
    FieldDefinition: Optional[EnvelopeActivityReplacePredefinedElementDefinition] = (
        Field(
            None,
            description="The definition of the predefined element.\r\nIt must be specified when the predefined element is added.\r\nIt must not be specified when the predefined element already exists.",
        )
    )


class EnvelopeActivityReplaceDate(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    DocumentNumber: int = Field(
        ...,
        description="The reference number of the containing document. It starts with 1.",
    )
    DateFormat: Optional[str] = Field(None, description="The format of the date.")
    FieldDefinition: Optional[EnvelopeActivityReplacePredefinedElementDefinition] = (
        Field(
            None,
            description="The definition of the predefined element.\r\nIt must be specified when the predefined element is added.\r\nIt must not be specified when the predefined element already exists.",
        )
    )


class EnvelopeActivityReplaceTextBox(BaseModel):
    ElementId: str = Field(..., description="The identifier of the element.")
    Required: Optional[bool] = Field(
        None, description="If true, the element is required."
    )
    Value: Optional[str] = Field(None, description="The value of the text box.")
    DocumentNumber: int = Field(
        ...,
        description="The reference number of the containing document. It starts with 1.",
    )
    GuidingOrder: Optional[int] = Field(None, description="The order of the element.")
    Validation: Optional[EnvelopeActivityReplaceFieldValidation] = Field(
        None,
        description="The configuration of the validation rules for the text box value.",
    )


class EnvelopeActivityReplaceRecipientConfiguration(BaseModel):
    ContactInformation: Optional[EnvelopeActivityReplaceContactInformation] = Field(
        None, description="The contact information of the recipient."
    )
    PersonalMessage: Optional[str] = Field(
        None, description="The personal message for the recipient."
    )
    AuthenticationConfiguration: Optional[
        EnvelopeActivityReplaceAuthenticationConfiguration
    ] = Field(
        None, description="The configuration for the authentication of the recipient."
    )
    SendEmails: Optional[bool] = Field(
        None,
        description="Obsolete: If true, emails will be sent out for this recipient.\r\nUse NotificationChannel property instead, which also allows sending with other notification channels than Email.\r\nNotificationChannel.None is the equivalent of sending false.\r\nNotificationChannel.Email is the equivalent of sending true.\r\nIf the NotificationChannel property is used/sent this property will be ignored.",
    )
    NotificationChannel: Optional[NotificationChannel] = Field(
        None,
        description="Which channel is used for sending notifications to the recipient.\r\nDefault Email if not specified.",
    )
    AllowAccessAfterFinish: Optional[bool] = Field(
        None,
        description="If true, the recipient is allowed to access the action after it has been finished.\r\nIt is required that the organization has the AllowAccessFinishedWorkstep feature enabled.\r\nThe default value is taken from the OrganizationSettings.",
    )


class EnvelopeActivityReplaceAdvancedRecipientConfiguration(BaseModel):
    ContactInformation: Optional[EnvelopeActivityReplaceContactInformation] = Field(
        None, description="The contact information of the recipient."
    )
    PersonalMessage: Optional[str] = Field(
        None, description="The personal message for the recipient."
    )
    AuthenticationConfiguration: Optional[
        EnvelopeActivityReplaceAuthenticationConfiguration
    ] = Field(
        None, description="The configuration for the authentication of the recipient."
    )
    SendEmails: Optional[bool] = Field(
        None,
        description="Obsolete: If true, emails will be sent out for this recipient.\r\nUse NotificationChannel property instead, which also allows sending with other notification channels than Email.\r\nNotificationChannel.None is the equivalent of sending false.\r\nNotificationChannel.Email is the equivalent of sending true.\r\nIf the NotificationChannel property is used/sent this property will be ignored.",
    )
    NotificationChannel: Optional[NotificationChannel] = Field(
        None,
        description="Which channel is used for sending notifications to the recipient.\r\nDefault Email if not specified.",
    )
    AllowAccessAfterFinish: Optional[bool] = Field(
        None,
        description="If true, the recipient is allowed to access the action after it has been finished.\r\nIt is required that the organization has the AllowAccessFinishedWorkstep feature enabled.\r\nThe default value is taken from the OrganizationSettings.",
    )
    IncludedEmailAppLinks: Optional[EnvelopeActivityReplaceEmailAppLinks] = Field(
        None, description="The configuration for mobile app links in email messages."
    )
    AllowDelegation: Optional[bool] = Field(
        None,
        description="If true, the recipient may delegate this activity to another person.",
    )
    RequireViewContentBeforeFormFilling: Optional[bool] = Field(
        None,
        description="If true, the signer has to confirm the reading of all documents as first task.",
    )


class EnvelopeBulkSendFieldValidation(BaseModel):
    Type: Optional[Type12] = Field(None, description="The type of the value.")
    DateValidationConfiguration: Optional[
        EnvelopeBulkSendDateValidationConfiguration
    ] = Field(None, description="The validation rules for dates.")
    NumberValidationConfiguration: Optional[
        EnvelopeBulkSendNumberValidationConfiguration
    ] = Field(None, description="The validation rules for numbers.")
    PhoneValidationConfiguration: Optional[
        EnvelopeBulkSendPhoneValidationConfiguration
    ] = Field(None, description="The validation rules for phone numbers.")
    TimeValidationConfiguration: Optional[
        EnvelopeBulkSendTimeValidationConfiguration
    ] = Field(None, description="The validation rules for time values.")


class EnvelopeBulkSendSignatureDataConfiguration(BaseModel):
    DisposableCertificate: Optional[
        EnvelopeBulkSendDisposableCertificateSignatureData
    ] = Field(
        None, description="The disposable certificate configuration for the action."
    )
    RemoteCertificate: Optional[EnvelopeBulkSendRemoteCertificateSignatureData] = Field(
        None, description="The remote certificate configuration for the action."
    )
    SwissComOnDemand: Optional[EnvelopeBulkSendSwissComOnDemandSignatureData] = Field(
        None,
        description="The Swisscom On-Demand certificate configuration for the action.",
    )
    SmsOneTimePassword: Optional[EnvelopeBulkSendSmsOneTimePasswordSignatureData] = (
        Field(
            None,
            description="The one time password configuration for the action (SMS-OTP).",
        )
    )
    ATrustCertificate: Optional[EnvelopeBulkSendATrustCertificateSignatureData] = Field(
        None, description="The A-Trust certificate configuration for the action."
    )
    SwedishBankId: Optional[EnvelopeBulkSendSwedishBankIdSignatureData] = Field(
        None, description="The Swedish BankID configuration for the action."
    )
    SignaturePluginData: Optional[
        List[EnvelopeBulkSendSignaturePluginSignatureData]
    ] = Field(
        None,
        description="The signature plugin configurations for the action.",
        max_items=20,
    )


class EnvelopeBulkSendAuthenticationConfiguration(BaseModel):
    AccessCode: Optional[EnvelopeBulkSendAccessCodeAuthentication] = Field(
        None, description="The configuration of the authentication with an access code."
    )
    SmsOneTimePassword: Optional[EnvelopeBulkSendSmsOneTimePasswordAuthentication] = (
        Field(
            None,
            description="The configuration of the authentication with one time password over SMS.",
        )
    )
    SwedishBankId: Optional[EnvelopeBulkSendSwedishBankIdAuthentication] = Field(
        None, description="The configuration of the authentication with Swedish BankID."
    )
    OAuthAuthentications: Optional[List[EnvelopeBulkSendOAuthAuthentication]] = Field(
        None,
        description="The configurations of the authentication with OAuth.",
        max_items=20,
    )
    SamlAuthentications: Optional[List[EnvelopeBulkSendSamlAuthentication]] = Field(
        None,
        description="The configurations of the authentication with SAML.",
        max_items=20,
    )


class EnvelopeBulkSendLinkConfiguration(BaseModel):
    HyperLinks: Optional[List[EnvelopeBulkSendHyperLink]] = Field(
        None, description="The list of hyperlink elements.", max_items=50
    )


class EnvelopeBulkSendPredefinedText(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    Value: Optional[str] = Field(None, description="The value of the predefined text.")
    FieldDefinition: Optional[EnvelopeBulkSendPredefinedElementDefinition] = Field(
        None,
        description="The definition of the predefined element.\r\nIt must be specified when the predefined element is added.\r\nIt must not be specified when the predefined element already exists.",
    )


class EnvelopeBulkSendEmail(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    FieldDefinition: Optional[EnvelopeBulkSendPredefinedElementDefinition] = Field(
        None,
        description="The definition of the predefined element.\r\nIt must be specified when the predefined element is added.\r\nIt must not be specified when the predefined element already exists.",
    )


class EnvelopeBulkSendGivenName(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    FieldDefinition: Optional[EnvelopeBulkSendPredefinedElementDefinition] = Field(
        None,
        description="The definition of the predefined element.\r\nIt must be specified when the predefined element is added.\r\nIt must not be specified when the predefined element already exists.",
    )


class EnvelopeBulkSendSurname(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    FieldDefinition: Optional[EnvelopeBulkSendPredefinedElementDefinition] = Field(
        None,
        description="The definition of the predefined element.\r\nIt must be specified when the predefined element is added.\r\nIt must not be specified when the predefined element already exists.",
    )


class EnvelopeBulkSendFullName(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    FieldDefinition: Optional[EnvelopeBulkSendPredefinedElementDefinition] = Field(
        None,
        description="The definition of the predefined element.\r\nIt must be specified when the predefined element is added.\r\nIt must not be specified when the predefined element already exists.",
    )


class EnvelopeBulkSendDate(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    DateFormat: Optional[str] = Field(None, description="The format of the date.")
    FieldDefinition: Optional[EnvelopeBulkSendPredefinedElementDefinition] = Field(
        None,
        description="The definition of the predefined element.\r\nIt must be specified when the predefined element is added.\r\nIt must not be specified when the predefined element already exists.",
    )


class EnvelopeBulkSendRecipientConfiguration(BaseModel):
    ContactInformation: Optional[EnvelopeBulkSendContactInformation] = Field(
        None, description="The contact information of the recipient."
    )
    PersonalMessage: Optional[str] = Field(
        None, description="The personal message for the recipient."
    )
    AuthenticationConfiguration: Optional[
        EnvelopeBulkSendAuthenticationConfiguration
    ] = Field(
        None, description="The configuration for the authentication of the recipient."
    )
    SendEmails: Optional[bool] = Field(
        None,
        description="Obsolete: If true, emails will be sent out for this recipient.\r\nUse NotificationChannel property instead, which also allows sending with other notification channels than Email.\r\nNotificationChannel.None is the equivalent of sending false.\r\nNotificationChannel.Email is the equivalent of sending true.\r\nIf the NotificationChannel property is used/sent this property will be ignored.",
    )
    NotificationChannel: Optional[NotificationChannel] = Field(
        None,
        description="Which channel is used for sending notifications to the recipient.\r\nDefault Email if not specified.",
    )
    AllowAccessAfterFinish: Optional[bool] = Field(
        None,
        description="If true, the recipient is allowed to access the action after it has been finished.\r\nIt is required that the organization has the AllowAccessFinishedWorkstep feature enabled.\r\nThe default value is taken from the OrganizationSettings.",
    )


class EnvelopeBulkSendAdvancedRecipientConfiguration(BaseModel):
    ContactInformation: Optional[EnvelopeBulkSendContactInformation] = Field(
        None, description="The contact information of the recipient."
    )
    PersonalMessage: Optional[str] = Field(
        None, description="The personal message for the recipient."
    )
    AuthenticationConfiguration: Optional[
        EnvelopeBulkSendAuthenticationConfiguration
    ] = Field(
        None, description="The configuration for the authentication of the recipient."
    )
    SendEmails: Optional[bool] = Field(
        None,
        description="Obsolete: If true, emails will be sent out for this recipient.\r\nUse NotificationChannel property instead, which also allows sending with other notification channels than Email.\r\nNotificationChannel.None is the equivalent of sending false.\r\nNotificationChannel.Email is the equivalent of sending true.\r\nIf the NotificationChannel property is used/sent this property will be ignored.",
    )
    NotificationChannel: Optional[NotificationChannel] = Field(
        None,
        description="Which channel is used for sending notifications to the recipient.\r\nDefault Email if not specified.",
    )
    AllowAccessAfterFinish: Optional[bool] = Field(
        None,
        description="If true, the recipient is allowed to access the action after it has been finished.\r\nIt is required that the organization has the AllowAccessFinishedWorkstep feature enabled.\r\nThe default value is taken from the OrganizationSettings.",
    )
    IncludedEmailAppLinks: Optional[EnvelopeBulkSendEmailAppLinks] = Field(
        None, description="The configuration for mobile app links in email messages."
    )
    AllowDelegation: Optional[bool] = Field(
        None,
        description="If true, the recipient may delegate this activity to another person.",
    )
    RequireViewContentBeforeFormFilling: Optional[bool] = Field(
        None,
        description="If true, the signer has to confirm the reading of all documents as first task.",
    )


class EnvelopeBulkSendTextBox(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    Required: Optional[bool] = Field(
        None, description="If true, the element is required."
    )
    Value: Optional[str] = Field(None, description="The value of the text box.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    GuidingOrder: Optional[int] = Field(None, description="The order of the element.")
    Validation: Optional[EnvelopeBulkSendFieldValidation] = Field(
        None,
        description="The configuration of the validation rules for the text box value.",
    )
    FieldDefinition: Optional[EnvelopeBulkSendTextBoxDefinition] = Field(
        None,
        description="The definition of the text box.\r\nIt must be specified when the check box is added.\r\nIt must not be specified when the check box already exists.",
    )


class FilePrepareCheckBox(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    Required: Optional[bool] = Field(
        None, description="If true, the element is required."
    )
    IsChecked: Optional[bool] = Field(
        None, description="If true, the check box is checked."
    )
    GuidingOrder: Optional[int] = Field(None, description="The order of the element.")
    FieldDefinition: Optional[FilePrepareCheckBoxDefinition] = Field(
        None, description="The definition of the check box."
    )


class FilePrepareComboBox(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    Required: Optional[bool] = Field(
        None, description="If true, the element is required."
    )
    Value: Optional[str] = Field(
        None, description="The selected value of the combo box."
    )
    GuidingOrder: Optional[int] = Field(None, description="The order of the element.")
    FieldDefinition: Optional[FilePrepareComboBoxDefinition] = Field(
        None, description="The definition of the combo box."
    )


class FilePrepareRadioButtonGroup(BaseModel):
    GroupName: Optional[str] = Field(
        None, description="The name of the radio button group."
    )
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    Required: Optional[bool] = Field(
        None, description="If true, the element is required."
    )
    SelectedItem: Optional[str] = Field(
        None,
        description="The export value of the selected item of the radio button group.",
    )
    GuidingOrder: Optional[int] = Field(None, description="The order of the element.")
    FieldDefinition: Optional[FilePrepareRadioButtonDefinition] = Field(
        None, description="The definition of the radio button group."
    )


class FilePrepareListBox(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    Required: Optional[bool] = Field(
        None, description="If true, the element is required."
    )
    PreSelectedItems: Optional[List[str]] = Field(
        None,
        description="The export values of the items which should be initially selected.",
    )
    GuidingOrder: Optional[int] = Field(None, description="The order of the element.")
    FieldDefinition: Optional[FilePrepareListBoxDefinition] = Field(
        None, description="The definition of the list box field."
    )


class FilePrepareAttachment(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    Required: Optional[bool] = Field(
        None, description="If true, the element is required."
    )
    DisplayName: Optional[str] = Field(None, description="The displayed name.")
    DisplayIconType: Optional[DisplayIconType] = Field(
        None, description="The type of the displayed icon."
    )
    GuidingOrder: Optional[int] = Field(None, description="The order of the element.")
    FieldDefinition: Optional[FilePrepareAttachmentDefinition] = Field(
        None, description="The definition of the attachment element."
    )


class FilePrepareLinkConfiguration(BaseModel):
    HyperLinks: Optional[List[FilePrepareHyperLink]] = Field(
        None, description="The list of hyperlink elements."
    )


class FilePrepareFieldValidation(BaseModel):
    Type: Optional[Type14] = Field(None, description="The type of the value.")
    DateValidationConfiguration: Optional[FilePrepareDateValidationConfiguration] = (
        Field(None, description="The validation rules for dates.")
    )
    NumberValidationConfiguration: Optional[
        FilePrepareNumberValidationConfiguration
    ] = Field(None, description="The validation rules for numbers.")
    PhoneValidationConfiguration: Optional[FilePreparePhoneValidationConfiguration] = (
        Field(None, description="The validation rules for phone numbers.")
    )
    TimeValidationConfiguration: Optional[FilePrepareTimeValidationConfiguration] = (
        Field(None, description="The validation rules for time values.")
    )


class FilePrepareAllowedSignatureTypes(BaseModel):
    ClickToSign: Optional[FilePrepareClickToSignSignatureType] = Field(
        None, description='Allow signing with "click to sign".'
    )
    DrawToSign: Optional[FilePrepareDrawToSignSignatureType] = Field(
        None, description='Allow signing with "draw to sign".'
    )
    TypeToSign: Optional[FilePrepareTypeToSignSignatureType] = Field(
        None, description='Allow signing with "type to sign".'
    )
    LocalCertificate: Optional[FilePrepareLocalCertificateSignatureType] = Field(
        None, description="Allow signing with a local certificate."
    )
    DisposableCertificate: Optional[FilePrepareDisposableCertificateSignatureType] = (
        Field(None, description="Allow signing with a disposable certificate.")
    )
    SwissComOnDemand: Optional[FilePrepareSwissComOnDemandSignatureType] = Field(
        None, description="Allow signing with a Swisscom On-Demand certificate."
    )
    ATrustCertificate: Optional[FilePrepareATrustCertificateSignatureType] = Field(
        None, description="Allow signing with an A-Trust certificate."
    )
    Biometric: Optional[FilePrepareBiometricSignatureType] = Field(
        None, description="Allow signing with a biometric signature."
    )
    RemoteCertificate: Optional[FilePrepareRemoteCertificateSignatureType] = Field(
        None, description="Allow signing with a remote certificate."
    )
    OneTimePassword: Optional[FilePrepareOneTimePasswordSignatureType] = Field(
        None, description="Allow signing with a one time password (SMS-OTP)."
    )
    SwedishBankId: Optional[FilePrepareSwedishBankIdSignatureType] = Field(
        None, description="Allow signing with Swedish BankID."
    )
    SignaturePlugins: Optional[List[FilePrepareSignaturePluginSignatureType]] = Field(
        None, description="Allow signing with signature plugins."
    )


class FilePrepareSignAutomatic(BaseModel):
    VisibleSignatures: Optional[List[FilePrepareVisibleSignature]] = Field(
        None,
        description="The visible signatures define the optional visual representations for automatic signatures.\r\nIf none are defined, the automatic signatures are applied to the documents without a visual element.",
    )


class TeamGetAllResponse(BaseModel):
    Teams: Optional[List[TeamGetAllTeam]] = Field(
        None, description="The teams of the organization."
    )


class TeamReplaceRequest(BaseModel):
    Teams: List[TeamReplaceTeam] = Field(
        ...,
        description="The teams which will replace all the existing teams.",
        max_items=1000,
    )


class TemplateGetAction(BaseModel):
    SendCopy: Optional[TemplateGetSendCopy] = Field(
        None, description="The definition of the copy action."
    )
    SignBulk: Optional[TemplateGetSignBulk] = Field(
        None, description="The definition of the bulk."
    )
    SignAutomatic: Optional[TemplateGetSignAutomatic] = Field(
        None, description="The definition of the automatic sign action."
    )
    Sign: Optional[TemplateGetSign] = Field(
        None, description="The definition of the sign action."
    )
    View: Optional[TemplateGetView] = Field(
        None, description="The definition of the view action."
    )
    SignAsP7M: Optional[TemplateGetSignAsP7M] = Field(
        None, description="The definition of the P7M sign action."
    )
    SignPlaceholder: Optional[TemplateGetSignPlaceholder] = Field(
        None, description="The definition of the signer placeholder."
    )


class TemplateGetFilesResponse(BaseModel):
    Documents: Optional[List[TemplateGetFilesDocument]] = Field(
        None, description="The documents."
    )


class TemplateGetElementsCheckBox(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    Required: Optional[bool] = Field(
        None, description="If true, the element is required."
    )
    IsChecked: Optional[bool] = Field(
        None, description="If true, the check box is checked."
    )
    GuidingOrder: Optional[int] = Field(None, description="The order of the element.")
    FieldDefinition: Optional[TemplateGetElementsCheckBoxDefinition] = Field(
        None, description="The definition of the check box."
    )


class TemplateGetElementsComboBox(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    Required: Optional[bool] = Field(
        None, description="If true, the element is required."
    )
    Value: Optional[str] = Field(
        None, description="The selected value of the combo box."
    )
    GuidingOrder: Optional[int] = Field(None, description="The order of the element.")
    FieldDefinition: Optional[TemplateGetElementsComboBoxDefinition] = Field(
        None, description="The definition of the combo box."
    )


class TemplateGetElementsRadioButtonGroup(BaseModel):
    GroupName: Optional[str] = Field(
        None, description="The name of the radio button group."
    )
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    Required: Optional[bool] = Field(
        None, description="If true, the element is required."
    )
    SelectedItem: Optional[str] = Field(
        None,
        description="The export value of the selected item of the radio button group.",
    )
    GuidingOrder: Optional[int] = Field(None, description="The order of the element.")
    FieldDefinition: Optional[TemplateGetElementsRadioButtonDefinition] = Field(
        None, description="The definition of the radio button group."
    )


class TemplateGetElementsListBox(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    Required: Optional[bool] = Field(
        None, description="If true, the element is required."
    )
    PreSelectedItems: Optional[List[str]] = Field(
        None,
        description="The export values of the items which should be initially selected.",
    )
    GuidingOrder: Optional[int] = Field(None, description="The order of the element.")
    FieldDefinition: Optional[TemplateGetElementsListBoxDefinition] = Field(
        None, description="The definition of the list box field."
    )


class TemplateGetElementsAttachment(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    Required: Optional[bool] = Field(
        None, description="If true, the element is required."
    )
    DisplayName: Optional[str] = Field(None, description="The displayed name.")
    DisplayIconType: Optional[DisplayIconType] = Field(
        None, description="The type of the displayed icon."
    )
    GuidingOrder: Optional[int] = Field(None, description="The order of the element.")
    FieldDefinition: Optional[TemplateGetElementsAttachmentDefinition] = Field(
        None, description="The definition of the attachment element."
    )


class TemplateGetElementsPredefinedFieldElements(BaseModel):
    TextFields: Optional[List[TemplateGetElementsPredefinedText]] = Field(
        None, description="The predefined text fields."
    )
    EmailFields: Optional[List[TemplateGetElementsEmail]] = Field(
        None, description="The recipient's email fields."
    )
    InitialsFields: Optional[List[TemplateGetElementsInitials]] = Field(
        None, description="The recipient's initials fields."
    )
    GivenNameFields: Optional[List[TemplateGetElementsGivenName]] = Field(
        None, description="The recipient's given name fields."
    )
    SurnameFields: Optional[List[TemplateGetElementsSurname]] = Field(
        None, description="The recipient's surname fields."
    )
    FullNameFields: Optional[List[TemplateGetElementsFullName]] = Field(
        None, description="The recipient's full name fields."
    )
    DateFields: Optional[List[TemplateGetElementsDate]] = Field(
        None, description="The current date fields."
    )


class TemplateGetElementsLinkConfiguration(BaseModel):
    HyperLinks: Optional[List[TemplateGetElementsHyperLink]] = Field(
        None, description="The list of hyperlink elements."
    )


class TemplateGetElementsReadAreaConfirmation(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    Required: Optional[bool] = Field(
        None, description="If true, the element is required."
    )
    DocumentNumber: Optional[int] = Field(
        None,
        description="The document reference number of the element (starting with 1).",
    )
    DisplayName: Optional[str] = Field(None, description="The displayed name.")
    GuidingOrder: Optional[int] = Field(None, description="The order of the element.")
    Definition: Optional[TemplateGetElementsReadingAreaDefinition] = Field(
        None, description="The definition of the area."
    )


class TemplateGetElementsFieldValidation(BaseModel):
    Type: Optional[Type16] = Field(None, description="The type of the value.")
    DateValidationConfiguration: Optional[
        TemplateGetElementsDateValidationConfiguration
    ] = Field(None, description="The validation rules for dates.")
    NumberValidationConfiguration: Optional[
        TemplateGetElementsNumberValidationConfiguration
    ] = Field(None, description="The validation rules for numbers.")
    PhoneValidationConfiguration: Optional[
        TemplateGetElementsPhoneValidationConfiguration
    ] = Field(None, description="The validation rules for phone numbers.")
    TimeValidationConfiguration: Optional[
        TemplateGetElementsTimeValidationConfiguration
    ] = Field(None, description="The validation rules for time values.")


class TemplateGetElementsAllowedSignatureTypes(BaseModel):
    ClickToSign: Optional[TemplateGetElementsClickToSignSignatureType] = Field(
        None, description='Allow signing with "click to sign".'
    )
    DrawToSign: Optional[TemplateGetElementsDrawToSignSignatureType] = Field(
        None, description='Allow signing with "draw to sign".'
    )
    TypeToSign: Optional[TemplateGetElementsTypeToSignSignatureType] = Field(
        None, description='Allow signing with "type to sign".'
    )
    LocalCertificate: Optional[TemplateGetElementsLocalCertificateSignatureType] = (
        Field(None, description="Allow signing with a local certificate.")
    )
    DisposableCertificate: Optional[
        TemplateGetElementsDisposableCertificateSignatureType
    ] = Field(None, description="Allow signing with a disposable certificate.")
    SwissComOnDemand: Optional[TemplateGetElementsSwissComOnDemandSignatureType] = (
        Field(None, description="Allow signing with a Swisscom On-Demand certificate.")
    )
    ATrustCertificate: Optional[TemplateGetElementsATrustCertificateSignatureType] = (
        Field(None, description="Allow signing with an A-Trust certificate.")
    )
    Biometric: Optional[TemplateGetElementsBiometricSignatureType] = Field(
        None, description="Allow signing with a biometric signature."
    )
    RemoteCertificate: Optional[TemplateGetElementsRemoteCertificateSignatureType] = (
        Field(None, description="Allow signing with a remote certificate.")
    )
    OneTimePassword: Optional[TemplateGetElementsOneTimePasswordSignatureType] = Field(
        None, description="Allow signing with a one time password (SMS-OTP)."
    )
    SwedishBankId: Optional[TemplateGetElementsSwedishBankIdSignatureType] = Field(
        None, description="Allow signing with Swedish BankID."
    )
    SignaturePlugins: Optional[
        List[TemplateGetElementsSignaturePluginSignatureType]
    ] = Field(None, description="Allow signing with signature plugins.")


class TemplateGetElementsSignAutomatic(BaseModel):
    VisibleSignatures: Optional[List[TemplateGetElementsVisibleSignature]] = Field(
        None,
        description="The visible signatures define the optional visual representations for automatic signatures.\r\nIf none are defined, the automatic signatures are applied to the documents without a visual element.",
    )


class TemplateGetConfigurationCallbackConfiguration(BaseModel):
    CallbackUrl: Optional[str] = Field(
        None,
        description="The callback URL triggered when the envelope has been finished.",
    )
    StatusUpdateCallbackUrl: Optional[str] = Field(
        None,
        description="The callback URL triggered for status updates of an envelope.",
    )
    AfterSendCallbackUrl: Optional[str] = Field(
        None, description="The callback URL triggered after sending the draft."
    )
    ActivityActionCallbackConfiguration: Optional[
        TemplateGetConfigurationActivityActionCallbackConfiguration
    ] = Field(
        None, description="The configuration of the callback for workstep events."
    )


class TemplateGetConfigurationSignatureDataConfiguration(BaseModel):
    DisposableCertificate: Optional[
        TemplateGetConfigurationDisposableCertificateSignatureData
    ] = Field(
        None, description="The disposable certificate configuration for the action."
    )
    RemoteCertificate: Optional[
        TemplateGetConfigurationRemoteCertificateSignatureData
    ] = Field(None, description="The remote certificate configuration for the action.")
    SwissComOnDemand: Optional[
        TemplateGetConfigurationSwissComOnDemandSignatureData
    ] = Field(
        None,
        description="The Swisscom On-Demand certificate configuration for the action.",
    )
    SmsOneTimePassword: Optional[
        TemplateGetConfigurationSmsOneTimePasswordSignatureData
    ] = Field(
        None,
        description="The one time password configuration for the action (SMS-OTP).",
    )
    ATrustCertificate: Optional[
        TemplateGetConfigurationATrustCertificateSignatureData
    ] = Field(None, description="The A-Trust certificate configuration for the action.")
    SwedishBankId: Optional[TemplateGetConfigurationSwedishBankIdSignatureData] = Field(
        None, description="The Swedish BankID configuration for the action."
    )
    SignaturePluginData: Optional[
        List[TemplateGetConfigurationSignaturePluginSignatureData]
    ] = Field(None, description="The signature plugin configurations for the action.")


class TemplateGetConfigurationP7MSignatureMethods(BaseModel):
    LocalCertificate: Optional[bool] = Field(
        None, description="If true, a local certificate can be used."
    )
    DisposableCertificate: Optional[
        TemplateGetConfigurationDisposableCertificateSignatureData
    ] = Field(
        None, description="The disposable certificate configuration for the action."
    )
    RemoteCertificate: Optional[
        TemplateGetConfigurationRemoteCertificateSignatureData
    ] = Field(None, description="The remote certificate configuration for the action.")
    SignaturePluginData: Optional[
        List[TemplateGetConfigurationSignaturePluginSignatureData]
    ] = Field(None, description="The signature plugin configurations for the action.")


class TemplateGetConfigurationAuthenticationConfiguration(BaseModel):
    AccessCode: Optional[TemplateGetConfigurationAccessCodeAuthentication] = Field(
        None, description="The configuration of the authentication with an access code."
    )
    SmsOneTimePassword: Optional[
        TemplateGetConfigurationSmsOneTimePasswordAuthentication
    ] = Field(
        None,
        description="The configuration of the authentication with one time password over SMS.",
    )
    SwedishBankId: Optional[TemplateGetConfigurationSwedishBankIdAuthentication] = (
        Field(
            None,
            description="The configuration of the authentication with Swedish BankID.",
        )
    )
    OAuthAuthentications: Optional[
        List[TemplateGetConfigurationOAuthAuthentication]
    ] = Field(None, description="The configurations of the authentication with OAuth.")
    SamlAuthentications: Optional[List[TemplateGetConfigurationSamlAuthentication]] = (
        Field(None, description="The configurations of the authentication with SAML.")
    )


class DraftGetActivity(BaseModel):
    Id: Optional[str] = Field(None, description="The identifier of the activity.")
    PlaceholderLabel: Optional[str] = Field(
        None, description="The label of a sign placeholder."
    )
    Action: Optional[DraftGetAction] = Field(
        None, description="The action assigned to the activity."
    )


class DraftGetElementsTextBox(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    Required: Optional[bool] = Field(
        None, description="If true, the element is required."
    )
    Value: Optional[str] = Field(None, description="The value of the text box.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    GuidingOrder: Optional[int] = Field(None, description="The order of the element.")
    Validation: Optional[DraftGetElementsFieldValidation] = Field(
        None,
        description="The configuration of the validation rules for the text box value.",
    )
    FieldDefinition: Optional[DraftGetElementsTextBoxDefinition] = Field(
        None, description="The definition of the text box."
    )


class DraftGetElementsSignatureField(BaseModel):
    ElementId: Optional[str] = Field(
        None, description="The identifier of the signature."
    )
    Required: Optional[bool] = Field(
        None, description="If true, the element is required."
    )
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    DisplayName: Optional[str] = Field(None, description="The displayed name.")
    FieldDescription: Optional[str] = Field(
        None, description="The description of the signature."
    )
    UseExternalTimestampServer: Optional[bool] = Field(
        None,
        description="If true, an timestamp from an external server is embedded into the signature.",
    )
    GuidingOrder: Optional[int] = Field(None, description="The order of the element.")
    AllowedSignatureTypes: Optional[DraftGetElementsAllowedSignatureTypes] = Field(
        None, description="The allowed types for the signature."
    )
    FieldDefinition: Optional[DraftGetElementsSignatureFieldDefinition] = Field(
        None, description="The definition of the signature field."
    )
    TaskConfiguration: Optional[DraftGetElementsSignatureTaskConfiguration] = Field(
        None, description="The configuration of the task."
    )


class DraftGetConfigurationAdvancedRecipientConfiguration(BaseModel):
    PersonalMessage: Optional[str] = Field(
        None, description="The personal message for the recipient."
    )
    NotificationChannel: Optional[NotificationChannel] = Field(
        None,
        description="Which channel is used for sending notifications to the recipient.",
    )
    AuthenticationConfiguration: Optional[
        DraftGetConfigurationAuthenticationConfiguration
    ] = Field(
        None, description="The configuration for the authentication of the recipient."
    )
    SendEmails: Optional[bool] = Field(
        None,
        description="Obsolete: If true, emails will be sent out for this recipient.\r\nIf NotificationChannel has value None, this will be false, otherwise true.",
    )
    AllowAccessAfterFinish: Optional[bool] = Field(
        None,
        description="If true, the recipient is allowed to access the action after it has been finished.",
    )
    RequireViewContentBeforeFormFilling: Optional[bool] = Field(
        None,
        description="If true, the signer has to confirm the reading of all documents as first task.",
    )
    IncludedEmailAppLinks: Optional[DraftGetConfigurationEmailAppLinks] = Field(
        None, description="The configuration for mobile app links in email messages."
    )
    AllowDelegation: Optional[bool] = Field(
        None, description="If true, the recipient may delegate this activity."
    )


class DraftGetConfigurationRecipientConfiguration(BaseModel):
    PersonalMessage: Optional[str] = Field(
        None, description="The personal message for the recipient."
    )
    NotificationChannel: Optional[NotificationChannel] = Field(
        None,
        description="Which channel is used for sending notifications to the recipient.",
    )
    AuthenticationConfiguration: Optional[
        DraftGetConfigurationAuthenticationConfiguration
    ] = Field(
        None, description="The configuration for the authentication of the recipient."
    )
    SendEmails: Optional[bool] = Field(
        None,
        description="Obsolete: If true, emails will be sent out for this recipient.\r\nIf NotificationChannel has value None, this will be false, otherwise true.",
    )
    AllowAccessAfterFinish: Optional[bool] = Field(
        None,
        description="If true, the recipient is allowed to access the action after it has been finished.",
    )


class DraftGetConfigurationBulkRecipient(BaseModel):
    RecipientConfiguration: Optional[
        DraftGetConfigurationAdvancedRecipientConfiguration
    ] = Field(None, description="The configuration of the recipient.")
    SignatureDataConfiguration: Optional[
        DraftGetConfigurationSignatureDataConfiguration
    ] = Field(
        None, description="The configuration of the signature data for the recipient."
    )


class DraftCreatePredefinedFieldElements(BaseModel):
    TextFields: Optional[List[DraftCreatePredefinedText]] = Field(
        None, description="The predefined text fields.", max_items=1000
    )
    EmailFields: Optional[List[DraftCreateEmail]] = Field(
        None, description="The recipient's email fields.", max_items=1000
    )
    InitialsFields: Optional[List[DraftCreateInitials]] = Field(
        None, description="The recipient's initials fields.", max_items=1000
    )
    GivenNameFields: Optional[List[DraftCreateGivenName]] = Field(
        None, description="The recipient's given name fields.", max_items=1000
    )
    SurnameFields: Optional[List[DraftCreateSurname]] = Field(
        None, description="The recipient's surname fields.", max_items=1000
    )
    FullNameFields: Optional[List[DraftCreateFullName]] = Field(
        None, description="The recipient's full name fields.", max_items=1000
    )
    DateFields: Optional[List[DraftCreateDate]] = Field(
        None, description="The current date fields.", max_items=1000
    )


class DraftCreateSignAsP7M(BaseModel):
    RecipientConfiguration: Optional[DraftCreateAdvancedRecipientConfiguration] = Field(
        None, description="The configuration of the recipient."
    )
    SignatureMethods: Optional[DraftCreateP7MSignatureMethods] = Field(
        None, description="The configuration of recipient data for P7M signatures."
    )
    SignAsP7MGroup: Optional[str] = Field(
        None, description="The group for defining parallel P7M actions."
    )
    GeneralPoliciesOverrides: Optional[DraftCreateGeneralPoliciesForP7MAction] = Field(
        None, description="Viewer policy settings for override."
    )


class DraftCreateBulkRecipient(BaseModel):
    RecipientConfiguration: DraftCreateAdvancedRecipientConfiguration = Field(
        ..., description="The configuration of the recipient."
    )
    SignatureDataConfiguration: Optional[DraftCreateSignatureDataConfiguration] = Field(
        None, description="The configuration of the signature data for the recipient."
    )


class DraftCreateRecipientConfiguration(BaseModel):
    ContactInformation: Optional[DraftCreateContactInformation] = Field(
        None, description="The contact information of the recipient."
    )
    PersonalMessage: Optional[str] = Field(
        None, description="The personal message for the recipient."
    )
    AuthenticationConfiguration: Optional[DraftCreateAuthenticationConfiguration] = (
        Field(
            None,
            description="The configuration for the authentication of the recipient.",
        )
    )
    SendEmails: Optional[bool] = Field(
        None,
        description="Obsolete: If true, emails will be sent out for this recipient.\r\nUse NotificationChannel property instead, which also allows sending with other notification channels than Email.\r\nNotificationChannel.None is the equivalent of sending false.\r\nNotificationChannel.Email is the equivalent of sending true.\r\nIf the NotificationChannel property is used/sent this property will be ignored.",
    )
    NotificationChannel: Optional[NotificationChannel] = Field(
        None,
        description="Which channel is used for sending notifications to the recipient.\r\nDefault Email if not specified.",
    )
    AllowAccessAfterFinish: Optional[bool] = Field(
        None,
        description="If true, the recipient is allowed to access the action after it has been finished.\r\nIt is required that the organization has the AllowAccessFinishedWorkstep feature enabled.\r\nThe default value is taken from the OrganizationSettings.",
    )


class DraftReorderActivitiesRequest(BaseModel):
    DraftId: str = Field(..., description="The identifier of the draft.")
    Activities: List[DraftReorderActivitiesActivity] = Field(
        ...,
        description="Define ALL activities in the expected order.",
        max_items=50,
        min_items=1,
    )


class DraftActivityReplaceView(BaseModel):
    RecipientConfiguration: Optional[DraftActivityReplaceRecipientConfiguration] = (
        Field(None, description="The configuration of the recipient.")
    )
    GeneralPoliciesOverrides: Optional[
        DraftActivityReplaceGeneralPoliciesForViewAction
    ] = Field(None, description="Viewer policy settings for override.")


class DraftActivityReplaceSignAsP7M(BaseModel):
    RecipientConfiguration: Optional[
        DraftActivityReplaceAdvancedRecipientConfiguration
    ] = Field(None, description="The configuration of the recipient.")
    SignatureMethods: Optional[DraftActivityReplaceP7MSignatureMethods] = Field(
        None, description="The configuration of recipient data for P7M signatures."
    )
    GeneralPoliciesOverrides: Optional[DraftActivityReplacePoliciesForP7MAction] = (
        Field(None, description="Viewer policy settings for override.")
    )


class DraftActivityReplaceBulkRecipient(BaseModel):
    RecipientConfiguration: DraftActivityReplaceAdvancedRecipientConfiguration = Field(
        ..., description="The configuration of the recipient."
    )
    SignatureDataConfiguration: Optional[
        DraftActivityReplaceSignatureDataConfiguration
    ] = Field(
        None, description="The configuration of the signature data for the recipient."
    )


class DraftActivityReplacePredefinedFieldElements(BaseModel):
    TextFields: Optional[List[DraftActivityReplacePredefinedText]] = Field(
        None, description="The predefined text fields.", max_items=1000
    )
    EmailFields: Optional[List[DraftActivityReplaceEmail]] = Field(
        None, description="The recipient's email fields.", max_items=1000
    )
    InitialsFields: Optional[List[DraftActivityReplaceInitials]] = Field(
        None, description="The recipient's initials fields.", max_items=1000
    )
    GivenNameFields: Optional[List[DraftActivityReplaceGivenName]] = Field(
        None, description="The recipient's given name fields.", max_items=1000
    )
    SurnameFields: Optional[List[DraftActivityReplaceSurname]] = Field(
        None, description="The recipient's surname fields.", max_items=1000
    )
    FullNameFields: Optional[List[DraftActivityReplaceFullName]] = Field(
        None, description="The recipient's full name fields.", max_items=1000
    )
    DateFields: Optional[List[DraftActivityReplaceDate]] = Field(
        None, description="The current date fields.", max_items=1000
    )


class EnvelopeGetActivity(BaseModel):
    Id: Optional[str] = Field(None, description="The identifier of the activity.")
    Status: Optional[Status] = Field(
        None, description="The status of an action within the envelope."
    )
    StatusReason: Optional[str] = Field(
        None,
        description="Additional information why this particular status was reached.",
    )
    FinishedDate: Optional[datetime] = Field(
        None,
        description="The date when the action was finished.\r\nA datetime in the format RFC 3339, section 5.6, 'date-Time' (e.g. 2017-07-21T17:32:28Z).",
    )
    OpenedDate: Optional[datetime] = Field(
        None,
        description="The date when the action was accessed.\r\nA datetime in the format RFC 3339, section 5.6, 'date-Time' (e.g. 2017-07-21T17:32:28Z).",
    )
    Action: Optional[EnvelopeGetAction] = Field(
        None, description="The action assigned to the activity."
    )


class EnvelopeGetElementsTextBox(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    Required: Optional[bool] = Field(
        None, description="If true, the element is required."
    )
    Value: Optional[str] = Field(None, description="The value of the text box.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    GuidingOrder: Optional[int] = Field(None, description="The order of the element.")
    Validation: Optional[EnvelopeGetElementsFieldValidation] = Field(
        None,
        description="The configuration of the validation rules for the text box value.",
    )
    FieldDefinition: Optional[EnvelopeGetElementsTextBoxDefinition] = Field(
        None, description="The definition of the text box."
    )


class EnvelopeGetElementsSignatureField(BaseModel):
    ElementId: Optional[str] = Field(
        None, description="The identifier of the signature."
    )
    Required: Optional[bool] = Field(
        None, description="If true, the element is required."
    )
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    DisplayName: Optional[str] = Field(None, description="The displayed name.")
    IsSigned: Optional[bool] = Field(
        None, description="If true, the signature has been signed."
    )
    FieldDescription: Optional[str] = Field(
        None, description="The description of the signature."
    )
    UseExternalTimestampServer: Optional[bool] = Field(
        None,
        description="If true, an timestamp from an external server is embedded into the signature.",
    )
    GuidingOrder: Optional[int] = Field(None, description="The order of the element.")
    AllowedSignatureTypes: Optional[EnvelopeGetElementsAllowedSignatureTypes] = Field(
        None, description="The allowed types for the signature."
    )
    FieldDefinition: Optional[EnvelopeGetElementsSignatureFieldDefinition] = Field(
        None, description="The definition of the signature field."
    )
    TaskConfiguration: Optional[EnvelopeGetElementsSignatureTaskConfiguration] = Field(
        None, description="The configuration of the task."
    )


class EnvelopeGetConfigurationAdvancedRecipientConfiguration(BaseModel):
    PersonalMessage: Optional[str] = Field(
        None, description="The personal message for the recipient."
    )
    NotificationChannel: Optional[NotificationChannel] = Field(
        None,
        description="Which channel is used for sending notifications to the recipient.",
    )
    AuthenticationConfiguration: Optional[
        EnvelopeGetConfigurationAuthenticationConfiguration
    ] = Field(
        None, description="The configuration for the authentication of the recipient."
    )
    SendEmails: Optional[bool] = Field(
        None,
        description="Obsolete: If true, emails will be sent out for this recipient.\r\nIf NotificationChannel has value None, this will be false, otherwise true.",
    )
    AllowAccessAfterFinish: Optional[bool] = Field(
        None,
        description="If true, the recipient is allowed to access the action after it has been finished.",
    )
    RequireViewContentBeforeFormFilling: Optional[bool] = Field(
        None,
        description="If true, the signer has to confirm the reading of all documents as first task.",
    )
    IncludedEmailAppLinks: Optional[EnvelopeGetConfigurationEmailAppLinks] = Field(
        None, description="The configuration for mobile app links in email messages."
    )
    AllowDelegation: Optional[bool] = Field(
        None, description="If true, the recipient may delegate this activity."
    )


class EnvelopeGetConfigurationRecipientConfiguration(BaseModel):
    PersonalMessage: Optional[str] = Field(
        None, description="The personal message for the recipient."
    )
    NotificationChannel: Optional[NotificationChannel] = Field(
        None,
        description="Which channel is used for sending notifications to the recipient.",
    )
    AuthenticationConfiguration: Optional[
        EnvelopeGetConfigurationAuthenticationConfiguration
    ] = Field(
        None, description="The configuration for the authentication of the recipient."
    )
    SendEmails: Optional[bool] = Field(
        None,
        description="Obsolete: If true, emails will be sent out for this recipient.\r\nIf NotificationChannel has value None, this will be false, otherwise true.",
    )
    AllowAccessAfterFinish: Optional[bool] = Field(
        None,
        description="If true, the recipient is allowed to access the action after it has been finished.",
    )


class EnvelopeSendUnassignedElements(BaseModel):
    TextBoxes: Optional[List[EnvelopeSendTextBox]] = Field(
        None, description="The text boxes.", max_items=1000
    )
    CheckBoxes: Optional[List[EnvelopeSendCheckBox]] = Field(
        None, description="The check boxes.", max_items=1000
    )
    ComboBoxes: Optional[List[EnvelopeSendComboBox]] = Field(
        None, description="The combo boxes.", max_items=1000
    )
    RadioButtons: Optional[List[EnvelopeSendRadioButtonGroup]] = Field(
        None, description="The radio buttons.", max_items=1000
    )
    ListBoxes: Optional[List[EnvelopeSendListBox]] = Field(
        None, description="The list boxes.", max_items=1000
    )


class EnvelopeSendView(BaseModel):
    RecipientConfiguration: EnvelopeSendRecipientConfiguration = Field(
        ..., description="The configuration of the recipient."
    )
    ViewingGroup: Optional[str] = Field(
        None, description="The group for defining parallel view actions."
    )
    GeneralPoliciesOverrides: Optional[EnvelopeSendGeneralPoliciesForViewAction] = (
        Field(None, description="Viewer policy settings for override.")
    )


class EnvelopeSendSignAsP7M(BaseModel):
    RecipientConfiguration: EnvelopeSendAdvancedRecipientConfiguration = Field(
        ..., description="The configuration of the recipient."
    )
    SignatureMethods: EnvelopeSendP7MSignatureMethods = Field(
        ..., description="The configuration of recipient data for P7M signatures."
    )
    SignAsP7MGroup: Optional[str] = Field(
        None, description="The group for defining parallel P7M actions."
    )
    GeneralPoliciesOverrides: Optional[EnvelopeSendGeneralPoliciesForP7MAction] = Field(
        None, description="Viewer policy settings for override."
    )


class EnvelopeSendPredefinedFieldElements(BaseModel):
    TextFields: Optional[List[EnvelopeSendPredefinedText]] = Field(
        None, description="The predefined text fields.", max_items=1000
    )
    EmailFields: Optional[List[EnvelopeSendEmail]] = Field(
        None, description="The recipient's email fields.", max_items=1000
    )
    InitialsFields: Optional[List[EnvelopeSendInitials]] = Field(
        None, description="The recipient's initials fields.", max_items=1000
    )
    GivenNameFields: Optional[List[EnvelopeSendGivenName]] = Field(
        None, description="The recipient's given name fields.", max_items=1000
    )
    SurnameFields: Optional[List[EnvelopeSendSurname]] = Field(
        None, description="The recipient's surname fields.", max_items=1000
    )
    FullNameFields: Optional[List[EnvelopeSendFullName]] = Field(
        None, description="The recipient's full name fields.", max_items=1000
    )
    DateFields: Optional[List[EnvelopeSendDate]] = Field(
        None, description="The current date fields.", max_items=1000
    )


class EnvelopeActivityReplaceView(BaseModel):
    RecipientConfiguration: Optional[EnvelopeActivityReplaceRecipientConfiguration] = (
        Field(None, description="The configuration of the recipient.")
    )
    GeneralPoliciesOverrides: Optional[
        EnvelopeActivityReplaceGeneralPoliciesForViewAction
    ] = Field(None, description="Viewer policy settings for override.")


class EnvelopeActivityReplaceSignAsP7M(BaseModel):
    RecipientConfiguration: Optional[
        EnvelopeActivityReplaceAdvancedRecipientConfiguration
    ] = Field(None, description="The configuration of the recipient.")
    SignatureMethods: Optional[EnvelopeActivityReplaceP7MSignatureMethods] = Field(
        None, description="The configuration of recipient data for P7M signatures."
    )
    GeneralPoliciesOverrides: Optional[
        EnvelopeActivityReplaceGeneralPoliciesForP7MAction
    ] = Field(None, description="Viewer policy settings for override.")


class EnvelopeActivityReplacePredefinedFieldElements(BaseModel):
    TextFields: Optional[List[EnvelopeActivityReplacePredefinedText]] = Field(
        None, description="The predefined text fields.", max_items=1000
    )
    EmailFields: Optional[List[EnvelopeActivityReplaceEmail]] = Field(
        None, description="The recipient's email fields.", max_items=1000
    )
    InitialsFields: Optional[List[EnvelopeActivityReplaceInitials]] = Field(
        None, description="The recipient's initials fields.", max_items=1000
    )
    GivenNameFields: Optional[List[EnvelopeActivityReplaceGivenName]] = Field(
        None, description="The recipient's given name fields.", max_items=1000
    )
    SurnameFields: Optional[List[EnvelopeActivityReplaceSurname]] = Field(
        None, description="The recipient's surname fields.", max_items=1000
    )
    FullNameFields: Optional[List[EnvelopeActivityReplaceFullName]] = Field(
        None, description="The recipient's full name fields.", max_items=1000
    )
    DateFields: Optional[List[EnvelopeActivityReplaceDate]] = Field(
        None, description="The current date fields.", max_items=1000
    )


class EnvelopeBulkSendUnassignedElements(BaseModel):
    TextBoxes: Optional[List[EnvelopeBulkSendTextBox]] = Field(
        None, description="The text boxes.", max_items=1000
    )
    CheckBoxes: Optional[List[EnvelopeBulkSendCheckBox]] = Field(
        None, description="The check boxes.", max_items=1000
    )
    ComboBoxes: Optional[List[EnvelopeBulkSendComboBox]] = Field(
        None, description="The combo boxes.", max_items=1000
    )
    RadioButtons: Optional[List[EnvelopeBulkSendRadioButtonGroup]] = Field(
        None, description="The radio buttons.", max_items=1000
    )
    ListBoxes: Optional[List[EnvelopeBulkSendListBox]] = Field(
        None, description="The list boxes.", max_items=1000
    )


class EnvelopeBulkSendView(BaseModel):
    RecipientConfiguration: EnvelopeBulkSendRecipientConfiguration = Field(
        ..., description="The configuration of the recipient."
    )
    GeneralPoliciesOverrides: Optional[EnvelopeBulkSendGeneralPoliciesForViewAction] = (
        Field(None, description="Viewer policy settings for override.")
    )


class EnvelopeBulkSendSignAsP7M(BaseModel):
    RecipientConfiguration: EnvelopeBulkSendAdvancedRecipientConfiguration = Field(
        ..., description="The configuration of the recipient."
    )
    SignatureMethods: EnvelopeBulkSendP7MSignatureMethods = Field(
        ..., description="The configuration of recipient data for P7M signatures."
    )
    GeneralPoliciesOverrides: Optional[EnvelopeBulkSendGeneralPoliciesForP7MAction] = (
        Field(None, description="Viewer policy settings for override.")
    )


class EnvelopeBulkSendRecipient(BaseModel):
    RecipientConfiguration: EnvelopeBulkSendAdvancedRecipientConfiguration = Field(
        ..., description="The configuration of the recipient."
    )
    SignatureDataConfiguration: Optional[EnvelopeBulkSendSignatureDataConfiguration] = (
        Field(
            None,
            description="The configuration of the signature data for the recipient.",
        )
    )


class EnvelopeBulkSendPredefinedFieldElements(BaseModel):
    TextFields: Optional[List[EnvelopeBulkSendPredefinedText]] = Field(
        None, description="The predefined text fields.", max_items=1000
    )
    EmailFields: Optional[List[EnvelopeBulkSendEmail]] = Field(
        None, description="The recipient's email fields.", max_items=1000
    )
    InitialsFields: Optional[List[EnvelopeBulkSendInitials]] = Field(
        None, description="The recipient's initials fields.", max_items=1000
    )
    GivenNameFields: Optional[List[EnvelopeBulkSendGivenName]] = Field(
        None, description="The recipient's given name fields.", max_items=1000
    )
    SurnameFields: Optional[List[EnvelopeBulkSendSurname]] = Field(
        None, description="The recipient's surname fields.", max_items=1000
    )
    FullNameFields: Optional[List[EnvelopeBulkSendFullName]] = Field(
        None, description="The recipient's full name fields.", max_items=1000
    )
    DateFields: Optional[List[EnvelopeBulkSendDate]] = Field(
        None, description="The current date fields.", max_items=1000
    )


class FilePrepareTextBox(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    Required: Optional[bool] = Field(
        None, description="If true, the element is required."
    )
    Value: Optional[str] = Field(None, description="The value of the text box.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    GuidingOrder: Optional[int] = Field(None, description="The order of the element.")
    Validation: Optional[FilePrepareFieldValidation] = Field(
        None,
        description="The configuration of the validation rules for the text box value.",
    )
    FieldDefinition: Optional[FilePrepareTextBoxDefinition] = Field(
        None, description="The definition of the text box."
    )


class FilePrepareSignatureField(BaseModel):
    ElementId: Optional[str] = Field(
        None, description="The identifier of the signature."
    )
    Required: Optional[bool] = Field(
        None, description="If true, the element is required."
    )
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    DisplayName: Optional[str] = Field(None, description="The displayed name.")
    FieldDescription: Optional[str] = Field(
        None, description="The description of the signature."
    )
    UseExternalTimestampServer: Optional[bool] = Field(
        None,
        description="If true, an timestamp from an external server is embedded into the signature.",
    )
    GuidingOrder: Optional[int] = Field(None, description="The order of the element.")
    AllowedSignatureTypes: Optional[FilePrepareAllowedSignatureTypes] = Field(
        None, description="The allowed types for the signature."
    )
    FieldDefinition: Optional[FilePrepareSignatureFieldDefinition] = Field(
        None, description="The definition of the signature field."
    )
    TaskConfiguration: Optional[FilePrepareSignatureTaskConfiguration] = Field(
        None, description="The configuration of the task."
    )


class TemplateGetActivity(BaseModel):
    Id: Optional[str] = Field(None, description="The identifier of the activity.")
    Action: Optional[TemplateGetAction] = Field(
        None, description="The action assigned to the activity."
    )


class TemplateGetElementsTextBox(BaseModel):
    ElementId: Optional[str] = Field(None, description="The identifier of the element.")
    Required: Optional[bool] = Field(
        None, description="If true, the element is required."
    )
    Value: Optional[str] = Field(None, description="The value of the text box.")
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    GuidingOrder: Optional[int] = Field(None, description="The order of the element.")
    Validation: Optional[TemplateGetElementsFieldValidation] = Field(
        None,
        description="The configuration of the validation rules for the text box value.",
    )
    FieldDefinition: Optional[TemplateGetElementsTextBoxDefinition] = Field(
        None, description="The definition of the text box."
    )


class TemplateGetElementsSignatureField(BaseModel):
    ElementId: Optional[str] = Field(
        None, description="The identifier of the signature."
    )
    Required: Optional[bool] = Field(
        None, description="If true, the element is required."
    )
    DocumentNumber: Optional[int] = Field(
        None,
        description="The reference number of the containing document. It starts with 1.",
    )
    DisplayName: Optional[str] = Field(None, description="The displayed name.")
    FieldDescription: Optional[str] = Field(
        None, description="The description of the signature."
    )
    UseExternalTimestampServer: Optional[bool] = Field(
        None,
        description="If true, an timestamp from an external server is embedded into the signature.",
    )
    GuidingOrder: Optional[int] = Field(None, description="The order of the element.")
    AllowedSignatureTypes: Optional[TemplateGetElementsAllowedSignatureTypes] = Field(
        None, description="The allowed types for the signature."
    )
    FieldDefinition: Optional[TemplateGetElementsSignatureFieldDefinition] = Field(
        None, description="The definition of the signature field."
    )
    TaskConfiguration: Optional[TemplateGetElementsSignatureTaskConfiguration] = Field(
        None, description="The configuration of the task."
    )


class TemplateGetConfigurationAdvancedRecipientConfiguration(BaseModel):
    PersonalMessage: Optional[str] = Field(
        None, description="The personal message for the recipient."
    )
    NotificationChannel: Optional[NotificationChannel] = Field(
        None,
        description="Which channel is used for sending notifications to the recipient.",
    )
    AuthenticationConfiguration: Optional[
        TemplateGetConfigurationAuthenticationConfiguration
    ] = Field(
        None, description="The configuration for the authentication of the recipient."
    )
    SendEmails: Optional[bool] = Field(
        None,
        description="Obsolete: If true, emails will be sent out for this recipient.\r\nIf NotificationChannel has value None, this will be false, otherwise true.",
    )
    AllowAccessAfterFinish: Optional[bool] = Field(
        None,
        description="If true, the recipient is allowed to access the action after it has been finished.",
    )
    IncludedEmailAppLinks: Optional[TemplateGetConfigurationEmailAppLinks] = Field(
        None, description="The configuration for mobile app links in email messages."
    )
    AllowDelegation: Optional[bool] = Field(
        None, description="If true, the recipient may delegate this activity."
    )
    RequireViewContentBeforeFormFilling: Optional[bool] = Field(
        None,
        description="If true, the signer has to confirm the reading of all documents as first task.",
    )


class TemplateGetConfigurationRecipientConfiguration(BaseModel):
    PersonalMessage: Optional[str] = Field(
        None, description="The personal message for the recipient."
    )
    NotificationChannel: Optional[NotificationChannel] = Field(
        None,
        description="Which channel is used for sending notifications to the recipient.",
    )
    AuthenticationConfiguration: Optional[
        TemplateGetConfigurationAuthenticationConfiguration
    ] = Field(
        None, description="The configuration for the authentication of the recipient."
    )
    SendEmails: Optional[bool] = Field(
        None,
        description="Obsolete: If true, emails will be sent out for this recipient.\r\nIf NotificationChannel has value None, this will be false, otherwise true.",
    )
    AllowAccessAfterFinish: Optional[bool] = Field(
        None,
        description="If true, the recipient is allowed to access the action after it has been finished.",
    )


class TemplateGetConfigurationBulkRecipient(BaseModel):
    RecipientConfiguration: Optional[
        TemplateGetConfigurationAdvancedRecipientConfiguration
    ] = Field(None, description="The configuration of the recipient.")
    SignatureDataConfiguration: Optional[
        TemplateGetConfigurationSignatureDataConfiguration
    ] = Field(
        None, description="The configuration of the signature data for the recipient."
    )


class DraftGetResponse(BaseModel):
    Id: Optional[str] = Field(None, description="The identifier of the draft.")
    Name: Optional[str] = Field(None, description="The name of the draft.")
    CreationDate: Optional[datetime] = Field(None, description="Date of creation.")
    Activities: Optional[List[DraftGetActivity]] = Field(
        None, description="The activities of the draft."
    )


class DraftGetElementsElements(BaseModel):
    TextBoxes: Optional[List[DraftGetElementsTextBox]] = Field(
        None, description="The text boxes."
    )
    CheckBoxes: Optional[List[DraftGetElementsCheckBox]] = Field(
        None, description="The check boxes."
    )
    ComboBoxes: Optional[List[DraftGetElementsComboBox]] = Field(
        None, description="The combo boxes."
    )
    RadioButtons: Optional[List[DraftGetElementsRadioButtonGroup]] = Field(
        None, description="The radio buttons."
    )
    ListBoxes: Optional[List[DraftGetElementsListBox]] = Field(
        None, description="The list boxes."
    )
    Signatures: Optional[List[DraftGetElementsSignatureField]] = Field(
        None, description="The signatures."
    )
    Attachments: Optional[List[DraftGetElementsAttachment]] = Field(
        None, description="The attachments."
    )
    PredefinedFieldElements: Optional[DraftGetElementsPredefinedFieldElements] = Field(
        None, description="The predefined field elements."
    )
    LinkConfiguration: Optional[DraftGetElementsLinkConfiguration] = Field(
        None, description="The links in the documents."
    )
    AreaReadConfirmations: Optional[List[DraftGetElementsReadAreaConfirmation]] = Field(
        None, description="The areas which have to be read."
    )
    PageReadConfirmations: Optional[List[DraftGetElementsReadPagesConfirmation]] = (
        Field(None, description="The pages which have to be read.")
    )
    DocumentReadConfirmations: Optional[
        List[DraftGetElementsReadDocumentConfirmation]
    ] = Field(None, description="The documents which have to be read.")


class DraftGetElementsSign(BaseModel):
    SequenceMode: Optional[SequenceMode] = Field(None, description="The sequence mode.")
    Elements: Optional[DraftGetElementsElements] = Field(
        None, description="The definition of the assigned elements."
    )


class DraftGetElementsSignBulk(BaseModel):
    SequenceMode: Optional[SequenceMode] = Field(None, description="The sequence mode.")
    Elements: Optional[DraftGetElementsElements] = Field(
        None, description="The definition of the assigned elements."
    )


class DraftGetConfigurationSign(BaseModel):
    RecipientConfiguration: Optional[
        DraftGetConfigurationAdvancedRecipientConfiguration
    ] = Field(None, description="The configuration of the recipient.")
    FinishActionConfiguration: Optional[DraftGetConfigurationFinishAction] = Field(
        None,
        description="Defines what happens in the signing clients, after an action has been finished.",
    )
    SignatureDataConfiguration: Optional[
        DraftGetConfigurationSignatureDataConfiguration
    ] = Field(
        None, description="The configuration of recipient data for special signatures."
    )
    BatchConfiguration: Optional[DraftGetConfigurationBatchConfiguration] = Field(
        None, description="The configuration of a signing batch."
    )
    SigningGroup: Optional[int] = Field(
        None, description="The parallel group for sign actions."
    )
    GeneralPoliciesOverrides: Optional[
        DraftGetConfigurationGeneralPoliciesForSignAction
    ] = Field(None, description="Viewer policy settings for override.")


class DraftGetConfigurationView(BaseModel):
    RecipientConfiguration: Optional[DraftGetConfigurationRecipientConfiguration] = (
        Field(None, description="The configuration of the recipient.")
    )
    ViewingGroup: Optional[int] = Field(
        None, description="The parallel group for view actions."
    )
    GeneralPoliciesOverrides: Optional[
        DraftGetConfigurationGeneralPoliciesForViewAction
    ] = Field(None, description="Viewer policy settings for override.")


class DraftGetConfigurationSignAsP7M(BaseModel):
    RecipientConfiguration: Optional[
        DraftGetConfigurationAdvancedRecipientConfiguration
    ] = Field(None, description="The configuration of the recipient.")
    SignatureMethods: Optional[DraftGetConfigurationP7MSignatureMethods] = Field(
        None, description="The configuration of recipient data for P7M signatures."
    )
    SignAsP7MGroup: Optional[int] = Field(
        None, description="The parallel group for P7M actions."
    )
    GeneralPoliciesOverrides: Optional[
        DraftGetConfigurationGeneralPoliciesForP7MAction
    ] = Field(None, description="Viewer policy settings for override.")


class DraftGetConfigurationSignBulk(BaseModel):
    RecipientConfigurations: Optional[List[DraftGetConfigurationBulkRecipient]] = Field(
        None,
        description="The configurations of the recipients that are part of the bulk.",
    )
    FinishActionConfiguration: Optional[DraftGetConfigurationFinishAction] = Field(
        None,
        description="Defined actions for different clients that will trigger after an action has been finished.",
    )
    BatchConfiguration: Optional[DraftGetConfigurationBatchConfiguration] = Field(
        None, description="The configuration of a signing batch."
    )
    GeneralPoliciesOverrides: Optional[
        DraftGetConfigurationGeneralPoliciesForSignAction
    ] = Field(None, description="Viewer policy settings for override.")


class DraftCreateElements(BaseModel):
    TextBoxes: Optional[List[DraftCreateTextBox]] = Field(
        None, description="The text boxes.", max_items=1000
    )
    CheckBoxes: Optional[List[DraftCreateCheckBox]] = Field(
        None, description="The check boxes.", max_items=1000
    )
    ComboBoxes: Optional[List[DraftCreateComboBox]] = Field(
        None, description="The combo boxes.", max_items=1000
    )
    RadioButtons: Optional[List[DraftCreateRadioButtonGroup]] = Field(
        None, description="The radio buttons.", max_items=1000
    )
    ListBoxes: Optional[List[DraftCreateListBox]] = Field(
        None, description="The list boxes.", max_items=1000
    )
    Signatures: Optional[List[DraftCreateSignatureField]] = Field(
        None, description="The signatures.", max_items=1000
    )
    Attachments: Optional[List[DraftCreateAttachment]] = Field(
        None, description="The attachments.", max_items=1000
    )
    PredefinedFieldElements: Optional[DraftCreatePredefinedFieldElements] = Field(
        None, description="The predefined field elements."
    )
    LinkConfiguration: Optional[DraftCreateLinkConfiguration] = Field(
        None, description="The links in the documents."
    )
    AreaReadConfirmations: Optional[List[DraftCreateReadAreaConfirmation]] = Field(
        None, description="The areas which have to be read.", max_items=1000
    )
    PageReadConfirmations: Optional[List[DraftCreateReadPagesConfirmation]] = Field(
        None, description="The pages which have to be read.", max_items=1000
    )
    DocumentReadConfirmations: Optional[List[DraftCreateReadDocumentConfirmation]] = (
        Field(None, description="The documents which have to be read.", max_items=1000)
    )


class DraftCreateView(BaseModel):
    RecipientConfiguration: Optional[DraftCreateRecipientConfiguration] = Field(
        None, description="The configuration of the recipient."
    )
    ViewingGroup: Optional[str] = Field(
        None, description="The group for defining parallel view actions."
    )
    GeneralPoliciesOverrides: Optional[DraftCreateGeneralPoliciesForViewAction] = Field(
        None, description="Viewer policy settings for override."
    )


class DraftCreateSignBulk(BaseModel):
    BulkRecipients: Optional[List[DraftCreateBulkRecipient]] = Field(
        None, description="The recipients that are part of the bulk.", max_items=1000
    )
    SequenceMode: Optional[SequenceMode] = Field(None, description="The sequence mode.")
    Elements: Optional[DraftCreateElements] = Field(
        None,
        description="The elements in the document (e.g. form fields) assigned to the recipient.",
    )
    FinishActionConfiguration: Optional[DraftCreateFinishAction] = Field(
        None,
        description="Defines what happens in the signing clients, after an action has been finished.",
    )
    BatchConfiguration: Optional[DraftCreateBatchConfiguration] = Field(
        None, description="The configuration of a signing batch."
    )
    GeneralPoliciesOverrides: Optional[DraftCreateGeneralPoliciesForSignAction] = Field(
        None, description="Viewer policy settings for override."
    )


class DraftCreateSign(BaseModel):
    RecipientConfiguration: Optional[DraftCreateAdvancedRecipientConfiguration] = Field(
        None, description="The configuration of the recipient."
    )
    SequenceMode: Optional[SequenceMode] = Field(None, description="The sequence mode.")
    Elements: Optional[DraftCreateElements] = Field(
        None,
        description="The elements in the document (e.g. form fields) assigned to the recipient.",
    )
    FinishActionConfiguration: Optional[DraftCreateFinishAction] = Field(
        None,
        description="Defines what happens in the signing clients, after an action has been finished.",
    )
    SignatureDataConfiguration: Optional[DraftCreateSignatureDataConfiguration] = Field(
        None, description="The configuration of recipient data for special signatures."
    )
    BatchConfiguration: Optional[DraftCreateBatchConfiguration] = Field(
        None, description="The configuration of a signing batch."
    )
    SigningGroup: Optional[str] = Field(
        None, description="The group for defining parallel sign actions."
    )
    GeneralPoliciesOverrides: Optional[DraftCreateGeneralPoliciesForSignAction] = Field(
        None, description="Viewer policy settings for override."
    )


class DraftActivityReplaceElements(BaseModel):
    TextBoxes: Optional[List[DraftActivityReplaceTextBox]] = Field(
        None, description="The text boxes.", max_items=1000
    )
    CheckBoxes: Optional[List[DraftActivityReplaceCheckBox]] = Field(
        None, description="The check boxes.", max_items=1000
    )
    ComboBoxes: Optional[List[DraftActivityReplaceComboBox]] = Field(
        None, description="The combo boxes.", max_items=1000
    )
    RadioButtons: Optional[List[DraftActivityReplaceRadioButtonGroup]] = Field(
        None, description="The radio buttons.", max_items=1000
    )
    ListBoxes: Optional[List[DraftActivityReplaceListBox]] = Field(
        None, description="The list boxes.", max_items=1000
    )
    Signatures: Optional[List[DraftActivityReplaceSignatureField]] = Field(
        None, description="The signatures.", max_items=1000
    )
    Attachments: Optional[List[DraftActivityReplaceAttachment]] = Field(
        None, description="The attachments.", max_items=1000
    )
    PredefinedFieldElements: Optional[DraftActivityReplacePredefinedFieldElements] = (
        Field(None, description="The predefined field elements.")
    )
    LinkConfiguration: Optional[DraftActivityReplaceLinkConfiguration] = Field(
        None, description="The links in the documents."
    )
    AreaReadConfirmations: Optional[List[DraftActivityReplaceReadAreaConfirmation]] = (
        Field(None, description="The areas which have to be read.", max_items=1000)
    )
    PageReadConfirmations: Optional[List[DraftActivityReplaceReadPagesConfirmation]] = (
        Field(None, description="The pages which have to be read.", max_items=1000)
    )
    DocumentReadConfirmations: Optional[
        List[DraftActivityReplaceReadDocumentConfirmation]
    ] = Field(None, description="The documents which have to be read.", max_items=1000)


class DraftActivityReplaceSignBulk(BaseModel):
    BulkRecipients: Optional[List[DraftActivityReplaceBulkRecipient]] = Field(
        None, description="The recipients that are part of the bulk.", max_items=1000
    )
    SequenceMode: Optional[SequenceMode] = Field(None, description="The sequence mode.")
    Elements: Optional[DraftActivityReplaceElements] = Field(
        None,
        description="The elements in the document (e.g. form fields) assigned to the recipient.",
    )
    FinishActionConfiguration: Optional[DraftActivityReplaceFinishAction] = Field(
        None,
        description="Defines what happens in the signing clients, after an action has been finished.",
    )
    BatchConfiguration: Optional[DraftActivityReplaceBatchConfiguration] = Field(
        None, description="The configuration of a signing batch."
    )
    GeneralPoliciesOverrides: Optional[
        DraftActivityReplaceGeneralPoliciesForSignAction
    ] = Field(None, description="Viewer policy settings for override.")


class DraftActivityReplaceSign(BaseModel):
    RecipientConfiguration: Optional[
        DraftActivityReplaceAdvancedRecipientConfiguration
    ] = Field(None, description="The configuration of the recipient.")
    SequenceMode: Optional[SequenceMode] = Field(None, description="The sequence mode.")
    Elements: Optional[DraftActivityReplaceElements] = Field(
        None,
        description="The elements in the document (e.g. form fields) assigned to the recipient.",
    )
    FinishActionConfiguration: Optional[DraftActivityReplaceFinishAction] = Field(
        None,
        description="Defines what happens in the signing clients, after an action has been finished.",
    )
    SignatureDataConfiguration: Optional[
        DraftActivityReplaceSignatureDataConfiguration
    ] = Field(
        None, description="The configuration of recipient data for special signatures."
    )
    BatchConfiguration: Optional[DraftActivityReplaceBatchConfiguration] = Field(
        None, description="The configuration of a signing batch."
    )
    GeneralPoliciesOverrides: Optional[
        DraftActivityReplaceGeneralPoliciesForSignAction
    ] = Field(None, description="Viewer policy settings for override.")


class EnvelopeGetResponse(BaseModel):
    Id: Optional[str] = Field(None, description="The identifier of the envelope.")
    EnvelopeStatus: Optional[EnvelopeStatus] = Field(
        None, description="The status of the envelope."
    )
    Name: Optional[str] = Field(None, description="The name of the envelope.")
    SentDate: Optional[datetime] = Field(
        None, description="Date when the envelope was sent."
    )
    EnvelopeBulkParentId: Optional[str] = Field(
        None, description="The identifier of the BulkParent."
    )
    Activities: Optional[List[EnvelopeGetActivity]] = Field(
        None, description="The steps for the envelope."
    )
    SenderUserInformation: Optional[EnvelopeGetSenderUserInformation] = Field(
        None, description="The information about the user who sent the envelope."
    )


class EnvelopeGetElementsElements(BaseModel):
    TextBoxes: Optional[List[EnvelopeGetElementsTextBox]] = Field(
        None, description="The text boxes."
    )
    CheckBoxes: Optional[List[EnvelopeGetElementsCheckBox]] = Field(
        None, description="The check boxes."
    )
    ComboBoxes: Optional[List[EnvelopeGetElementsComboBox]] = Field(
        None, description="The combo boxes."
    )
    RadioButtons: Optional[List[EnvelopeGetElementsRadioButtonGroup]] = Field(
        None, description="The radio buttons."
    )
    ListBoxes: Optional[List[EnvelopeGetElementsListBox]] = Field(
        None, description="The list boxes."
    )
    Signatures: Optional[List[EnvelopeGetElementsSignatureField]] = Field(
        None, description="The signatures."
    )
    Attachments: Optional[List[EnvelopeGetElementsAttachment]] = Field(
        None, description="The attachments."
    )
    PredefinedFieldElements: Optional[EnvelopeGetElementsPredefinedFieldElements] = (
        Field(None, description="The predefined field elements.")
    )
    LinkConfiguration: Optional[EnvelopeGetElementsLinkConfiguration] = Field(
        None, description="The links in the documents."
    )
    AreaReadConfirmations: Optional[List[EnvelopeGetElementsReadAreaConfirmation]] = (
        Field(None, description="The areas which have to be read.")
    )
    PageReadConfirmations: Optional[List[EnvelopeGetElementsReadPagesConfirmation]] = (
        Field(None, description="The pages which have to be read.")
    )
    DocumentReadConfirmations: Optional[
        List[EnvelopeGetElementsReadDocumentConfirmation]
    ] = Field(None, description="The documents which have to be read.")


class EnvelopeGetElementsSign(BaseModel):
    SequenceMode: Optional[SequenceMode] = Field(None, description="The sequence mode.")
    Elements: Optional[EnvelopeGetElementsElements] = Field(
        None, description="The definition of the assigned elements."
    )


class EnvelopeGetConfigurationSign(BaseModel):
    RecipientConfiguration: Optional[
        EnvelopeGetConfigurationAdvancedRecipientConfiguration
    ] = Field(None, description="The configuration of the recipient.")
    FinishActionConfiguration: Optional[EnvelopeGetConfigurationFinishAction] = Field(
        None,
        description="Defines what happens in the signing clients, after an action has been finished.",
    )
    SignatureDataConfiguration: Optional[
        EnvelopeGetConfigurationSignatureDataConfiguration
    ] = Field(
        None, description="The configuration of recipient data for special signatures."
    )
    BatchConfiguration: Optional[EnvelopeGetConfigurationBatchConfiguration] = Field(
        None, description="The configuration of a signing batch."
    )
    SigningGroup: Optional[int] = Field(
        None, description="The parallel group for sign actions."
    )
    GeneralPoliciesOverrides: Optional[
        EnvelopeGetConfigurationGeneralPoliciesForSignAction
    ] = Field(None, description="Viewer policy settings for override.")


class EnvelopeGetConfigurationView(BaseModel):
    RecipientConfiguration: Optional[EnvelopeGetConfigurationRecipientConfiguration] = (
        Field(None, description="The configuration of the recipient.")
    )
    ViewingGroup: Optional[int] = Field(
        None, description="The parallel group for view actions."
    )
    GeneralPoliciesOverrides: Optional[
        EnvelopeGetConfigurationGeneralPoliciesForViewAction
    ] = Field(None, description="Viewer policy settings for override.")


class EnvelopeGetConfigurationSignAsP7M(BaseModel):
    RecipientConfiguration: Optional[
        EnvelopeGetConfigurationAdvancedRecipientConfiguration
    ] = Field(None, description="The configuration of the recipient.")
    SignatureMethods: Optional[EnvelopeGetConfigurationP7MSignatureMethods] = Field(
        None, description="The configuration of recipient data for P7M signatures."
    )
    SignAsP7MGroup: Optional[int] = Field(
        None, description="The parallel group for P7M actions."
    )
    GeneralPoliciesOverrides: Optional[
        EnvelopeGetConfigurationGeneralPoliciesForP7MAction
    ] = Field(None, description="Viewer policy settings for override.")


class EnvelopeSendElements(BaseModel):
    TextBoxes: Optional[List[EnvelopeSendTextBox]] = Field(
        None, description="The text boxes.", max_items=1000
    )
    CheckBoxes: Optional[List[EnvelopeSendCheckBox]] = Field(
        None, description="The check boxes.", max_items=1000
    )
    ComboBoxes: Optional[List[EnvelopeSendComboBox]] = Field(
        None, description="The combo boxes.", max_items=1000
    )
    RadioButtons: Optional[List[EnvelopeSendRadioButtonGroup]] = Field(
        None, description="The radio buttons.", max_items=1000
    )
    ListBoxes: Optional[List[EnvelopeSendListBox]] = Field(
        None, description="The list boxes.", max_items=1000
    )
    Signatures: Optional[List[EnvelopeSendSignatureField]] = Field(
        None, description="The signatures.", max_items=1000
    )
    Attachments: Optional[List[EnvelopeSendAttachment]] = Field(
        None, description="The attachments.", max_items=1000
    )
    PredefinedFieldElements: Optional[EnvelopeSendPredefinedFieldElements] = Field(
        None, description="The predefined field elements."
    )
    LinkConfiguration: Optional[EnvelopeSendLinkConfiguration] = Field(
        None, description="The links in the documents."
    )
    AreaReadConfirmations: Optional[List[EnvelopeSendReadAreaConfirmation]] = Field(
        None, description="The areas which have to be read.", max_items=1000
    )
    PageReadConfirmations: Optional[List[EnvelopeSendReadPagesConfirmation]] = Field(
        None, description="The pages which have to be read.", max_items=1000
    )
    DocumentReadConfirmations: Optional[List[EnvelopeSendReadDocumentConfirmation]] = (
        Field(None, description="The documents which have to be read.", max_items=1000)
    )


class EnvelopeSendSign(BaseModel):
    RecipientConfiguration: EnvelopeSendAdvancedRecipientConfiguration = Field(
        ..., description="The configuration of the recipient."
    )
    SequenceMode: Optional[SequenceMode] = Field(None, description="The sequence mode.")
    Elements: Optional[EnvelopeSendElements] = Field(
        None,
        description="The elements in the document (e.g. form fields) assigned to the recipient.",
    )
    FinishActionConfiguration: Optional[EnvelopeSendFinishAction] = Field(
        None,
        description="Defines what happens in the signing clients, after an action has been finished.",
    )
    SignatureDataConfiguration: Optional[EnvelopeSendSignatureDataConfiguration] = (
        Field(
            None,
            description="The configuration of recipient data for special signatures.",
        )
    )
    BatchConfiguration: Optional[EnvelopeSendBatchConfiguration] = Field(
        None, description="The configuration of a signing batch."
    )
    SigningGroup: Optional[str] = Field(
        None, description="The group for defining parallel sign actions."
    )
    GeneralPoliciesOverrides: Optional[EnvelopeSendGeneralPoliciesForSignAction] = (
        Field(None, description="Viewer policy settings for override.")
    )


class EnvelopeActivityReplaceElements(BaseModel):
    TextBoxes: Optional[List[EnvelopeActivityReplaceTextBox]] = Field(
        None, description="The text boxes.", max_items=1000
    )
    CheckBoxes: Optional[List[EnvelopeActivityReplaceCheckBox]] = Field(
        None, description="The check boxes.", max_items=1000
    )
    ComboBoxes: Optional[List[EnvelopeActivityReplaceComboBox]] = Field(
        None, description="The combo boxes.", max_items=1000
    )
    RadioButtons: Optional[List[EnvelopeActivityReplaceRadioButtonGroup]] = Field(
        None, description="The radio buttons.", max_items=1000
    )
    ListBoxes: Optional[List[EnvelopeActivityReplaceListBox]] = Field(
        None, description="The list boxes.", max_items=1000
    )
    Signatures: Optional[List[EnvelopeActivityReplaceSignatureField]] = Field(
        None, description="The signatures.", max_items=1000
    )
    Attachments: Optional[List[EnvelopeActivityReplaceAttachment]] = Field(
        None, description="The attachments.", max_items=1000
    )
    PredefinedFieldElements: Optional[
        EnvelopeActivityReplacePredefinedFieldElements
    ] = Field(None, description="The predefined field elements.")
    LinkConfiguration: Optional[EnvelopeActivityReplaceLinkConfiguration] = Field(
        None, description="The links in the documents."
    )
    AreaReadConfirmations: Optional[
        List[EnvelopeActivityReplaceReadAreaConfirmation]
    ] = Field(None, description="The areas which have to be read.", max_items=1000)
    PageReadConfirmations: Optional[
        List[EnvelopeActivityReplaceReadPagesConfirmation]
    ] = Field(None, description="The pages which have to be read.", max_items=1000)
    DocumentReadConfirmations: Optional[
        List[EnvelopeActivityReplaceReadDocumentConfirmation]
    ] = Field(None, description="The documents which have to be read.", max_items=1000)


class EnvelopeActivityReplaceSign(BaseModel):
    RecipientConfiguration: Optional[
        EnvelopeActivityReplaceAdvancedRecipientConfiguration
    ] = Field(None, description="The configuration of the recipient.")
    Elements: Optional[EnvelopeActivityReplaceElements] = Field(
        None,
        description="The elements in the document (e.g. form fields) assigned to the recipient.",
    )
    FinishActionConfiguration: Optional[EnvelopeActivityReplaceFinishAction] = Field(
        None,
        description="Defines what happens in the signing clients, after an action has been finished.",
    )
    SignatureDataConfiguration: Optional[
        EnvelopeActivityReplaceSignatureDataConfiguration
    ] = Field(
        None, description="The configuration of recipient data for special signatures."
    )
    BatchConfiguration: Optional[EnvelopeActivityReplaceBatchConfiguration] = Field(
        None, description="The configuration of a signing batch."
    )
    SequenceMode: Optional[SequenceMode] = Field(None, description="The sequence mode.")
    GeneralPoliciesOverrides: Optional[
        EnvelopeActivityReplaceGeneralPoliciesForSignAction
    ] = Field(None, description="Viewer policy settings for override.")


class EnvelopeBulkSendElements(BaseModel):
    TextBoxes: Optional[List[EnvelopeBulkSendTextBox]] = Field(
        None, description="The text boxes.", max_items=1000
    )
    CheckBoxes: Optional[List[EnvelopeBulkSendCheckBox]] = Field(
        None, description="The check boxes.", max_items=1000
    )
    ComboBoxes: Optional[List[EnvelopeBulkSendComboBox]] = Field(
        None, description="The combo boxes.", max_items=1000
    )
    RadioButtons: Optional[List[EnvelopeBulkSendRadioButtonGroup]] = Field(
        None, description="The radio buttons.", max_items=1000
    )
    ListBoxes: Optional[List[EnvelopeBulkSendListBox]] = Field(
        None, description="The list boxes.", max_items=1000
    )
    Signatures: Optional[List[EnvelopeBulkSendSignatureField]] = Field(
        None, description="The signatures.", max_items=1000
    )
    Attachments: Optional[List[EnvelopeBulkSendAttachment]] = Field(
        None, description="The attachments.", max_items=1000
    )
    PredefinedFieldElements: Optional[EnvelopeBulkSendPredefinedFieldElements] = Field(
        None, description="The predefined field elements."
    )
    LinkConfiguration: Optional[EnvelopeBulkSendLinkConfiguration] = Field(
        None, description="The links in the documents."
    )
    AreaReadConfirmations: Optional[List[EnvelopeBulkSendReadAreaConfirmation]] = Field(
        None, description="The areas which have to be read.", max_items=1000
    )
    PageReadConfirmations: Optional[List[EnvelopeBulkSendReadPagesConfirmation]] = (
        Field(None, description="The pages which have to be read.", max_items=1000)
    )
    DocumentReadConfirmations: Optional[
        List[EnvelopeBulkSendReadDocumentConfirmation]
    ] = Field(None, description="The documents which have to be read.", max_items=1000)


class EnvelopeBulkSendSignBulk(BaseModel):
    BulkRecipients: List[EnvelopeBulkSendRecipient] = Field(
        ...,
        description="The recipients that are part of the bulk.",
        max_items=1000,
        min_items=1,
    )
    SequenceMode: Optional[SequenceMode] = Field(None, description="The sequence mode.")
    Elements: Optional[EnvelopeBulkSendElements] = Field(
        None,
        description="The elements in the document (e.g. form fields) assigned to the recipient.",
    )
    FinishActionConfiguration: Optional[EnvelopeBulkSendFinishAction] = Field(
        None,
        description="Defines what happens in the signing clients, after an action has been finished.",
    )
    BatchConfiguration: Optional[EnvelopeBulkSendBatchConfiguration] = Field(
        None, description="The configuration of a signing batch."
    )
    GeneralPoliciesOverrides: Optional[EnvelopeBulkSendGeneralPoliciesForSignAction] = (
        Field(None, description="Viewer policy settings for override.")
    )


class EnvelopeBulkSendSign(BaseModel):
    RecipientConfiguration: EnvelopeBulkSendAdvancedRecipientConfiguration = Field(
        ..., description="The configuration of the recipient."
    )
    SequenceMode: Optional[SequenceMode] = Field(None, description="The sequence mode.")
    Elements: Optional[EnvelopeBulkSendElements] = Field(
        None,
        description="The elements in the document (e.g. form fields) assigned to the recipient.",
    )
    FinishActionConfiguration: Optional[EnvelopeBulkSendFinishAction] = Field(
        None,
        description="Defines what happens in the signing clients, after an action has been finished.",
    )
    SignatureDataConfiguration: Optional[EnvelopeBulkSendSignatureDataConfiguration] = (
        Field(
            None,
            description="The configuration of recipient data for special signatures.",
        )
    )
    BatchConfiguration: Optional[EnvelopeBulkSendBatchConfiguration] = Field(
        None, description="The configuration of a signing batch."
    )
    GeneralPoliciesOverrides: Optional[EnvelopeBulkSendGeneralPoliciesForSignAction] = (
        Field(None, description="Viewer policy settings for override.")
    )


class FilePrepareElements(BaseModel):
    TextBoxes: Optional[List[FilePrepareTextBox]] = Field(
        None, description="The text boxes."
    )
    CheckBoxes: Optional[List[FilePrepareCheckBox]] = Field(
        None, description="The check boxes."
    )
    ComboBoxes: Optional[List[FilePrepareComboBox]] = Field(
        None, description="The combo boxes."
    )
    RadioButtons: Optional[List[FilePrepareRadioButtonGroup]] = Field(
        None, description="The radio buttons."
    )
    ListBoxes: Optional[List[FilePrepareListBox]] = Field(
        None, description="The list boxes."
    )
    Signatures: Optional[List[FilePrepareSignatureField]] = Field(
        None, description="The signatures."
    )
    Attachments: Optional[List[FilePrepareAttachment]] = Field(
        None, description="The attachments."
    )
    LinkConfiguration: Optional[FilePrepareLinkConfiguration] = Field(
        None, description="The links in the documents."
    )


class FilePrepareSign(BaseModel):
    Elements: Optional[FilePrepareElements] = Field(
        None, description="The definition of the assigned elements."
    )


class TemplateGetResponse(BaseModel):
    Id: Optional[str] = Field(None, description="The identifier of the template.")
    Name: Optional[str] = Field(None, description="The name of the template.")
    CreationDate: Optional[datetime] = Field(None, description="Date of creation")
    Activities: Optional[List[TemplateGetActivity]] = Field(
        None, description="The activities of the template."
    )


class TemplateGetElementsElements(BaseModel):
    TextBoxes: Optional[List[TemplateGetElementsTextBox]] = Field(
        None, description="The text boxes."
    )
    CheckBoxes: Optional[List[TemplateGetElementsCheckBox]] = Field(
        None, description="The check boxes."
    )
    ComboBoxes: Optional[List[TemplateGetElementsComboBox]] = Field(
        None, description="The combo boxes."
    )
    RadioButtons: Optional[List[TemplateGetElementsRadioButtonGroup]] = Field(
        None, description="The radio buttons."
    )
    ListBoxes: Optional[List[TemplateGetElementsListBox]] = Field(
        None, description="The list boxes."
    )
    Signatures: Optional[List[TemplateGetElementsSignatureField]] = Field(
        None, description="The signatures."
    )
    Attachments: Optional[List[TemplateGetElementsAttachment]] = Field(
        None, description="The attachments."
    )
    PredefinedFieldElements: Optional[TemplateGetElementsPredefinedFieldElements] = (
        Field(None, description="The predefined field elements.")
    )
    LinkConfiguration: Optional[TemplateGetElementsLinkConfiguration] = Field(
        None, description="The links in the documents."
    )
    AreaReadConfirmations: Optional[List[TemplateGetElementsReadAreaConfirmation]] = (
        Field(None, description="The areas which have to be read.")
    )
    PageReadConfirmations: Optional[List[TemplateGetElementsReadPagesConfirmation]] = (
        Field(None, description="The pages which have to be read.")
    )
    DocumentReadConfirmations: Optional[
        List[TemplateGetElementsReadDocumentConfirmation]
    ] = Field(None, description="The documents which have to be read.")


class TemplateGetElementsSign(BaseModel):
    SequenceMode: Optional[SequenceMode] = Field(None, description="The sequence mode.")
    Elements: Optional[TemplateGetElementsElements] = Field(
        None, description="The definition of the assigned elements."
    )


class TemplateGetElementsSignBulk(BaseModel):
    SequenceMode: Optional[SequenceMode] = Field(None, description="The sequence mode.")
    Elements: Optional[TemplateGetElementsElements] = Field(
        None, description="The definition of the assigned elements."
    )


class TemplateGetConfigurationSign(BaseModel):
    RecipientConfiguration: Optional[
        TemplateGetConfigurationAdvancedRecipientConfiguration
    ] = Field(None, description="The configuration of the recipient.")
    FinishActionConfiguration: Optional[TemplateGetConfigurationFinishAction] = Field(
        None,
        description="Defines what happens in the signing clients, after an action has been finished.",
    )
    SignatureDataConfiguration: Optional[
        TemplateGetConfigurationSignatureDataConfiguration
    ] = Field(
        None, description="The configuration of recipient data for special signatures."
    )
    BatchConfiguration: Optional[TemplateGetConfigurationBatchConfiguration] = Field(
        None, description="The configuration of a signing batch."
    )
    SigningGroup: Optional[int] = Field(
        None, description="The parallel group for sign actions."
    )
    GeneralPoliciesOverrides: Optional[
        TemplateGetConfigurationGeneralPoliciesForSignAction
    ] = Field(None, description="Viewer policy settings for override.")


class TemplateGetConfigurationView(BaseModel):
    RecipientConfiguration: Optional[TemplateGetConfigurationRecipientConfiguration] = (
        Field(None, description="The configuration of the recipient.")
    )
    ViewingGroup: Optional[int] = Field(
        None, description="The parallel group for view actions."
    )
    GeneralPoliciesOverrides: Optional[
        TemplateGetConfigurationGeneralPoliciesForViewAction
    ] = Field(None, description="Viewer policy settings for override.")


class TemplateGetConfigurationSignAsP7M(BaseModel):
    RecipientConfiguration: Optional[
        TemplateGetConfigurationAdvancedRecipientConfiguration
    ] = Field(None, description="The configuration of the recipient.")
    SignatureMethods: Optional[TemplateGetConfigurationP7MSignatureMethods] = Field(
        None, description="The configuration of recipient data for P7M signatures."
    )
    SignAsP7MGroup: Optional[int] = Field(
        None, description="The parallel group for P7M actions."
    )
    GeneralPoliciesOverrides: Optional[
        TemplateGetConfigurationGeneralPoliciesForP7MAction
    ] = Field(None, description="Viewer policy settings for override.")


class TemplateGetConfigurationSignBulk(BaseModel):
    RecipientConfigurations: Optional[List[TemplateGetConfigurationBulkRecipient]] = (
        Field(
            None,
            description="The configurations of the recipients that are part of the bulk.",
        )
    )
    FinishActionConfiguration: Optional[TemplateGetConfigurationFinishAction] = Field(
        None,
        description="Defined actions for different clients that will trigger after an action has been finished.",
    )
    BatchConfiguration: Optional[TemplateGetConfigurationBatchConfiguration] = Field(
        None, description="The configuration of a signing batch."
    )
    GeneralPoliciesOverrides: Optional[
        TemplateGetConfigurationGeneralPoliciesForSignAction
    ] = Field(None, description="Viewer policy settings for override.")


class DraftGetElementsAction(BaseModel):
    SignAutomatic: Optional[DraftGetElementsSignAutomatic] = Field(
        None, description="The definition of the automatic sign action."
    )
    Sign: Optional[DraftGetElementsSign] = Field(
        None, description="The definition of the sign action."
    )
    SignBulk: Optional[DraftGetElementsSignBulk] = Field(
        None, description="The definition of the bulk."
    )


class DraftGetConfigurationAction(BaseModel):
    SendCopy: Optional[DraftGetConfigurationSendCopy] = Field(
        None, description="The configuration of the copy action."
    )
    Sign: Optional[DraftGetConfigurationSign] = Field(
        None, description="The configuration of the sign action."
    )
    View: Optional[DraftGetConfigurationView] = Field(
        None, description="The configuration of the view action."
    )
    SignAsP7M: Optional[DraftGetConfigurationSignAsP7M] = Field(
        None, description="The configuration of the P7M sign action."
    )
    SignBulk: Optional[DraftGetConfigurationSignBulk] = Field(
        None, description="The definition of the bulk."
    )


class DraftCreateAction(BaseModel):
    SendCopy: Optional[DraftCreateSendCopy] = Field(
        None, description="The definition of the copy action."
    )
    SignAutomatic: Optional[DraftCreateSignAutomatic] = Field(
        None, description="The definition of the automatic sign action."
    )
    Sign: Optional[DraftCreateSign] = Field(
        None, description="The definition of the sign action."
    )
    View: Optional[DraftCreateView] = Field(
        None, description="The definition of the view action."
    )
    SignAsP7M: Optional[DraftCreateSignAsP7M] = Field(
        None, description="The definition of the P7M sign action."
    )
    SignBulk: Optional[DraftCreateSignBulk] = Field(
        None, description="The definition of the bulk."
    )


class DraftActivityReplaceAction(BaseModel):
    SendCopy: Optional[DraftActivityReplaceSendCopy] = Field(
        None, description="The definition of the copy action."
    )
    SignAutomatic: Optional[DraftActivityReplaceSignAutomatic] = Field(
        None, description="The definition of the automatic sign action."
    )
    Sign: Optional[DraftActivityReplaceSign] = Field(
        None, description="The definition of the sign action."
    )
    View: Optional[DraftActivityReplaceView] = Field(
        None, description="The definition of the view action."
    )
    SignAsP7M: Optional[DraftActivityReplaceSignAsP7M] = Field(
        None, description="The definition of the P7M sign action."
    )
    SignBulk: Optional[DraftActivityReplaceSignBulk] = Field(
        None, description="The definition of the bulk."
    )


class EnvelopeGetElementsAction(BaseModel):
    SignAutomatic: Optional[EnvelopeGetElementsSignAutomatic] = Field(
        None, description="The definition of the automatic sign action."
    )
    Sign: Optional[EnvelopeGetElementsSign] = Field(
        None, description="The definition of the sign action."
    )


class EnvelopeGetConfigurationAction(BaseModel):
    SendCopy: Optional[EnvelopeGetConfigurationSendCopy] = Field(
        None, description="The configuration of the copy action."
    )
    Sign: Optional[EnvelopeGetConfigurationSign] = Field(
        None, description="The configuration of the sign action."
    )
    View: Optional[EnvelopeGetConfigurationView] = Field(
        None, description="The configuration of the view action."
    )
    SignAsP7M: Optional[EnvelopeGetConfigurationSignAsP7M] = Field(
        None, description="The configuration of the P7M sign action."
    )


class EnvelopeSendAction(BaseModel):
    SendCopy: Optional[EnvelopeSendSendCopy] = Field(
        None, description="The definition of the copy action."
    )
    SignAutomatic: Optional[EnvelopeSendSignAutomatic] = Field(
        None, description="The definition of the automatic sign action."
    )
    Sign: Optional[EnvelopeSendSign] = Field(
        None, description="The definition of the sign action."
    )
    View: Optional[EnvelopeSendView] = Field(
        None, description="The definition of the view action."
    )
    SignAsP7M: Optional[EnvelopeSendSignAsP7M] = Field(
        None, description="The definition of the P7M sign action."
    )


class EnvelopeActivityReplaceAction(BaseModel):
    SendCopy: Optional[EnvelopeActivityReplaceSendCopy] = Field(
        None, description="The definition of the copy action."
    )
    SignAutomatic: Optional[EnvelopeActivityReplaceSignAutomatic] = Field(
        None, description="The definition of the automatic sign action."
    )
    Sign: Optional[EnvelopeActivityReplaceSign] = Field(
        None, description="The definition of the sign action."
    )
    View: Optional[EnvelopeActivityReplaceView] = Field(
        None, description="The definition of the view action."
    )
    SignAsP7M: Optional[EnvelopeActivityReplaceSignAsP7M] = Field(
        None, description="The definition of the P7M sign action."
    )


class EnvelopeBulkSendAction(BaseModel):
    SendCopy: Optional[EnvelopeBulkSendSendCopy] = Field(
        None, description="The definition of the copy action."
    )
    SignAutomatic: Optional[EnvelopeBulkSendSignAutomatic] = Field(
        None, description="The definition of the automatic sign action."
    )
    Sign: Optional[EnvelopeBulkSendSign] = Field(
        None, description="The definition of the sign action."
    )
    View: Optional[EnvelopeBulkSendView] = Field(
        None, description="The definition of the view action."
    )
    SignAsP7M: Optional[EnvelopeBulkSendSignAsP7M] = Field(
        None, description="The definition of the P7M sign action."
    )
    SignBulk: Optional[EnvelopeBulkSendSignBulk] = Field(
        None, description="The definition of the bulk."
    )


class FilePrepareAction(BaseModel):
    SignAutomatic: Optional[FilePrepareSignAutomatic] = Field(
        None, description="The definition of the automatic sign action."
    )
    Sign: Optional[FilePrepareSign] = Field(
        None, description="The definition of the sign action."
    )


class TemplateGetElementsAction(BaseModel):
    SignAutomatic: Optional[TemplateGetElementsSignAutomatic] = Field(
        None, description="The definition of the automatic sign action."
    )
    Sign: Optional[TemplateGetElementsSign] = Field(
        None, description="The definition of the sign action."
    )
    SignBulk: Optional[TemplateGetElementsSignBulk] = Field(
        None, description="The definition of the bulk."
    )


class TemplateGetConfigurationAction(BaseModel):
    SendCopy: Optional[TemplateGetConfigurationSendCopy] = Field(
        None, description="The configuration of the copy action."
    )
    Sign: Optional[TemplateGetConfigurationSign] = Field(
        None, description="The configuration of the sign action."
    )
    View: Optional[TemplateGetConfigurationView] = Field(
        None, description="The configuration of the view action."
    )
    SignAsP7M: Optional[TemplateGetConfigurationSignAsP7M] = Field(
        None, description="The configuration of the P7M sign action."
    )
    SignBulk: Optional[TemplateGetConfigurationSignBulk] = Field(
        None, description="The definition of the bulk."
    )


class DraftGetElementsActivity(BaseModel):
    Id: Optional[str] = Field(None, description="The identifier of the activity.")
    Action: Optional[DraftGetElementsAction] = Field(
        None, description="The action assigned to the activity."
    )


class DraftGetConfigurationActivity(BaseModel):
    Id: Optional[str] = Field(None, description="The identifier of the activity.")
    Action: Optional[DraftGetConfigurationAction] = Field(
        None, description="The action assigned to the activity."
    )
    VisibilityOptions: Optional[List[DraftGetConfigurationVisibilityOption]] = Field(
        None, description="The document visibility options for the activity."
    )


class DraftCreateActivity(BaseModel):
    Action: Optional[DraftCreateAction] = Field(
        None, description="The action assigned to the activity."
    )
    VisibilityOptions: Optional[List[DraftCreateVisibilityOption]] = Field(
        None,
        description="The document visibility options for the activity.",
        max_items=50,
    )


class DraftCreateRequest(BaseModel):
    Documents: List[DraftCreateDocument] = Field(
        ..., description="The documents for the envelope.", max_items=50
    )
    Name: str = Field(..., description="The name of the envelope.")
    MetaData: Optional[str] = Field(None, description="The metadata of the envelope.")
    AddDocumentTimestamp: Optional[bool] = Field(
        None,
        description="If true, a timestamp is added to all documents of the envelope at the end of each signing activity.",
    )
    ShareWithTeam: Optional[bool] = Field(
        None, description="If true, this envelope is shared with your teams."
    )
    LockFormFieldsOnFinish: Optional[bool] = Field(
        None,
        description="If true, form fields are locked after the envelope is finished.",
    )
    SendFinishedDocumentsToAllSignersAndMustView: Optional[bool] = Field(
        None,
        description="If true, every signer and viewer will receive a copy of the finished documents.",
    )
    UnassignedElements: Optional[DraftCreateElements] = Field(
        None, description="The elements which are not assigned to any action."
    )
    Activities: List[DraftCreateActivity] = Field(
        ..., description="The steps for the envelope.", max_items=50
    )
    EmailConfiguration: Optional[DraftCreateEmailConfiguration] = Field(
        None, description="The configuration for notifications."
    )
    ReminderConfiguration: Optional[DraftCreateReminderConfiguration] = Field(
        None, description="The configuration for reminders."
    )
    ExpirationConfiguration: Optional[DraftCreateExpirationConfiguration] = Field(
        None, description="The configuration of the expiration for the envelope."
    )
    CallbackConfiguration: Optional[DraftCreateCallbackConfiguration] = Field(
        None, description="The configuration of the callbacks for a custom integration."
    )
    AgentRedirectConfiguration: Optional[DraftCreateAgentRedirectConfiguration] = Field(
        None, description="The configuration of the redirects for the agent mode."
    )
    RedirectConfiguration: Optional[DraftCreateRedirectConfiguration] = Field(
        None, description="The configuration of the draft redirect URLs."
    )
    AgreementConfiguration: Optional[DraftCreateAgreementConfiguration] = Field(
        None,
        description="The configuration of the agreement.\r\nRequires that the organization allows custom agreement settings.",
    )
    DefaultSignatureTypeConfiguration: Optional[
        DraftCreateDefaultSignatureTypeConfiguration
    ] = Field(
        None,
        description="A default signature type to be used only for the draft that overwrites the default signature type of the organization.",
    )
    SealingConfiguration: Optional[DraftCreateSealingConfiguration] = Field(
        None, description="The custom sealing configuration for the envelope."
    )


class DraftActivityReplaceRequest(BaseModel):
    ActivityId: str = Field(..., description="The identifier of the activity.")
    Action: Optional[DraftActivityReplaceAction] = Field(
        None, description="The action assigned to the activity."
    )
    VisibilityOptions: Optional[List[DraftActivityReplaceVisibilityOption]] = Field(
        None,
        description="The document visibility options for the activity.",
        max_items=50,
    )


class EnvelopeGetElementsActivity(BaseModel):
    Id: Optional[str] = Field(None, description="The identifier of the activity.")
    Action: Optional[EnvelopeGetElementsAction] = Field(
        None, description="The action assigned to the activity."
    )


class EnvelopeGetConfigurationActivity(BaseModel):
    Id: Optional[str] = Field(None, description="The identifier of the activity.")
    Action: Optional[EnvelopeGetConfigurationAction] = Field(
        None, description="The action assigned to the activity."
    )
    VisibilityOptions: Optional[List[EnvelopeGetConfigurationVisibilityOption]] = Field(
        None, description="The document visibility options for the activity."
    )


class EnvelopeSendActivity(BaseModel):
    Action: Optional[EnvelopeSendAction] = Field(
        None, description="The action assigned to the activity."
    )
    VisibilityOptions: Optional[List[EnvelopeSendVisibilityOption]] = Field(
        None,
        description="The document visibility options for the activity.",
        max_items=50,
    )


class EnvelopeSendRequest(BaseModel):
    Documents: List[EnvelopeSendDocument] = Field(
        ..., description="The documents for the envelope.", max_items=50, min_items=1
    )
    Name: str = Field(..., description="The name of the envelope.")
    MetaData: Optional[str] = Field(None, description="The metadata of the envelope.")
    AddDocumentTimestamp: Optional[bool] = Field(
        None,
        description="If true, a timestamp is added to all documents of the envelope at the end of each signing activity.",
    )
    ShareWithTeam: Optional[bool] = Field(
        None, description="If true, this envelope is shared with your teams."
    )
    LockFormFieldsOnFinish: Optional[bool] = Field(
        None,
        description="If true, form fields are locked after the envelope is finished.",
    )
    UnassignedElements: Optional[EnvelopeSendUnassignedElements] = Field(
        None, description="The elements which are not assigned to any action."
    )
    Activities: List[EnvelopeSendActivity] = Field(
        ..., description="The steps for the envelope.", max_items=50, min_items=1
    )
    EmailConfiguration: Optional[EnvelopeSendEmailConfiguration] = Field(
        None, description="The configuration for notifications."
    )
    ReminderConfiguration: Optional[EnvelopeSendReminderConfiguration] = Field(
        None, description="The configuration for reminders."
    )
    ExpirationConfiguration: Optional[EnvelopeSendExpirationConfiguration] = Field(
        None, description="The configuration of the expiration for the envelope."
    )
    CallbackConfiguration: Optional[EnvelopeSendCallbackConfiguration] = Field(
        None, description="The configuration of the callbacks for a custom integration."
    )
    AgreementConfiguration: Optional[EnvelopeSendAgreementConfiguration] = Field(
        None,
        description="The configuration of the agreement.\r\nRequires that the organization allows custom agreement settings.",
    )
    SealingConfiguration: Optional[EnvelopeSendSealingConfiguration] = Field(
        None, description="The custom sealing configuration for the envelope."
    )


class EnvelopeActivityReplaceRequest(BaseModel):
    ActivityId: str = Field(..., description="The identifier of the activity.")
    Action: Optional[EnvelopeActivityReplaceAction] = Field(
        None, description="The action assigned to the activity."
    )
    VisibilityOptions: Optional[List[EnvelopeActivityReplaceVisibilityOption]] = Field(
        None,
        description="The document visibility options for the activity.",
        max_items=50,
    )


class EnvelopeBulkSendActivity(BaseModel):
    Action: Optional[EnvelopeBulkSendAction] = Field(
        None, description="The action assigned to the activity."
    )
    VisibilityOptions: Optional[List[EnvelopeBulkSendVisibilityOption]] = Field(
        None,
        description="The document visibility options for the activity.",
        max_items=50,
    )


class EnvelopeBulkSendRequest(BaseModel):
    Documents: List[EnvelopeBulkSendDocument] = Field(
        ..., description="The documents for the envelope.", max_items=50, min_items=1
    )
    Name: str = Field(..., description="The name of the envelope.")
    MetaData: Optional[str] = Field(None, description="The metadata of the envelope.")
    AddDocumentTimestamp: Optional[bool] = Field(
        None,
        description="If true, a timestamp is added to all documents of the envelope at the end of each signing activity.",
    )
    ShareWithTeam: Optional[bool] = Field(
        None, description="If true, this envelope is shared with your teams."
    )
    LockFormFieldsOnFinish: Optional[bool] = Field(
        None,
        description="If true, form fields are locked after the envelope is finished.",
    )
    UnassignedElements: Optional[EnvelopeBulkSendUnassignedElements] = Field(
        None, description="The elements which are not assigned to any action."
    )
    Activities: List[EnvelopeBulkSendActivity] = Field(
        ..., description="The steps for the envelope.", max_items=50, min_items=1
    )
    EmailConfiguration: Optional[EnvelopeBulkSendEmailConfiguration] = Field(
        None, description="The configuration for notifications."
    )
    ReminderConfiguration: Optional[EnvelopeBulkSendReminderConfiguration] = Field(
        None, description="The configuration for reminders."
    )
    ExpirationConfiguration: Optional[EnvelopeBulkSendExpirationConfiguration] = Field(
        None, description="The configuration of the expiration for the envelope."
    )
    CallbackConfiguration: Optional[EnvelopeBulkSendCallbackConfiguration] = Field(
        None, description="The configuration of the callbacks for a custom integration."
    )
    AgreementConfiguration: Optional[EnvelopeBulkSendAgreementConfiguration] = Field(
        None,
        description="The configuration of the agreement.\r\nRequires that the organization allows custom agreement settings.",
    )
    SealingConfiguration: Optional[EnvelopeBulkSendSealingConfiguration] = Field(
        None, description="The custom sealing configuration for the envelope."
    )


class FilePrepareActivity(BaseModel):
    Action: Optional[FilePrepareAction] = Field(
        None, description="The action assigned to the activity."
    )


class TemplateGetElementsActivity(BaseModel):
    Id: Optional[str] = Field(None, description="The identifier of the activity.")
    Action: Optional[TemplateGetElementsAction] = Field(
        None, description="The action assigned to the activity."
    )


class TemplateGetConfigurationActivity(BaseModel):
    Id: Optional[str] = Field(None, description="The identifier of the activity.")
    Action: Optional[TemplateGetConfigurationAction] = Field(
        None, description="The action assigned to the activity."
    )
    VisibilityOptions: Optional[List[TemplateGetConfigurationVisibilityOption]] = Field(
        None, description="The document visibility options for the activity."
    )


class DraftGetElementsResponse(BaseModel):
    UnassignedElements: Optional[DraftGetElementsElements] = Field(
        None, description="The elements which are not assigned to any action."
    )
    Activities: Optional[List[DraftGetElementsActivity]] = Field(
        None, description="The steps for the envelope."
    )


class DraftGetConfigurationResponse(BaseModel):
    MetaData: Optional[str] = Field(None, description="The metadata of the envelope.")
    AddDocumentTimestamp: Optional[bool] = Field(
        None,
        description="If true, a timestamp is added to all documents of the envelope at the end of each signing activity.",
    )
    ShareWithTeam: Optional[bool] = Field(
        None, description="If true, this envelope is shared with your teams."
    )
    LockFormFieldsOnFinish: Optional[bool] = Field(
        None, description="If true, form fields are locked after envelope is finished."
    )
    SendFinishedDocumentsToAllSignersAndMustView: Optional[bool] = Field(
        None,
        description="If true, every signer and viewer will receive a copy of the finished documents.",
    )
    Activities: Optional[List[DraftGetConfigurationActivity]] = Field(
        None, description="The steps for the envelope."
    )
    EmailConfiguration: Optional[DraftGetConfigurationEmailConfiguration] = Field(
        None, description="The configuration for notifications."
    )
    ReminderConfiguration: Optional[DraftGetConfigurationReminderConfiguration] = Field(
        None, description="The configuration for reminders."
    )
    ExpirationConfiguration: Optional[DraftGetConfigurationExpirationConfiguration] = (
        Field(None, description="The configuration of the expiration for the envelope.")
    )
    CallbackConfiguration: Optional[DraftGetConfigurationCallbackConfiguration] = Field(
        None, description="The configuration of the callbacks for a custom integration."
    )
    AgreementConfiguration: Optional[DraftGetConfigurationAgreementConfiguration] = (
        Field(None, description="The configuration of the agreement.")
    )
    AgentRedirectConfiguration: Optional[
        DraftGetConfigurationAgentRedirectConfiguration
    ] = Field(
        None, description="The configuration of the redirects for the agent mode."
    )
    RedirectConfiguration: Optional[DraftGetConfigurationRedirectConfiguration] = Field(
        None, description="The configuration of the redirects for the agent mode."
    )
    DefaultSignatureTypeConfiguration: Optional[
        DraftGetConfigurationDefaultSignatureTypeConfiguration
    ] = Field(None, description="Draft default signature type configuration.")
    SealingConfiguration: Optional[DraftGetConfigurationSealingConfiguration] = Field(
        None, description="The configuration for sealing."
    )


class EnvelopeGetElementsResponse(BaseModel):
    UnassignedElements: Optional[EnvelopeGetElementsElements] = Field(
        None, description="The elements which are not assigned to any action."
    )
    Activities: Optional[List[EnvelopeGetElementsActivity]] = Field(
        None, description="The steps for the envelope."
    )


class EnvelopeGetConfigurationResponse(BaseModel):
    MetaData: Optional[str] = Field(None, description="The metadata of the envelope.")
    AddDocumentTimestamp: Optional[bool] = Field(
        None,
        description="If true, a timestamp is added to all documents of the envelope at the end of each signing activity.",
    )
    ShareWithTeam: Optional[bool] = Field(
        None, description="If true, this envelope is shared with your teams."
    )
    LockFormFieldsOnFinish: Optional[bool] = Field(
        None, description="If true, form fields are locked after envelope is finished."
    )
    Activities: Optional[List[EnvelopeGetConfigurationActivity]] = Field(
        None, description="The steps for the envelope."
    )
    EmailConfiguration: Optional[EnvelopeGetConfigurationEmailConfiguration] = Field(
        None, description="The configuration for notifications."
    )
    ReminderConfiguration: Optional[EnvelopeGetConfigurationReminderConfiguration] = (
        Field(None, description="The configuration for reminders.")
    )
    ExpirationConfiguration: Optional[
        EnvelopeGetConfigurationExpirationConfiguration
    ] = Field(None, description="The configuration of the expiration for the envelope.")
    CallbackConfiguration: Optional[EnvelopeGetConfigurationCallbackConfiguration] = (
        Field(
            None,
            description="The configuration of the callbacks for a custom integration.",
        )
    )
    AgreementConfiguration: Optional[EnvelopeGetConfigurationAgreementConfiguration] = (
        Field(None, description="The configuration of the agreement.")
    )
    SealingConfiguration: Optional[EnvelopeGetConfigurationSealingConfiguration] = (
        Field(None, description="The configuration for sealing.")
    )


class FilePrepareResponse(BaseModel):
    UnassignedElements: Optional[FilePrepareElements] = Field(
        None, description="The elements which are not assigned to any action."
    )
    Activities: Optional[List[FilePrepareActivity]] = Field(
        None,
        description="The steps for the envelope.\r\nOne activity may contain elements from multiple documents assigned to the same recipient.\r\nThe activities will only be generated for advanced document tags.",
    )


class TemplateGetElementsResponse(BaseModel):
    UnassignedElements: Optional[TemplateGetElementsElements] = Field(
        None, description="The elements which are not assigned to any action."
    )
    Activities: Optional[List[TemplateGetElementsActivity]] = Field(
        None, description="The steps for the envelope."
    )


class TemplateGetConfigurationResponse(BaseModel):
    MetaData: Optional[str] = Field(None, description="The metadata of the envelope.")
    AddDocumentTimestamp: Optional[bool] = Field(
        None,
        description="If true, a timestamp is added to all documents of the envelope at the end of each signing activity.",
    )
    ShareWithTeam: Optional[bool] = Field(
        None, description="If true, this envelope is shared with your teams."
    )
    LockFormFieldsOnFinish: Optional[bool] = Field(
        None, description="If true, form fields are locked after envelope is finished."
    )
    SendFinishedDocumentsToAllSignersAndMustView: Optional[bool] = Field(
        None,
        description="If true, every signer and viewer will receive a copy of the finished documents.",
    )
    Activities: Optional[List[TemplateGetConfigurationActivity]] = Field(
        None, description="The steps for the envelope."
    )
    EmailConfiguration: Optional[TemplateGetConfigurationEmailConfiguration] = Field(
        None, description="The configuration for notifications."
    )
    ReminderConfiguration: Optional[TemplateGetConfigurationReminderConfiguration] = (
        Field(None, description="The configuration for reminders.")
    )
    ExpirationConfiguration: Optional[
        TemplateGetConfigurationExpirationConfiguration
    ] = Field(None, description="The configuration of the expiration for the envelope.")
    CallbackConfiguration: Optional[TemplateGetConfigurationCallbackConfiguration] = (
        Field(
            None,
            description="The configuration of the callbacks for a custom integration.",
        )
    )
    AgreementConfiguration: Optional[TemplateGetConfigurationAgreementConfiguration] = (
        Field(None, description="The configuration of the agreement.")
    )
    AgentRedirectConfiguration: Optional[
        TemplateGetConfigurationAgentRedirectConfiguration
    ] = Field(
        None, description="The configuration of the redirects for the agent mode."
    )
    RedirectConfiguration: Optional[TemplateGetConfigurationRedirectConfiguration] = (
        Field(
            None, description="The configuration of the redirects for the agent mode."
        )
    )
    DefaultSignatureTypeConfiguration: Optional[
        TemplateGetConfigurationDefaultSignatureTypeConfiguration
    ] = Field(None, description="Draft default signature type configuration.")
    SealingConfiguration: Optional[TemplateGetConfigurationSealingConfiguration] = (
        Field(None, description="The configuration for sealing.")
    )


TeamGetAllTeamMember.update_forward_refs()
TeamReplaceTeamMember.update_forward_refs()
